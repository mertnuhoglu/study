_ id=r_lastid cjs_004

# Study JS

	study_js
    js stl standard library
			bind
				https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
					The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.
					ex
						var module = {
							x: 42,
							getX: function() {
								return this.x;
							}
						}
						var unboundGetX = module.getX;
						console.log(unboundGetX()); // The function gets invoked at the global scope
						// expected output: undefined
						var boundGetX = unboundGetX.bind(module);
						console.log(boundGetX());
						// expected output: 42
      JSON
        JSON.parse(string): object
          var json = '{"result":true, "count":42}';
          obj = JSON.parse(json);
          console.log(obj.count);
          // expected output: 42
    js idioms
      Object.keys
        <url:file:///~/projects/study/js/ex/study_js/idioms/001.js>
        // simple array
        var arr = ['a', 'b', 'c'];
        console.log(Object.keys(arr)); // console: ['0', '1', '2']
        // array like object
        var obj = { 0: 'a', 1: 'b', 2: 'c' };
        console.log(Object.keys(obj)); // console: ['0', '1', '2']
      export import 
				require vs import id=g10603
					require vs import <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10603>
					ref
						ES Module Syntax  <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10602>
					opt01: 
						import {div} from '@cycle/dom';
						const {div} = require('@cycle/dom');
					opt02: default
						import xs from 'xstream';
						const xs = require('xstream').default
					opt03: * all
						import * as foo from './foo'
						const foo = require('./foo')
						foo.a
        es6
          ex:
            <url:file:///~/codes/js/meeting-price-calculator/src/components/ticker/index.ts>
            ticker/index.js
              export default function Ticker(sources: Sources): Sinks {
              export const lens = {
            app/index.js
              import Ticker, { lens as tickerLens } from '../ticker';
            # summary
              export ettiysen {} ile import et
              export default ise Ticker from ... ile import et
      Method calling by condition
        // Boring
        if (success) {
         obj.start();
        } else {
         obj.stop();
        }
        // Hipster-fun
        var method = (success ? ‘start’ : ‘stop’);
        obj[method]();
      join string array to string
        [‘first’, ‘name’].join(‘ ‘); // = ‘first name’;
        [‘milk’, ‘coffee’, ‘suger’].join(‘, ‘); // = ‘milk, coffee, suger’
      default operator ||
        // default to ‘No name’ when myName is empty (or null, or undefined)
        var name = myName || ‘No name’;
        // make sure we have an options object
        var doStuff = function(options) {
         options = options || {};
         // …
        };
      guard operator &&
        // Boring
        if (isThisAwesome) {
         alert(‘yes’); // it’s not
        }
        // Awesome
        isThisAwesome && alert(‘yes’);
        // Also cool for guarding your code
        var aCoolFunction = undefined;
        aCoolFunction && aCoolFunction(); // won’t run nor crash
      xxx as todo placeholder
        var z = 15;
        doSomeMath(z, 10);
        xxx // Great placeholder. I’m the only one using xxx and it’s so easy to find in code instead of TODOs
        doSomeMoreMath(z, 15);
      timing
        var a = [1,2,3,4,5,6,7,8,9,10];
        console.time(‘testing_forward’);
        for (var i = 0; i < a.length; i++);
        console.timeEnd(‘testing_forward’);
        // output: testing_forward: 0.041ms
        console.time(‘testing_backwards’);
      debugger statement
        var x = 1;
        debugger; // Code execution stops here, happy debugging
        x++;
        var x = Math.random(2);
        if (x > 0.5) {
         debugger; // Conditional breakpoint
        }
      templating
        var firstName = `Tal`;
        var screenName = `ketacode`
        // Ugly
        `Hi, my name is ` + firstName + ` and my twitter screen name is @` + screenName;
        // Super
        var template = `Hi, my name is {first-name} and my twitter screen name is @{screen-name}`;
        var txt = template.replace(`{first-name}`, firstName)
         .replace(`{screen-name}`, screenName);
      Swap variables using array destructuring
        let a = 'world', b = 'hello'
        [a, b] = [b, a]
        console.log(a) // -> hello
        console.log(b) // -> world
        // Yes, it's magic
      Async/Await with destructuring
        const [user, account] = await Promise.all([
          fetch('/user'),
          fetch('/account')
        ])
      console.log several variables with their names
        const a = 5, b = 6, c = 7
        console.log({ a, b, c })
        // outputs this nice object:
        // {
        //    a: 5,
        //    b: 6,
        //    c: 7
        // }
      One liners with array operations
        // Find max value
        const max = (arr) => Math.max(...arr);
        max([123, 321, 32]) // outputs: 321
        // Sum array
        const sum = (arr) => arr.reduce((a, b) => (a + b), 0)
        sum([1, 2, 3, 4]) // output: 10
      concat arrays with `spread` operator
        const one = ['a', 'b', 'c']
        const two = ['d', 'e', 'f']
        const three = ['g', 'h', 'i']
        // Old way #1
        const result = one.concat(two, three)
        // Old way #2
        const result = [].concat(one, two, three)
        // New
        const result = [...one, ...two, ...three]
      Clone objects with `spread`
        const obj = { ...oldObj }
        const arr = [ ...oldArr ]
      Named parameters
        const getStuffNotBad = (id, force, verbose) => {
          ...do stuff
        }
        const getStuffAwesome = ({ id, name, force, verbose }) => {
          ...do stuff
        }
        // Somewhere else in the codebase... WTF is true, true?
        getStuffNotBad(150, true, true)
        // Somewhere else in the codebase... I ❤ JS!!!
        getStuffAwesome({ id: 150, force: true, verbose: true })
      Double exclamation converts anything to boolean
        var foo = 0
        console.log(!!foo)
        //> false
        // equivalent to
        Boolean(foo)
      Converting arguments to array using slice
        (function() {
          console.log(arguments instanceof Array)
          //> false
          var args = Array.prototype.slice.call(arguments)
          console.log(args instanceof Array)
          //> true
        })()
      Converting to array if not already
        var totallyArray = [].concat(value)
        //instead of
        var totallyArray = value instanceof Array ? value : [value]
      Converting strings to number
        var foo = +'12.2'
        var bar = +'12'
        // instead of
        var foo = parseFloat('12.2')
        var bar = parseInt('12')
      Checking if an array includes an element using tilde operator 
        if (~[1, 2, 3].indexOf(2)) { console.log('includes') }
        // instead of
        if ([1, 2, 3].indexOf(2) > -1) { console.log('includes') }
      Writing multi-line strings
        var multiStr = [
          "This is the first line",
          "This is the second line",
          "This is more..."
        ].join("\n");
      Looping through an array
        for (var i = arr.length; i--;) {
          // ...
        }
        // instead of
        for (var i = 0; i < arr.length; i++) {
          // ...
        }
      setTimeout(func, 0): schedule a function to run after current event loop tick
        setTimeout(function() {
          console.log('log message from next tick')
        }, 0)
        console.log('Hello world!')
        //> Hello world!
        //> log message from next tick
      void 0 instead of `undefined`
        void 0 == undefined
      chaining
        function makeApple() {
            function setColor (color) {
                apple.color = color;
                return apple;
            }
            function setSize (size) {
                apple.size = size;
                return apple;
            }
            // hoisting will ensure this is declared in time.
            var apple = {
                setColor: setColor,
                setSize: setSize,
            };
            return apple;
        }
        var apple = makeApple();
        apple.setColor('red').setSize('large').setWeight('8 oz');
        console.log(apple);
        // {color: 'red', size: 'large', weight: '8 oz' ...}
      type checks
        // String:
        typeof variable === "string"
        // Number:
        typeof variable === "number"
        // Boolean:
        typeof variable === "boolean"
        // Object:
        typeof variable === "object"
        // Array:
        Array.isArray( arrayLikeObject )
        // (wherever possible)
        // Node:
        elem.nodeType === 1
        // null:
        variable === null
        // null or undefined:
        variable == null
        // undefined:
        // Global Variables:
        typeof variable === "undefined"
        // Local Variables:
        variable === undefined
        // Properties:
        object.prop === undefined
        object.hasOwnProperty( prop )
        "prop" in object
      string is empty
        // instead of this:
        if ( string !== "" ) ...
        // ...evaluate truthiness, like this:
        if ( string ) ...
        // When only evaluating that a string _is_ empty,
        // instead of this:
        if ( string === "" ) ...
        // ...evaluate falsy-ness, like this:
        if ( !string ) ...
      == vs ===
        // === does not coerce type, which means that:
        "1" === 1;
        // false
        // == does coerce type, which means that:
        "1" == 1;
        // true
      truthy falsy
        // Truthy:
        "foo", 1
        // Falsy:
        "", 0, null, undefined, NaN, void 0
      naming
        camelCase; function and var declarations
        // 6.A.3.4
        // Naming constructors, prototypes, etc.
        PascalCase; constructor function
        // 6.A.3.5
        // Naming regular expressions
        rDesc = //;
        // 6.A.3.6
        // From the Google Closure Library Style Guide
        functionNamesLikeThis;
        variableNamesLikeThis;
        ConstructorNamesLikeThis;
        EnumNamesLikeThis;
        methodNamesLikeThis;
        SYMBOLIC_CONSTANTS_LIKE_THIS;
      if then else with && and ||
        ex
          if (userName) {
            logIn (userName);
          }
           else {
             signUp ();
          }
          // ->
          userName && logIn (userName) || signUp ();
        ex
          var userID;
          if (userName && userName.loggedIn) {
            userID = userName.id;
          }
          else {
            userID = null;
          }
          // ->
          var userID = userName && userName.loggedIn && userName.id
    babel
      double colon (bind operator)
        https://stackoverflow.com/questions/31220078/javascript-double-colon-bind-operator
          ::this.handle
          =>
          this.handle.bind(this)
          method extraction
            ::obj.method = obj.method.bind(obj)
          virtual method calls
            obj::function = function.bind(obj)
            obj::function(...) = function.call(obj, ...)
      example: spread operator for objects es2017 stage-3
        <url:file:///~/codes/js/todomvc-cycle-onion/.babelrc>
        .babelrc
          {
            "presets": ["es2015"],
            "plugins": ["transform-object-rest-spread"]
          }
        package.json
          "devDependencies": {
            "babel-preset-env": "^1.7.0",
            "babel-plugin-transform-object-rest-spread": "^6.6.5",
            "babel-preset-es2015": "^6.3.13",
            "babel-register": "^6.4.3",
            "babelify": "^7.2.0",
    chrome devtools debug tools
      ref
        <url:file:///~/projects/study/js/study_chrome_devtools.Rmd>
      chrome'da yaptığın değişikliklerin dosya sistemine kaydedilmesi 
        https://developers.google.com/web/tools/setup/setup-workflow
        debug > source > right > Add Folder to Workspace
        .select a file > Map to File System Resource
      current element in inspector:
        $0
      previous element:
        $1 $2 ...
      find an element like jquery:
        $('span') // finds one element
        $$('span') // finds all elements
        $x('html/body/div') // find by path
        inspect($('span')) // select in inspector
      monitor events on web page
        monitorEvent($('h1'), 'click')
      dom breakpoint
        inspector > .select element > Break on ... > Subtree Modifications
    cyclejs id=g10248
			cyclejs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10248>
      ref
        <url:file:///~/projects/study/js/study_learn_rxjs.Rmd>
        <url:file:///~/projects/study/js/study_rxjs.Rmd>
        <url:file:///~/projects/study/js/study_rxjs_manual.Rmd>
        <url:file:///~/projects/study/js/study_notes_cyclejs.Rmd>
        <url:file:///~/projects/study/js/study_cyclejs_onion_architecture.Rmd>
        <url:file:///~/projects/study/js/study_cyclejs_router.Rmd>
        <url:file:///~/projects/study/problem/datatables_in_cyclejs/datatables_in_cyclejs.Rmd>
        <url:file:///~//itr/vrp_doc/study/cyclejs_vrp.Rmd>
			refcard cyclejs id=g10245
				refcard cyclejs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10245>
				Reference CycleJs Examples <url:/Users/mertnuhoglu/projects/study/js/study_notes_cyclejs.Rmd#tn=Reference CycleJs Examples>
      current
				addListener
					addListener <url:#r=cjs_004>
        debug
					systematic elimination of possible bug causes
						ref
							p17: Systematic elimination of possible bug causes <url:file:///~/projects/study/js/study_notes_cyclejs.Rmd#r=g10219>
						Put debug(console.log) to each stream
							const requests$ = xs.merge( parentRequests$, planPanelSinks.HTTP,)
								 .debug(x => { console.log("app/index main requests$"); console.log(x); })
						Eliminate all possible stream objects one by one
							ex
								const vdom$ = xs.combine(
									headerSinks.DOM,
									planPanelSinks.DOM,
									detailPanelSinks.DOM,
								).map( ([
									header, 
									plan_panel, 
									detail_panel
								]) =>
									div('.vrp_container',
										[
											header,
											plan_panel,
											detail_panel, 
										]
									)
								)
							-->>
							ex
								const vdom$ = xs.combine(
									headerSinks.DOM,
									planPanelSinks.DOM,
									// detailPanelSinks.DOM,
								).map( ([
									header, 
									plan_panel, 
									// detail_panel
								]) =>
									div('.vrp_container',
										[
											header,
											plan_panel,
											// detail_panel, 
										]
									)
								)
          debugger statement
            function createNewItem(props) {
              const id = mutableLastId++;
              const sinks = itemFn(props, id);
              debugger
              return {id, DOM: sinks.DOM.remember(), Remove: sinks.Remove};
            }
          write data shape
            var toHTML = require('snabbdom-to-html')
            global.toHTML = toHTML
            ...
            .debug(x => {
              console.log("todo$")
              console.log(x)
            })
            .debug( x => {
              global.x = x
              console.log(toHTML(x))
            } )
            .debug( x => console.log(x))
            .debug(console.log)
          bir node modülünün kodunu değiştirmek
            parcel-bundler
              ref
                /Users/mertnuhoglu/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src06e04/components/app/index.js
              import isolate from '@cycle/isolate';
              ->
              import isolate from './isolate';
              put isolate.ts from node_modules
              remove package.json dependency
              npm parcel
        npm
          npm install
            pnpm i --save-dev parcel-bundler 
            npm i 
            xstream @cycle/run @cycle/dom @cycle/http 
            cycle-onionify cycle-storageify @cycle/storage @cycle/isolate
            typestyle bootstrap jquery jquery-ui-dist popper.js
            handsontable
            datatables.net datatables.net-dt
          package.json
            "start": "parcel src/index.html",
            "build": "parcel build src/index.html --public-url ./",
        import es6
          import xs from 'xstream';
          import {run} from '@cycle/run'
          import {div, input, p, makeDOMDriver} from '@cycle/dom';
            paqmind: html to hyperscript converter
            vim :ConvertHyperscriptToCyclejs
          import {makeHTTPDriver} from '@cycle/http';
          import delay from 'xstream/extra/delay'
          rxjs
            import {range} from 'rxjs/observable/range'
            import {map, filter, scan} from 'rxjs/operators'
            import {_throw} from 'rxjs/observable/throw'
            require rxjs
              const { Observable, Subject, ReplaySubject, from, of, range } = require('rxjs');
              const { map, filter, switchMap } = require('rxjs/operators');
          require 
            const {div} = require('@cycle/dom');
            const xs = require('xstream').default
            const delay = require('xstream/extra/delay').default
        run
          run(main, drivers)
          run(main, {
            DOM: makeDOMDriver('#app'),
            });
          opt
            npm install @cycle/rxjs-run rxjs
            import {run} from '@cycle/rxjs-run'
        xs
          DOMSource
            const clickEvent$ = sources.DOM
              .select('.get-first').events('click')
              .startWith(null);
          http request
            let request$ = xs.of({
              url: 'http://localhost:8080/hello', // GET method by default
              category: 'hello',
              });
            ex: oauth
              const request$ = clickEvent$.map(() => {
                return {
                  url: 'http://localhost:8080/rest/plan?select=plan_id,usr,depot_id',
                  method: 'GET',
                  headers: {
                    "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlIjoid2VidXNlciJ9.uSsS2cukBlM6QXe4Y0H90fsdkJSGcle9b7p_kMV1Ymk"
          http response
            let response$ = sources.HTTP
              .select('hello')
              .flatten();
            const response$$ = sources.HTTP.select();
              const response$ = response$$.flatten();
              const json$ = response$.map(response => response.body);
          vdom
            let vdom$ = response$
              .map(res => res.text) // We expect this to be "Hello World"
              .startWith('Loading...')
              .map(text =>
                div('.container', [
                  h1(text)
                ])
              );
            ex: table with data
              DOM: json$.
                map(json =>
                  table([
                    thead(
                      tr([
                        th('Plan Id'),
                        th('Kullanıcı'),
                        th('Depot Id')
                      ])
                    ),
                    tbody(
                      json.map(e => 
                        tr([
                          td(e.plan_id),
                          td(e.usr),
                          td(e.depot_id)
            DOM: sources.DOM.select('input').events('change')
              .map(ev => ev.target.checked)
              .startWith(false)
              .map(toggled =>
                div([
          drivers
            const drivers = {
              DOM: makeDOMDriver('#app'),
              HTTP: makeHTTPDriver(),
          return
            return {
              DOM: vdom$,
              HTTP: request$
              };
          operators
            const count$ = action$.fold((x, y) => x + y, 0);
        design
          import
						import intent, { Actions } from './intent';
            import model from './model';
            import view from './view';
          jquery bootstrap handsontable
            import jquery from "jquery";
            export default (window.$ = window.jQuery = jquery);
            import 'bootstrap';
            import 'bootstrap/dist/css/bootstrap.min.css';
            import 'handsontable/dist/handsontable.full.min.css'
            const Handsontable = require('handsontable/dist/handsontable.full.min.js')
          handsontable
            ref
              <url:file:///~/projects/study/problem/datatables_in_cyclejs/ex/ex10/index_06.js>
            use
              const sinks = {
                Hot: xs.periodic(2000)
                  .map(i => {...
              }
              const drivers = {
                Hot: HotDriver,
            driver for handsontable
              function HotDriver(data$) {
                data$.addListener({
                  next: data => {
                    hot.loadData(data)
                  }}
                )
                var producer = {
                  start: function(observer) {
                    hot.addHook('afterChange', function () {
                      observer.next(hot.getSourceData())
                    })
                  },
                  stop: function () {
                    console.log("stopped")
                  }
                }
                const HotSource = xs.create(producer)
                return HotSource
              }
          datatables
            ref
              <url:file:///~/projects/study/problem/datatables_in_cyclejs/datatables_in_cyclejs.Rmd>
              <url:file:///~/projects/study/problem/datatables_in_cyclejs/ex/ex05/src/index.js>
            import
              const dt = require( 'datatables.net' )();
              import 'datatables.net-dt/css/jquery.dataTables.css'
            read: datatables -> cyclejs
            write: cyclejs -> datatables
              vdom$.subscribe({
                next: (value) => {
                  jQuery('#table_id').DataTable( {        
                    data: data,
                    columns: [
                      { data: 'name' },
          intent model view
            ex01
              const json$ = model(sources.HTTP);
              return {
                DOM: view(json$),
                HTTP: intent(sources.DOM),
          components
            vdom
              const vdom$ = xs.combine(
                Header(),
                PlanPanel(state$),
              ).map( ([header, plan_panel]) =>
                div(
                  [
                    header,
                    plan_panel,
          bootstrap
            ul("#planlama.nav.nav-tabs", {
              "attrs": {
                "role": "tablist",
      v6 rxjs based cyclejs id=cjs_003
        v6 rxjs based cyclejs <url:#r=cjs_003>
        importing
          ref
            <url:file:///~/projects/study/js/study_notes_cyclejs.Rmd>
          <script> importing in html
            <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/rxjs/5.5.6/Rx.min.js"></script>
            <script src="https://rawgit.com/cyclejs/cycle-core/v6.0.0/dist/cycle.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/rxjs/4.0.6/rx.all.js"></script>
        run
        driver
          using
            <url:file:///~/projects/study/js/study_notes_cyclejs.Rmd>
            function main() {
              return {
                DOM: Rx.Observable.timer(0, 1000)
                  .map(i => `Seconds ${i}`),
                Log: Rx.Observable.timer(0, 2000)
                  .map(i => 2*i),
        subscribe
          Rx.Observable.fromEvent(button, 'click')
            .subscribe(() => console.log('Clicked!'));
          var observable = Rx.Observable.create(function (observer) {
            ...}
            observable.subscribe({
              next: x => console.log(`${x}`),
              error: err => console.error(`error ${err}`),
              complete: () => console.log('done')
            })
          var foo = Rx.Observable.create(function (observer) {
            console.log('Hello');
            observer.next(42);
            });
            foo.subscribe(function (x) {
              console.log(x);
            });
          var subject = new Rx.Subject();
            subject.subscribe({
              next: (v) => console.log('observerA: ' + v)
          var subject = new Rx.Subject();
            subject.subscribe({
              next: (v) => console.log('observerB: ' + v)
            });
            var observable = Rx.Observable.from([1, 2]);
            observable.subscribe(subject); 
        rx
          ref
            <url:file:///~/projects/study/js/study_notes_cyclejs.Rmd>
          factory
            Rx.Observable.create
              var observable = Rx.Observable.create(function (observer) {
                observer.next(1)
                observer.next(2)
                setTimeout(() => {
                  observer.next(3)
                  observer.complete()
                }, 1000)
                })
              var observable = Rx.Observable.create(function subscribe(observer) {
                try {
                  observer.next(1);
                  observer.next(2);
            var observable = Rx.Observable.from([10, 20, 30]);
            Rx.Observable.timer(0, 1000)
              .map(i => `Seconds ${i}`)
              .subscribe(text => {
                const container = document.querySelector('#app');
                container.textContent = text;
              })
            const DOMSource = Rx.Observable.fromEvent(document, 'click');
            var clock = Rx.Observable.interval(1000).take(3).map(x => x+1);
            const source = Rx.Observable.of(1, 2, 3, 4, 5);
            var req$ = Rx.Observable.just('https://api.github.com/users') // deprecated
          operators
            .flatMapLatest(() =>
              Rx.Observable.timer(0, 1000)
                .map(i => `Seconds ${i}`)
            return Rx.Observable.fromEvent(document, eventType)
              .filter(ev => ev.target.tagName === tagName.toUpperCase());
            Rx.Observable.fromEvent(button, 'click')
              .scan(count => count + 1, 0)
            Rx.Observable.fromEvent(button, 'click')
              .throttleTime(1000)
              .scan(count => count + 1, 0)
              .subscribe(count => console.log(`Clicked ${count} times`));
            var foo = Rx.Observable.interval(100).take(3)
              var more = Rx.Observable.of(3,4,5)
              var bar = foo.concat(more)
            foo.combineLatest(bar, (x,y) => x + y)
            foo.withLatestFrom(bar, (x,y) => y === 1 ? x.toUpperCase() : x.toLowerCase())
            zip((x,y) => x + y)
            bufferCount(2)
          combinations
            var observable1 = Rx.Observable.interval(1000);
              var observable2 = Rx.Observable.interval(400);
              var merged = Rx.Observable.merge(observable1, observable2);
            const number$ = Rx.Observable.of(10)
              .merge(decrementAction$)
              .merge(incrementAction$)
              .scan( (prev, curr) => prev + curr)
            const state$ = Rx.Observable.combineLatest(
              changeWeight$.startWith(70),
              changeHeight$.startWith(170),
              (weight, height) => {
                const heightMeters = height * 0.01;
                const bmi = Math.round(weight / heightMeters * heightMeters));
                return {bmi, weight, height};
          custom  id=cjs_002
            custom  <url:#r=cjs_002>
            ex01: multiplyByTen
              function multiplyByTen() {
                var source = this;
                var result = Rx.Observable.create(function subscribe(observer) {
                  source.subscribe(
                    function (x) { observer.next(x*10)},
                    function (err) { observer.error(err) },
                    function () { observer.complete() }
                  )
                })
                return result
              }
              Rx.Observable.prototype.multiplyByTen = multiplyByTen
              var bar = foo.multiplyByTen()
            ex02: map
              function map(project) {
                var source = this;
                var result = Rx.Observable.create(function subscribe(observer) {
                  source.subscribe(
                    function (x) { observer.next(project(x))},
                    function (err) { observer.error(err) },
                    function () { observer.complete() }
                  )
                })
                return result
              }
              Rx.Observable.prototype.map = map
              var bar = foo.map(x => x * 10)
            ex03: takeEveryNth
              const takeEveryNth = (n: number) => filter((value, index) => index % n === 0)
              interval(1000).pipe(
                takeEveryNth(2),
          let pipe
            source$.let(op) -> source$.pipe(op)
            interval(1000).pipe(
              takeEveryNth(2),
              map(x => x + x),
              take(3),
              toArray()
              )
          v5
            | old name | new name   |
            | op       | tap        |
            | catch    | catchError |
            | switch   | switchAll  |
            | finally  | finalize   |
            | let      | pipe       |
        js
          setTimeout(function () {
            clock.subscribe(i => console.log('   b: ' + i));
            }, 1500);
        dom
          var refreshButton = document.querySelector('.refresh')
          setup
            npm install @cycle/dom
      xstream based cyclejs
      router
        ref
          https://github.com/SteveALee/cycle-spa-template
      cyclejs design  id=g10207
        cyclejs design  <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10207>
        makeDOMDriver
      onion architecture id=g10196
        onion architecture <url:file:///~/projects/study/study_js.md#r=g10196>
        ref
          https://github.com/olpeh/meeting-price-calculator/
          <url:file:///~/codes/js/meeting-price-calculator/src/index.ts>
        index.js intent.js model.js view.js styles.js 
          ex: ticker
            export function Ticker(sources: Sources): Sinks
            export function model(timeSource: TimeSource): xs<Reducer> {
            export function view(state$: xs<State>): xs<VNode> {
            export const styles = stylesheet({
          ex: sliderInput
            export function SliderInput(sources: Sources): Sinks {
            export function intent(domSource: DOMSource): SliderInputActions {
            export function model(actions: SliderInputActions): xs<Reducer> {
            export function view(state$: xs<State>): xs<VNode> {
            export const styles = stylesheet({
          ex: controls  
            export function Controls(sources): Sinks
            export default function intent(domSource): Actions {
            export default function model(actions: Actions): xs<Reducer> {
            export default function view( state$: xs<State>, personAmountSliderVDom$: xs<VNode>, avgPriceSliderVDom$: xs<VNode>): xs<VNode> {
        index.js
          ex: controls/index.js
            export interface State {
            export const lens = {
						export type Reducer = ..
            export default function Controls(sources: Sources): Sinks {
              # intent model view
        export interface State
          export interface State {
            description: string;
            unit: string;
            min: number;
        lenses
          ex: controls/index.js
            export const lens = {
              get: (state: AppState): State => ({
                currency: state.currency,
                personAmount: state.personAmount,
                avgPrice: state.avgPrice
              }),
              set: (state: AppState, childState: State) => ({
                ...state,
                currency: childState.currency,
                personAmount: childState.personAmount,
                avgPrice: childState.avgPrice
              })
            };
          ex: sliderInput/index.js
            export const personAmountLens = {
              get: (state: AppState): State => ({
                description: 'Person amount',
                unit: state.personAmount > 1 ? 'persons' : 'person',
                min: 1,
                max: 100,
                step: 1,
                value: state.personAmount
              }),
              set: (state: AppState, childState: State) => ({
                ...state,
                personAmount: childState.value
              })
            };
            export const avgPriceLens = {
              get: (state: AppState): State => ({
                description: 'Average price',
        main: intent model view
          ex: app/index.js
            sources -> subsinks 
              const tickerSinks = isolate(Ticker, { onion: tickerLens })(sources);
            [model] + subsinks.onion -> reducer$ 
              const parentReducer$ = model();
              const reducer$ = xs.merge( parentReducer$, tickerSinks.onion,..
            sources.onion.state$ -> state$ + subsinks.DOM -> [view] -> vdom$
							const headerVDom$: xs<VNode> = Header();
							const vdom$ = xs.combine( headerVDom$, tickerSinks.DOM, ..
          ex: controls/index.ts function Controls:
            sources -> subsinks 
              const personAmountSlider: Sinks = isolate(SliderInput, { onion: personAmountLens })(sources);
            sources.DOM -> [intent] -> actions -> [model] + subsinks.onion -> reducer$ 
              const actions: Actions = intent(sources.DOM);
              const parentReducer$: xs<Reducer> = model(actions);
              const personAmountReducer$: xs<Reducer> = personAmountSlider.onion;
              const reducer$: xs<Reducer> = xs.merge( parentReducer$, personAmountReducer$, ..
            sources.onion.state$ -> state$ + subsinks.DOM -> [view] -> vdom$
              const state$: xs<State> = sources.onion.state$;
              const vdom$ = view(state$, personAmountSlider.DOM, avgPriceSlider.DOM);
          ex: sliderInput/index.ts function SliderInput
            sources.DOM -> [intent] -> actions -> [model] + subsinks.onion -> reducer$ 
              const actions: SliderInputActions = intent(sources.DOM);
              const reducer$: xs<Reducer> = model(actions);
            sources.onion.state$ -> state$ + subsinks.DOM -> [view] -> vdom$
              const state$: xs<State> = (sources.onion.state$ as any) as xs<State>;
              const vdom$: xs<VNode> = view(state$);
          ex: ticker/index.ts function Ticker
            sources.Time -> [model] + subsinks.onion -> reducer$ 
              const reducer$: xs<Reducer> = model(sources.Time);
            sources.onion.state$ -> state$ + subsinks.DOM -> [view] -> vdom$
              const state$: xs<State> = (sources.onion.state$ as any) as xs<State>;
              const vdom$ = view(state$);
          ex: header/index.ts function Header
            sources.Time -> [model] + subsinks.onion -> reducer$ 
              const reducer$: xs<Reducer> = model(sources.Time);
            const state$: xs<State> = (sources.onion.state$ as any) as xs<State>;
              const state$: xs<State> = (sources.onion.state$ as any) as xs<State>;
              const vdom$ = view(state$);
        data flow
          complete cycle
            {DOMSource} -> [App.intent] -> {action$} -> [App.model] -> {reducer$} -> [onion] -> {state$} -> [App.view] -> {vdom$} -> [DomDriver] -> {DOMSource}
          DOM -> state
            sources.DOM -> action$ -> reducer_i$ -> reducer$ -> sinks.onion
              act1$ = sources.DOM.select(..)
              red1$ = act1$.map(num => state => {count: state.count + num})
              red$ = xs.merge(red1$, red2$, ...)
              return {onion: red$, DOM: vdom$}
          state -> DOM
            sources.onion.state -> state$ -> vdom$ -> sinks.DOM
              state$ = onion.sources.state
              vdom$ = state$.map(..)
              return {onion: red$, DOM: vdom$}
        use subcomponents:
          ex: app/index.js
            const tickerSinks = isolate(Ticker, { onion: tickerLens })(sources);
            const controlsSinks = isolate(Controls, { onion: controlsLens })(sources);
          ex: controls/index.js
            const personAmountSlider: Sinks = isolate(SliderInput, { onion: personAmountLens })(sources);
            const avgPriceSlider: Sinks = isolate(SliderInput, { onion: avgPriceLens })(sources);
        intent()
          ex: controls/intent.js
            export default function intent(domSource): Actions {
              const currencyChangeAction$: xs<string> = domSource
                .select(`.${styles.currencySelect}`)
                .events('change')
                .map(inputEv => (inputEv.target as HTMLInputElement).value);
          ex: sliderInput/intent.js
            export default function intent(domSource): SliderInputActions {
              const ValueChangeAction$ = domSource
                .select('.SliderInput-input')
                .events('input')
                .map(inputEv => parseInt((inputEv.target as HTMLInputElement).value));
        model()
          ex: app/model.js
            export default function model(): xs<Reducer> {
              const initReducer$: xs<Reducer> = xs.of(
                (prev?: State): State =>
                  prev !== undefined
                    ? prev
                    : {
                        startTime: moment(),
                        duration: 0,
          ex: ticker/model.js
            export default function model(timeSource: TimeSource): xs<Reducer> {
              const initReducer$: xs<Reducer> = xs.of(
                (prev?: State): State =>
                  prev !== undefined
                    ? prev
                    : {
                        startTime: moment(),
                        duration: 0,
              const tickReducer$: xs<Reducer> = timeSource
                .periodic(1000)
                .map(i => (prevState: State): State => ({
                  ...prevState,
                  duration: moment().diff(prevState.startTime, 'seconds')
              return xs.merge(initReducer$, tickReducer$);
          ex: sliderInput/model.js
            export default function model(actions: SliderInputActions): xs<Reducer> {
              const defaultReducer$: xs<Reducer> = xs.of(
                (prev?: State): State =>
                  prev !== undefined
                    ? prev
                    : {
                        description: 'description',
                        unit: 'unit',
              const valueChangeReducer$: xs<Reducer> = actions.ValueChangeAction$.map(
                value => (prevState: State): State => ({
                  ...prevState,
                  value
              return xs.merge(defaultReducer$, valueChangeReducer$);
        setter lens: [model] -> reducer$ -> [onion]
          ex: sliderInput/
            <url:file:///~/codes/js/meeting-price-calculator/src/components/sliderInput/index.ts>
            sliderInput/model.js
              const valueChangeReducer$ = actions.ValueChangeAction$.map(
                value => (prevState) => ({
                  ...prevState,
                  value
            sliderInput/index.js
              const personAmountLens = {
                get: (state) => ({ ...
                set: (state: AppState, childState: State) => ({
                  ...state,
                  personAmount: childState.value
              export const avgPriceLens = {
                get: (state) => ({ ...
                set: (state: AppState, childState: State) => ({
                  ...state,
                  avgPrice: childState.value
            ../controls/index.ts
              const personAmountSlider: Sinks = isolate(SliderInput, { onion: personAmountLens })(sources);
              const avgPriceSlider: Sinks = isolate(SliderInput, { onion: avgPriceLens })(sources);
          ex: ticker/
            model.js
              const tickReducer$ = timeSource
                .periodic(1000)
                .map(i => (prevState) => ({
                  ...prevState,
                  duration: moment().diff(prevState.startTime, 'seconds')
            index.js
              export const lens = {
                get: (state) => ...
                set: (state: AppState, childState: State) => ({
                  ...state,
                  duration: childState.duration
        initReducer
          const initReducer$: xs<Reducer> = xs.of(
            (prev?: State): State =>
              prev !== undefined
                ? prev
                : {
                    startTime: moment(),
                    duration: 0,
        view()
          ex: sliderInput/view.js
            export default function view(state$: xs<State>): xs<VNode> {
              return state$.map(({ description, unit, min, max, step, value }) =>
                div(`.${styles.sliderInput}`, [
          ex: ticker/view.js
            export default function view(state$: xs<State>): xs<VNode> {
              return state$.map(({ currency, totalPrice }) =>
                div(`.${styles.actualPrice}`, [
        styles
          ex: app/styles.js
            export const styles = stylesheet({
              flexContainer: {
                height: '100%',
          ex: ticker/styles.js
            export const styles = stylesheet({
              actualPrice: {
                justifyContent: 'center'
          ex: sliderInput/styles.js
            export const styles = stylesheet({
              sliderInput: {
                display: 'flex',
                flexDirection: 'column',
        App State and App Sources & Sinks
          import { Sources, Sinks } from '../../interfaces';
          import { State as AppState } from '../app';
        interfaces.js
          export type Sources = {
            DOM: DOMSource;
            onion: StateSource<State>;
          export type Sinks = {
            DOM: xs<VNode>;
        header.js footer.js
          export default function Header(): xs<VNode> {
            return xs.of(
              header(`.${headerStyles}`, [h1('Header-title', 'Meeting price calculator')])
        App
          index.js
            vdom$
              const headerVDom$: xs<VNode> = Header();
              const vdom$ = xs
                .combine(
                  headerVDom$,
                  tickerSinks.DOM,
              .map(([header, ticker, controls, duration, footer]) =>
                div(`.${styles.flexContainer}`, [
                  header,
        setup onion
          app.js
            <url:file:///~/codes/js/todomvc-cycle-onion/src/app.js>
            import onionify from 'cycle-onionify';
            import TaskList from './components/TaskList/index';
            const main = onionify(storageify(TaskList, {key: 'todos-cycle'}));
          TaskList/index.js
            <url:file:///~/codes/js/todomvc-cycle-onion/src/components/TaskList/index.js>
            export default function TaskList(sources) {
              const state$ = sources.onion.state$;
              const listSinks = isolate(List, {onion: listLens})(sources);
              const listReducer$ = listSinks.onion;
              const reducer$ = xs.merge(parentReducer$, listReducer$);
              return {
                DOM: vdom$,
                onion: reducer$,
      running cyclejs examples
        git clone https://github.com/cyclejs/cycle-examples
        cd cycle-examples
        cd hello-world
        npm start
        open index.html
      errors
        error: ParseError: 'import' and 'export' may appear only with 'sourceType: module'
          browserify ile build edince oldu, parcel ile olmadı
          çözüm (geçici)
            jsutils_mn dosyasını çıkart
            npm link'le ilgili olabilir
        handsontable component is first shown then becomes invisible
          cause:
            <div> element should have an ending match:
            error:
              <div id="app" />
              <table id="example" class="display">
              </table>
            solution:
              <div id="app"></div>
              <table id="example" class="display">
              </table>
				TypeError: sources.onion.debug is not a function
					fix:
						sources.onion.state$.debug() 
      idioms - cyclejs id=g10200
        idioms - cyclejs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10200>
				reducer neden reducer olarak adlandırılmış mapper yerine?
					<url:/Users/mertnuhoglu/Dropbox/mynotes/content/code/cjs/cjs.md#tn=reducer neden reducer olarak adlandırılmış mapper yerine?>
					imzasına bakınca, sanki mapper gibi görünüyor:
						type Reducer = (prev?: State) => State
					bir örneğe bakalım:
						const purchaseOrderReducer$: xs<Reducer<State>> = sources.HTTP.select('purchase_order')
							.flatten()
							.map(res => function purchaseOrderReducer(prevState: State) {
								return {
									...prevState,
									purchase_orders: res.body
								}
							})
					burada aslında iki tane girdi argümanı var reducer fonksiyonunun: res ve prevState
						prevState ~ accumulator
						res ~ x of xs
					reducer'ın kanonik formunu hatırla:
						reduce :: xs -> acc -> x -> acc
						reduce( (acc,x) => [x].concat(acc), [])
				order for writing and reading cyclejs mvi functions
					data flow order of mvi functions
						intent
						model
						view
					ex: <url:file:///~/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_05/components/plan_panel/index.ts>
						PlanPanel(sources: Sources & SoHTTP): Sinks & SiHTTP {
							return {
								HTTP: intent(sources.DOM),
								onion: model(sources.HTTP),
								view: view(sources.onion.state),
							}
						}
					when there are subcomponents, they are sorted before others
					ex: ~/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_05/components/app/index.ts
						main(sources) {
							// 1. subcomponents
							const planPanel = isolate(PlanPanel, {onion: planPanelLens})
							const planPanelSinks = planPanel(sources)
							// 2. intent
							const {requests$: parentRequests$} = intent(sources)
							const requests$ = xs.merge(
								parentRequests$,
								planPanelSinks.HTTP,
							)
							// 3. model
							const parentReducer$ = model(sources)
							const reducer$ = xs.merge(
								parentReducer$, 
								planPanelSinks.onion
							)
							// 4. view
							const vdom$ = xs.combine(
								planPanelSinks.DOM,
								detailPanelSinks.DOM,
							).map( ([ ... ]))
							// properties of the sinks follow the same order
							const sinks: Sinks & SiHTTP & SiHot = {
								HTTP: requests$,
								onion: reducer$,
								DOM: vdom$,
								Hot: hot$,
							}
						}
					ex: ~/projects/study/js/vrp/ex/cyclejs_vrp/ex06/index.js
						function main(sources) {
							const request$ = intent(sources.DOM)
							const state$ = model(sources.HTTP)
							const vdom$ = view(state$)
							return {
								HTTP: request$,
								DOM: vdom$,
							};
						}
				order of import expressions
					1. Third party libraries
					2. common modules
						upper directories first
					ex: <url:file:///~/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_05/components/plan_panel/model.ts>
						import Stream from 'xstream';
						import xs from 'xstream';
						import { Reducer, Sources, ActionPayload, SoHTTP, DictStream } from '../../interfaces';
						import { addListenerStream } from '../../interfaces';
						import { State } from '.';
					ex: <url:file:///~/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_05/components/plan_panel/index.ts>
						import { style } from 'typestyle/lib';
						import { Plan, PurchaseOrder, Sinks, Sources, SoHTTP, SiHTTP } from '../../interfaces';
						import { addListenerStream } from '../../interfaces';
						import { State as AppState } from '../app';
						import {intent} from './intent'
						import model from './model'
						import {view} from './view'
					ex: <url:file:///~/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_05/components/app/index.ts>
						import Header from '../header';
						import DetailPanel from '../detail_panel';
						import { PlanPanel, lens as planPanelLens } from '../plan_panel';
						import intent from './intent';
						import model from './model';
        sources.DOM
          const firstName$ = sources.DOM
            .select('.first')
            .events('input')
            .map(ev => (ev.target as HTMLInputElement).value)
            .startWith('');
          const rawFullName$ = xs.combine(firstName$, lastName$)
            .remember();
          events:
            event types
              blur
              click
              focus
              input
              keydown
              mousedown
              mouseenter
              mouseup
              dblclick
              focusout
            kullanım örnekleri
              const click$ = sources.DOM.select('.link').events('click');
              click$: domSource.events('click').mapTo(1),
              return domSource.select('.slider').events('input').map(ev => ev.target.value);
              const input$ = domSource.select('.autocompleteable').events('input')
              const keydown$ = domSource.select('.autocompleteable').events('keydown')
              const itemHover$ = domSource.select('.autocomplete-item').events('mouseenter')
              const itemMouseDown$ = domSource.select('.autocomplete-item').events('mousedown')
              const itemMouseUp$ = domSource.select('.autocomplete-item').events('mouseup')
              const inputFocus$ = domSource.select('.autocompleteable').events('focus')
              const inputBlur$ = domSource.select('.autocompleteable').events('blur')
          submit yerine button mousedown
            <url:file:///~/codes/js/front-end-reactive-architectures/9781484231791/examples/weather-onionify/src/CityForm.js>
            const input$ = DOM.select("#location-input").events("focusout")
                              .map(evt => evt.target.value);
            const btn$ = DOM.select("#location-btn").events("mousedown");  
            return xs.combine(input$, btn$)
                     .map(([city, mouseEvt]) => getRequest(city))
                     .startWith(getRequest(INIT_CITY))
          filter by keycode
            eaterCancelEdit$: dom.get('.edit-eater', 'keypress') // deprecated
                .filter(ev => ev.keyCode === 27)
                .map(ev => ev.target.getAttribute('data-index'))
          filter if match regex
            eaterAdd$: dom.get('.new-eater', 'keypress') // deprecated
                .filter(ev => ev.keyCode === 13)
                .map(ev => ev.target.value.match(/^([^:]*)[:\s]+(\d+(\.\d*)?)$/))
                .filter(match => match)
                .map(match => ({name: match[1], servings: parseInt(match[2], 10)}))
        HTTP
          request
            <url:file:///~/codes/js/front-end-reactive-architectures/9781484231791/examples/weather-onionify/src/CityForm.js>
            const getRequest = city => ({
                    type: CITY_SEARCH,
                    city: city,
                    url: `http://api.apixu.com/v1/forecast.json?key=04ca1fa2705645e4830214415172307&q=${city}&days=7`,
                    category: CATEGORY
            })
            const intent = DOM => {
              return xs.combine(input$, btn$)
                       .map(([city, mouseEvt]) => getRequest(city))
                       .startWith(getRequest(INIT_CITY))
            const actions$ = intent(sources.DOM);
            return { HTTP: actions$ }
            const reducer$ = model(actions$, sources.HTTP);
            const model = (actions$, HTTP) => {
                const reducer$ = HTTP.select(CATEGORY)
                           .flatten()
                           .map(parseResponse)
                           .map(simplifyData)
                return reducer$
            const parseResponse = response => JSON.parse(response.text);
            const simplifyData = data => function changeState(prevState) {
                                            return {
                                                city: data.location.name,
                                                current: data.current,
                                                forecasts: data.forecast.forecastday
                                            }
                                        }
            return { onion: reducer$, }
        action types
          intent: {insertTodo$:..., }
            <url:/Users/mertnuhoglu/codes/js/todomvc-cycle-onion/src/components/TaskList/intent.js#tn=export default function intent(domSource, historySource) {>
            ex: todomvc-onion
              intent()
                export default function intent(domSource, historySource) {
                  return {
                    changeRoute$: historySource...
                    updateInputValue$: domSource...
              model()
                export default function model(actions) {
                  const changeRouteReducer$ = actions.changeRoute$...
                  const updateInputValueReducer$ = actions.updateInputValue$...
          intent: mapTo({type: "addChild"})
            ex: nested-folders
              intent
                <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js#tn=function intent(domSource) {>
                function intent(domSource) {
                  const addChild$ = domSource.select('.add').events('click')
                    .mapTo({type: 'addChild'})
                  const removeSelf$ = domSource.select('.remove').events('click')
                    .mapTo({type: 'removeSelf'})
                  return xs.merge(addChild$, removeSelf$)
              using in model
                const addChildReducer$ = action$
                  .filter(({type}) => type === 'addChild')
            ex: many/List
              <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/many/src/List.js>
              intent
                <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/many/src/List.js#tn=function intent(domSource, itemRemove$) {>
                domSource.select('.add-one-btn').events('click')
                  .mapTo({type: 'ADD_ITEM', payload: 1}),
                domSource.select('.add-many-btn').events('click')
                  .mapTo({type: 'ADD_ITEM', payload: 1000}),
                itemRemove$.map(id => ({type: 'REMOVE_ITEM', payload: id}))
              using in model
                const addItemReducer$ = action$
                  .filter(a => a.type === 'ADD_ITEM')
                const removeItemReducer$ = action$
                  .filter(a => a.type === 'REMOVE_ITEM')
                return xs.merge(addItemReducer$, removeItemReducer$)
                  .fold((listItems, reducer) => reducer(listItems), initialState);
          ne zaman merge, ne zaman action$ objesi dönülüyor?
            {type: 'ADD', payload: 10} şeklinde veriye dönüştürürsen, merge
            eğer doğrudan action dönülecekse, obje olarak dönülüyor
              actions.xEvent$
        Collection subcomponents:
          ex:
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js#tn=export default function Folder(sources) {>
            import {makeCollection} from 'cycle-onionify'
            const Children = makeCollection({
              item: Folder,
              itemKey: state => state.id,
              itemScope: key => key,
              collectSinks: instances => ({
                onion: instances.pickMerge('onion'),
                DOM: instances.pickCombine('DOM')
              })
            })
            const childrenSinks = isolate(Children, 'children')(sources)
        typeof prevState === 'undefined'
          ex:
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js#tn=    if (typeof prevState === 'undefined') {>
            if (typeof prevState === 'undefined') {
              return {id: 0, removable: false, children: []}
        model: reducer ...prevState
          ex:
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js#tn=  const addChildReducer$ = action$>
            .mapTo(function addFolderReducer(state) {
              ...
              return {
                ...state,
                children: newChildren,
              }
        model: reducer action$.mapTo
          ex:
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js#tn=  const addChildReducer$ = action$>
          const addChildReducer$ = action$
            .mapTo(function addFolderReducer(state) {
              ...
        merge vs combine
					common feature:
						multiple streams -> single stream
					difference:
						multiple events -> multiple events (merge)
						multiple events -> single event (combine)
          ex:
            <url:file:///~/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js>
            function intent(domSource) {
              ...
              return xs.merge(addChild$, removeSelf$)
            function view(state$, childrenVDOM$) {
              return xs.combine(state$, childrenVDOM$)
                .map(([state, childrenVDOM]) => {
            function model(action$) {
              ...
              return xs.merge(initReducer$, addChildReducer$, removeSelfReducer$)
            const reducer$ = xs.merge(parentReducer$, childrenSinks.onion)
        state.removable && button(...)
          ex:
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js#tn=function view(state$, childrenVDOM$) {>
            state.removable && button('.remove', ['Remove me']),
            state.children && div({}, childrenVDOM),
        imitate: action for removing items
          ex:
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/many/src/List.js#tn=function List(sources) {>
            const proxyItemRemove$ = xs.create();
            const action$ = intent(sources.DOM, proxyItemRemove$);
            const itemWrapper = makeItemWrapper(sources.DOM);
            const items$ = model(action$, itemWrapper);
            const itemRemove$ = items$
              .map(items => xs.merge(...items.map(item => item.Remove)))
              .flatten()
            proxyItemRemove$.imitate(itemRemove$);
            const vtree$ = view(items$);
            # neden dataset yerine imitate kullanmış?
        allCompleted
          <url:/Users/mertnuhoglu/codes/js/todomvc-cycle-onion/src/components/TaskList/view.js#tn=  const allCompleted = state.list.reduce((x, y) => x && y.completed, true);>
          const allCompleted = state.list.reduce((x, y) => x && y.completed, true);
        loop over keys
          <url:file:///~/projects/study/js/ex/study_cyclejs_examples/ex01/ref02/isolate/index.ts>
          for (const channel in innerSinks) {
            const source = sources[channel] as Partial<IsolateableSource>;
        pathname: links navbar
          <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/routing-view/src/main.js#tn=function navigation(pathname) {>}
          function view(history$) {
            return history$.map(history => {
              const {pathname} = history;
              let page = h1('404 not found');
              if (pathname === '/home') {
                page = homePageView();
              } else if (pathname === '/about') {
                ...
              return div([
                navigation(pathname),
          function navigation(pathname) {
            return nav([
              span({
                dataset: {page: 'home'},
                class: {'active': pathname === '/home'}
              }, 'Home'),
              span({
                dataset: {page: 'about'},
                class: {'active': pathname === '/about'}
              }, 'About'),
              span({
                dataset: {page: 'contacts'},
                class: {'active': pathname === '/contacts'}
              }, 'Contacts')
            ])
          }
        drivers
          DOMDriver rxjs
            <url:/Users/mertnuhoglu/projects/study/js/study_notes_cyclejs.Rmd#tn=function DOMDriver(text$) {>
            function DOMDriver(text$) {
              text$.subscribe(text => {
                const container = document.querySelector('#app');
                container.textContent = text;
              });
              const DOMSource = Rx.Observable.fromEvent(document, 'click');
              return DOMSource;
            }
          preventDefaultSinkDriver from autocomplete-search
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/autocomplete-search/src/main.js#tn=function preventDefaultSinkDriver(prevented$) {>
            function preventDefaultSinkDriver(prevented$) {
              prevented$.addListener({
                next: ev => {
                  ev.preventDefault()
                  if (ev.type === 'blur') {
                    ev.target.focus()
                  }
                },
                error: () => {},
                complete: () => {},
              })
              return xs.empty()
            }
          HotDriver
            <url:/Users/mertnuhoglu//itr/vrp_doc/study/cyclejs_vrp.Rmd#tn=function HotDriver(data$) {>
            function HotDriver(data$) {
              data$.addListener({
                next: data => {
                  hot.loadData(data)
                }}
              )
              var producer = {
                start: function(observer) {
                  hot.addHook('afterChange', function () {
                    console.log("changed")
                    observer.next(hot.getSourceData())
                  })
                },
                stop: function () {
                  console.log("stopped")
                }
              }
              const HotSource = xs.create(producer)
              return HotSource
            }
        addListener id=cjs_004
					addListener <url:#r=cjs_004>
					single line
						stream$.addListener({ next: console.log })
          ex: add to one stream
            actions.newItem$.addListener({
              next: data => {
                console.log("newItem$")
                console.log(data)
              }})
          ex: add to an object/array of streams
            // {$ *} -> void
            function addListener(streams) {
              Object.keys(streams).map( (key) =>
                streams[key].addListener({
                  next: data => {
                    console.log(key)
                    console.log(data)
                  }})
              )
            }
            addListener(actions)
            addListener({removeItem$: actions.removeItem$})
          ex: jsutils_mn.addListener
            <url:file:///~/projects/jsutils_mn/src/index.js>
            import addListener, {addListenerStream} from 'jsutils_mn'
            addListener(actions)
            addListener({removeItem$: actions.removeItem$})
            addListenerStream(actions.newItem$, "newItem$")
      examples real - cyclejs id=g10201
        examples real - cyclejs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10201>
        autocomplete-search
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/autocomplete-search/src/app.js>
        many
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/many/src/List.js>
            <url:/Users/mertnuhoglu/projects/study/js/study_cyclejs_examples.Rmd#tn=### Data Flow of Remove Action>
          List
            neden proxyItemRemove$ bir arg olarak verilmiş, sources.DOM yerine?
              code
                const proxyItemRemove$ = xs.create();
                const action$ = intent(sources.DOM, proxyItemRemove$);
                const itemWrapper = makeItemWrapper(sources.DOM);
                const items$ = model(action$, itemWrapper);
                const itemRemove$ = items$
                  .map(items => xs.merge(...items.map(item => item.Remove)))
                  .flatten();
                proxyItemRemove$.imitate(itemRemove$);
              cause
                item'ları Remove etmek için item'ların id'lerine ihtiyaç var. 
                dolayısıyla ancak item'ları oluşturduktan sonra Remove$ actionları konfigüre edilebilir
            item.Remove içindeki bilgi nedir?
              ref
                <url:/Users/mertnuhoglu/projects/study/js/study_cyclejs_examples.Rmd#tn=## Data Flow of List-Item>
        isomorphic
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/isomorphic/app.js>
        nested-folders
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/nested-folders/src/Folder.js>
          const Children = makeCollection({
            makeCollection: from cycle-onionify/Collection.ts
              doc:
                a cyclejs component (a function from sources to sinks)
                represents a collection of many item components 
                arg: options = {item, collectSinks}
                arg (optional): itemKey, itemScope, channel
                returns: Collection
                  uses state source (sources.state)
                    emits arrays
                      each entry: state for that item
                    when state grows, collection makes a new item automatically
              arguments:
                item: Folder
                itemKey: state => state.id
                itemScope: key => key
                collectSinks: instances => ({
                  onion: instances.pickMerge('onion'),
                  DOM: instances.pickCombine('DOM'),
                })
              pickMerge:
                doc:
                  ~ xstream.merge
                  blends multiple streams together
                  but gets those streams from a collection of component instances
                    yani her bir instance içindeki "onion" streamini alıp merge ediyor
                  arg: selector: stream's name
                  returns: a Function:
                    an operator to be used with xstream.compose
                sub functions
                  xstream.compose:
                    doc:
                      to write in chained style
                      ex: 
                        out$ = f(in$)
                        ->
                        out$ = in$.compose(f)
                    neden in$.compose(delay(100)) yazıyoruz, fakat in$.delay(100) hata veriyor?
                      çünkü Stream class içinde tanımlanmamış delay methodu, fakat compose tanımlı. delay dışarıda tanımlandığından ancak bu şekilde kullanılabilir
                      <url:/Users/mertnuhoglu/codes/js/xstream/src/index.ts#tn=export class Stream<T> implements InternalListener<T> {>
        animated-letters
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/animated-letters/src/main.js>
          main
            intent(keydown)
            model(action$)
            view(state$, sources.Time)
          animatedState$
            const animatedState$ = animate(state$, Time)
            function animate(state$, Time) {
              return state$
                .compose(determineDeltaPoints)
                .compose(expandAsRenderingFrames(Time))
                .compose(calculateAnimationSteps)
            }
        routing-view
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/routing-view/src/main.js>
          main
            view():
              span({
                dataset: {page: 'home'},
            main():
              history$ = sources.DOM.select('nav').events('click')
                .map(e => e.target.dataset.page)
                .compose(dropRepeats())
          view
            const vdom$ = view(sources.history);
            function view(history$) {
              return history$.map(history => {
                const {pathname} = history;
                let page = h1('404 not found');
                if (pathname === '/home') {
                  page = homePageView();
                } else if (pathname === '/about') {
                  page = aboutPageView();
                } else if (pathname === '/contacts') {
                  page = contactsPageView();
                }
                return div([
                  navigation(pathname),
                  page,
                  br(),
                  h3('History object'),
                  p(JSON.stringify(history))
                ]);
              });
            }
            function navigation(pathname) {
              return nav([
                span({
                  dataset: {page: 'home'},
                  class: {'active': pathname === '/home'}
                }, 'Home'),
                ...
        bmi-nested
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/bmi-nested/src/main.js>
          BmiCalculator
            weightProps$ = {label, unit}$ 
            weightSlider = LabeledSlider({DOM, props$})
              LabeledSlider
                intent(sources.DOM)
                  domSource.select('.slider').events('input').map(ev => ev.target.value)
                model(change$, sources.props$)
                  value$ = props$.map((props) => props.initial).take(1)
        custom-driver
          ref
            <url:file:///~/codes/js/cyclejs/examples/advanced/custom-driver/src/main.js>
          main()
            intent(sources.DOM)
              {click$: domSource.events('click').mapTo(1)}
            model(actions$)
              merge(click$, timer$)
        todomvc 
          ref 
            <url:file:///~/codes/js/todomvc-cycle/src/app.js>
        storage
          ref
            /Users/mertnuhoglu/codes/js/storage/example
          main()
            storageRequest$ = sources.DOM.select('input')
              .events('input')
              .map(ev => ({
                key: 'inputText',
                value: ev.target.value
              }))
            const vdom$ = sources.storage.local
              .getItem('inputText')
            return {
              storage: storageRequest$
            }
        todomvc-onion id=g10198
          ref
            todomvc-onion <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10198>
            <url:file:///~/codes/js/todomvc-cycle-onion/src/app.js>
          onion inner logic
            const listSinks = isolate(List, {onion: listLens})(sources);
              debug:
                listLens = {get:..., set: ...}
              isolate/index.ts::function isolate<InnerSo, InnerSi>(
              isolate(List, {onion: listLens}) =   return function wrappedComponent(
              isolate(List, {onion: listLens})(sources);
                isolate/index.ts::function wrappedComponent(outerSources: OuterSo,..)
                  debug:
                    outerSources = sources
                    outerSources.onion: StateSource
                  const scopesPerChannel = normalizeScopes(outerSources, scopes, randomScope);
                    debug
                      outerSources.onion: StateSource
                      scopesPerChannel.onion: {get: function, set: function}
                      innerSources.onion: StateSource
                      innerSinks.onion: Stream
                        _prod: PickMerge
                      outerSinks.onion: Stream
                        _prod: MapOp
                  const outerSinks = isolateAllSinks( outerSources, innerSinks, scopesPerChannel,);
                    isolateSink
                      get = makeGetter(scope)
                      innerReducer$.map(innerReducer => function outerReducer(outer) {...})
            patterns:
              sources: genellikle function
              sinks: genellikle data
              onion objeleri:
                listLens
                StateSource
                Stream: prod: PickMerge
                Stream: prod: MapOp
            StateSource nedir?
              a piece of application state stream
              select(Scope): StateSource
                selects a part (or scope) of state object
                returns a new StateSource
                @param scope: {string|number|lens}
              Instances:
                represents all instances in a collection of components
                pickMerge(): gets merged sinks of all instances
            listLens tam nerede kullanılıyor 
              StateSource.ts::
                export function isolateSource<T, R>( source: StateSource<T>, scope: Scope<T, R>): StateSource<R> {
                  return source.select(scope);
              scope = listLens burada
              çağrı zinciri:
                const listSinks = isolate(List, {onion: listLens})(sources);
                  return function wrappedComponent(
                    const innerSources = isolateAllSources(outerSources, scopesPerChannel);
                      function isolateAllSources<So extends Sources>(
                        innerSources[channel] = outerSource.isolateSource( outerSource, scopes[channel],
                          export function isolateSource<T, R>( source: StateSource<T>, scope: Scope<T, R>): StateSource<R> {
                            return source.select(scope);
                const listSinks = isolate(List, {onion: listLens})(sources);
                  return function wrappedComponent(
                    const outerSinks = isolateAllSinks( outerSources, innerSinks, scopesPerChannel,);
                      function isolateAllSinks<So extends Sources, Si>( sources: So, innerSinks: Si, scopes: ScopesPerChannel<So>,): Si {
                        outerSinks[channel] = source.isolateSink(innerSink, scopes[channel]);
                          export function isolateSink<T, R>( innerReducer$: Stream<Reducer<R>>, scope: Scope<T, R>): Stream<Reducer<T>> {
                            return innerReducer$
                              .map(innerReducer => function outerReducer(outer: T | undefined) {
                                const prevInner = get(outer);
                                const nextInner = innerReducer(prevInner);
                                if (prevInner === nextInner) {
                                  return outer;
                                } else {
                                  return set(outer, nextInner);
                                }
                              });
                  # neden isolateSources lens.get, isolateSinks lens.set?
                    get(state) -> [Component] -> set(state)
            açıklama: isolateSink
              code
                export function isolateSink<T, R>( innerReducer$: Stream<Reducer<R>>, scope: Scope<T, R>): Stream<Reducer<T>> {
                  return innerReducer$
                    .map(innerReducer => function outerReducer(outer: T | undefined) {
                      const prevInner = get(outer);
                      const nextInner = innerReducer(prevInner);
                      if (prevInner === nextInner) {
                        return outer;
                      } else {
                        return set(outer, nextInner);
                      }
                    });
              değişkenler
                get: listLens.get()
                outer: outer state (parent state)
                prevInner: prevState
                innerReducer: reducer function coming from model()
                nextInner: new state
                set: listLens.set()
              peki outer state bilgisi nereden geliyor?
                TaskList.sinks {onion: reducer$} içeriyor
                bunu bir yerde state$'e bağlamalı
                sources.onion.state$ ile bunun arasında bağlantı olmalı
                bu da onionify() içinde kuruluyor olmalı
                  keyof ne anlama geliyor?
              onionify() kodu
                export type OSo<T> = {onion: StateSource<T>};
                export type OSi<T> = {onion: Stream<Reducer<T>>};
                # explain:
                  OnionSource app açısından source
                  sources.onion.state gibi düşün
                veri akışı
                  sources['onion'] = new StateSource(state$, 'onion')
                  sinks = main(sources) = TaskList()>reducer$
                  new StateSource -> [main] -> TaskList()>reducer$ -> [imitate] -> reducerMimic$ -> [fold] -> state$ -> [new StateSource] -> sources.onion
              outer nasıl reducer$'a girdi oluyor?
                başlangıç state'ini de reducer içinde veriyoruz
                buradan kendisinin ilk state'ini oluşturuyor:
                  const reducerMimic$ = xs.create<Reducer<T>>();
                  const state$ = reducerMimic$
                    .fold((state, reducer) => reducer(state), void 0 as (T | undefined))
                    .drop(1);
          lens alt komponentlere veriliyor, peki TaskList içindeki state$ hesaplanırken lens kullanılmıyor mu bu durumda?
            evet onionify() içinde bu görünüyor
            state$ global oluşturuluyor, lens kullanılmıyor
            lens isolate() içinde alt komponentlere devrediliyor
          insertTodo$:
            <url:/Users/mertnuhoglu/codes/js/todomvc-cycle-onion/src/components/TaskList/intent.js#tn=    insertTodo$: domSource>
            TaskList/intent.js
              insertTodo$: domSource
                .select('.new-todo').events('keydown')
                .filter(ev => {
                  const trimmedVal = String(ev.target.value).trim();
                  return ev.keyCode === ENTER_KEY && trimmedVal;
                })
                .map(ev => String(ev.target.value).trim()),
            TaskList/model.js
              const insertTodoReducer$ = actions.insertTodo$
                .map(content => function insertTodoReducer(prevState) {
                  const newTodo = {
                    key: uuid++,
                    title: content,
                    completed: false,
                    editing: false,
                  };
                  return {
                    ...prevState,
                    list: prevState.list.concat(newTodo),
                  }
                });
        weather-onionify
          <url:file:///~/codes/js/front-end-reactive-architectures/9781484231791/examples/weather-onionify/src/App.js>
          cityLens
            const cityLens = {
                get: state => state,
                set: (state, childState) => childState
            }
          view()
            const view = state$ => state$.map(state => getForm(state))
            const getForm = location => div(".form", [
                h1(`Your forecasts in ${location.city}`),
                input("#location-input", {props: {value: `${location.city}`}}),
                button("#location-btn", "get forecasts")
            ])
          main()
            const locationSink = isolate(CityForm, {onion: cityLens})(sources);
            const todayForecastSink = isolate(TodayForecast, {onion: cityLens})(sources);
            const futureForecastSink = isolate(FutureForecast, {onion: cityLens})(sources);
        ivan-kleshnin examples id=g10206
          ivan-kleshnin examples <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10206>
          form-1.0
            <url:file:///~/codes/js/cyclejs-examples/1.0-form/src/app.js>
            intent+model
              let username = src.DOM.select("#username")
                .events("input")
                .map((event) => event.target.value)
                .startWith("")
              let email = src.DOM.select("#email")
                .events("input")
                .map((event) => event.target.value)
                .startWith("")
            view
              DOM: $.combineLatest(
                username, email,
                (username, email) => {
                  return div([
          form-1-1
            <url:file:///~/codes/js/cyclejs-examples/1.1-form/src/app.js>
            intent as actions object
              let intents = {
                changeUsername: src.DOM.select("#username")
                  .events("input")
                  .map((event) => event.target.value)
                  .share(),
                changeEmail: src.DOM.select("#email")
                  .events("input")
                  .map((event) => event.target.value)
                  .share(),
              }
            model as state object
              let scanFn = curry((state, updateFn) => {
                return updateFn(state)
              })
              let state = $.merge(
                  // Track fields
                  intents.changeUsername.map((v) => assoc("username", v)),
                  intents.changeEmail.map((v) => assoc("email", v))
                )
                .startWith(seeds)
                .scan(scanFn)
                .distinctUntilChanged()
                .shareReplay(1)
              # scan nasıl çalışır?
                scan bir reducer fonksiyon bekler
                reducer fonksiyon iki arg alır: accumulator, current
                reducer accumulator ile aynı tipten bir değer döner
                ilk accumulator değeri startWith(seeds) tarafından sağlanır
                dolayısıyla, her stream eventteki event, aslında current'a atanır. 
                her stream event de $.merge()'den gelen reducer fonksiyonudur.
                bu da accumulator = prevState'i arg olarak alır
                sonra yine aynı tipte bir değer döner
            view
              return {
                DOM: state.map((state) => {
                  return div([
          form-1.2: actions + update loop
            <url:file:///~/codes/js/cyclejs-examples/1.2-form/src/app.js>
            state driver
              Cycle.run(main, {
                state: identity,
            collect multiple intents streams into one actions stream
              # sample: http://reactivex.io/documentation/operators/sample.html
                similar to combineLatest
              let actions = {
                createUser: src.state.map(prop("form"))
                  .sample(intents.createUser)
                  .map((input) => User(input))
                  .share(),
              let intents = {
                changeUsername: src.DOM.select("#username")...
                changeEmail: src.DOM.select("#email")...
                createUser: src.DOM.select("#submit")
                  .events("click")
                  .map((event) => true)
            model as state
              let state = $.merge(
                  // Track fields
                  intents.changeUsername.map((v) => assocPath(["form", "username"], v)),
                  intents.changeEmail.map((v) => assocPath(["form", "email"], v)),
                  // Create user
                  actions.createUser.map((u) => (s) => assocPath(["users", u.id], u, s)),
                  // Reset form after valid submit
                  actions.createUser.delay(1).map((_) => assoc("form", seeds.form))
                )
                .startWith(seeds)
                .scan(scanFn)
                .distinctUntilChanged()
                .shareReplay(1)
            # bu yaklaşımla onion arasındaki fark nedir?
              burada durumun (state) her bir alanı (field) için özel bir actions.map(reducer) tanımlı
              onion'da ise bir lens.set içinde bunlar yapılıyor
              lens.get ise buradaki actions içindeki streamlerin ilk adımına karşılık geliyor: src.state.map(prop("form"))
              bunlara sample(intents.createUser) gibi kullanıcı eylemleri eklenmiş
              dolayısıyla createUser actionı aslında mevcut durum üzerindeki bir kullanıcı eylemini içeriyor
              daha sonra actions.createUser.map() ile state içinde kullanılıyor
              böylece kullanıcı eylemi + geçmiş durum bilgisi birleştirilmiş bir şekilde bir sonraki state'i oluşturuyor
              peki actions.createUser.map() neden iki içiçe birer argümanlı fonksiyon?
                ilk argüman: mevcut createUser'dan gelen veri: User(input)
                ikinci argüman: prevState, bu scan(scanFn) tarafından bir önceki state neyse oradan sağlanacak
                dikkat edersen, ilk argüman: u, sadece user objsini içeriyor
                prevState = s argümanıysa, tüm durum bilgisini içeriyor, bunun içinde user dışında veriler de olabilir
            initial state as seeds
              let seeds = {
                form: {
                  username: null,
                  email: null,
                },
                users: {},
              }
            User object
              let User = curry((data) => {
                return merge({
                  id: UUID.v4(),
                }, data)
              })
            actions.createUser.map((u) => (s) => assocPath(["users", u.id], u, s)),
              u: is the user object coming from actions.createUser
              s: s.users[id == u.id] = u
            // Reset form after valid submit
              actions.createUser.delay(1).map((_) => assoc("form", seeds.form))
            view
              DOM: state.map((state) => {
                let {form} = state
          form-1.3: lenses + toState no folding of reducers
            <url:file:///~/codes/js/cyclejs-examples/1.3-form/src/app.js>
            <url:file:///~/codes/js/cyclejs-examples/node_modules/rx-utils/src/index.js>
            textFrom() clickFrom()
              let textFrom = (s) => src.DOM.select(s).events("input")::pluck("target.value").share()
              let clickFrom = (s) => src.DOM.select(s).events("click").map((e) => true).share()
              let intents = {
                changeUsername: textFrom("#username"),
                changeEmail: textFrom("#email"),
                createUser: clickFrom("#submit").debounce(100)
            action createUser with Ramda.view
              let actions = {
                createUser: src.state.map(prop("form"))
              ->
              let actions = {
                createUser: src.state::view("form")
            state with reducer
              let state = store(seeds, $.merge(
                // Track fields
                intents.changeUsername::toState("form.username"),
                intents.changeEmail::toState("form.email"),
                // Create user
                actions.createUser::toOverState("users", (u) => assoc(u.id, u)),
                // Reset form after valid submit
                actions.createUser.delay(1)::setState("form", seeds.form)
              ))
              rx-utils functions
                toState
                  bu fonksiyon doğrudan doğruya reducer'ları fold edip sonucu yazıyor
                  1.2'den farklı olarak şuna gerek yok:
                    .scan(scanFn)
          form-1.4: action: derive returns $ User in response to $ form
            action createUser with model.filter
              code
                let actions = {
                  createUser: src.state::view("form")
                ->
                let actions = {
                  createUser: model.filter(identity)
                removes the need for
                  .map((input) => User(input))
              what is model?
                let model = derive((form) => {
                  try {
                    return makeUser(form)
                  } catch (err) {
                    if (err instanceof TypeError) { return null }
                    else                          { throw err }
                  }
                }, src.state::view("form"))
                let makeUser = (data) => {
                  return User(merge({
                    id: UUID.v4(),
                  }, data))
                }
              what is derive?
                // Derive a state observable from a state observable
                // (a -> b) -> $ a -> $ b
                let derive = curry((deriveFn, os) => {
                  return deriveN(deriveFn, [os])
                })
                // Derive a state observable from state observables.
                // (* -> b) -> [$ *] -> $ b
                let deriveN = curry((deriveFn, os) => {
                  return $.combineLatest(...os, deriveFn).distinctUntilChanged().shareReplay(1)
                })
              in summary: derive
                derive takes two args:
                  (a -> b) = (form -> User)
                  $ a = $ form
                returns one stream:
                  $ b =  $ User
          form-1.5: validation with id=g10208
            form-1.5: validation with <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10208>
            <url:file:///~/codes/js/cyclejs-examples/1.5-form/src/app.js>
            validation 
              let errors = store(seeds.form, $.merge(
                src.state::view("form.username").skip(1)::validate(Username)::toState("username"),
                src.state::view("form.email").skip(1)::validate(Email)::toState("email")
              ))
              Username type is defined:
                let Username = User.meta.props.username
              User type is tcomb:
                let Username = Tc.subtype(Tc.String, (x) => {
                  return /^\w{2,10}$/.test(x)
                }, "Username")
                let User = Tc.struct({
                  id: Uid,
                  username: Username,
                  email: Email,
                }, "User")
              validate function:
                let validate = function (type) {
                  return this
                    .debounce(500)
                    .map((val) => V.validate(val, type).firstError())
                    .map((e) => e && e.message || null)
                    .distinctUntilChanged()
                    .shareReplay(1)
                }
              errors is used in view()
                DOM: $.combineLatest(state, model, errors)
                  .debounce(1)
                  .map(([state, model, errors]) => {
          2.0-routing
            <url:file:///~/codes/js/cyclejs-examples/2.0-routing/src/app.js>
            sinks.navi
              // SINKS
              return {
                navi: navi,
              let navi = updateNavi...
              let updateNavi = $.merge(
                intents.redirect
              let intents = {
                redirect: src.DOM.select("a:not([rel=external])")
                  .events("click")
                  .filter((event) => !(/:\/\//.test(event.target.getAttribute("href")))) // drop links with protocols (as external)
                  .do((event) => event.preventDefault())
                  ::pluck("target.href")             // pick normalized property
                  .map((url) => Url.parse(url).path) // keep pathname + querystring only
              # preventDefault() ne yapıyordu?
                https://api.jquery.com/event.preventDefault/
                the default action of event will not be triggered
                ex:
                  clicked anchors will not take the browser to new URL
                otomatik olarak browser'ın yönlendirmesine izin verme, kendin yönlendirmeyi yap
              # .map((url) => Url.parse(url).path) // keep pathname + querystring only
                Url.parse(url) nedir?
                https://github.com/defunctzombie/node-url
                Url.parse(url_text)
                properties of returned object: path, href, ...
              let navi = updateNavi
                .startWith(window.location.pathname)
                .distinctUntilChanged()
                .map((url) => {
                  let [route, page] = window.doroute(url)
                  return {
                    url,   // :: String
                    route, // :: String
                    page,  // :: {Observable *} -> {Observable *}
                  }
                })
                .distinctUntilChanged().shareReplay(1)
                .delay(1) // shift to the next tick (navi <- routing: immediate)
              doroute:
                // Simplest solution of cyclic dependency: routes <-> pages
                window.doroute = doroute(routes) // prefixed with "do" to avoid noun-vs-verb confusion
                let routes = [
                  ["/", require("./pages/home")],
                  ["/about", require("./pages/about")],
                  ["*", require("./pages/not-found")],
                ]
                // doroute :: [[String, Component]] -> String -> [String, Component]
                let doroute = curry((routes, url) => {
                  let match = find(([r, _]) => r == url, routes)
                  if (!match) {
                    match = takeLast(1, routes)[0]
                  }
                  return [match[0], match[1]]
                })
                # summary
                  gelen url'nin hangi require('./pages/home') sayfaya gideceğini dönüyor
                # örneğin page/home.js
                  module.exports = function (src) {
                    return {
                      DOM: src.navi.map((navi) => {
                        console.log("render home")
                        return div([
                          h1("Home"),
                          menu({navi}),
                          p(["[home content]"])
            sources.navi'nin kullanımı
              # navi aslında bir {url,route,page} objesi dönüyor:
                return {
                  url,   // :: String
                  route, // :: String
                  page,  // :: {Observable *} -> {Observable *}
                }
              # URL'yi sinks.URL dönüyor:
                URL: navi::view("url"),
              # gelen navi'den yapılanlar:
                summary
                  önce view("route") ile ilgili page'in sources {Observable *} objesi alınıyor
                  prevPage'in subscription'ları iptal ediliyor:
                  yeni sinks oluşturuluyor
                    new ReplaySubject()
                    => xstream'de
                    const proxyItemRemove$ = xs.create();
                  navi.page(src) ile sources çalıştırılıyor 
                code
                  let page = src.navi
                    .sample(src.navi::view("route")) // remount only when page *type* changes...
                    .scan((prevPage, navi) => {
                      // Unsubscribe previous page (if there was)
                      if (prevPage.subscriptions) {
                        prevPage.subscriptions.forEach((s) => s.dispose())
                      }
                      // Make disposable sinks
                      let sinkProxies = {
                        DOM: new ReplaySubject(1),
                        log: new ReplaySubject(1),
                      }
                      // Run page
                      let sinks = merge({
                        log: $.empty(),      // affects log
                        DOM: $.empty(),      // affects DOM
                      }, navi.page(src))
                      // Subscribe current page
                      let subscriptions = [
                        sinks.DOM.subscribe(sinkProxies.DOM.asObserver()),
                        sinks.log.subscribe(sinkProxies.log.asObserver()),
                      ]
                      return {navi, sinks: sinkProxies, subscriptions}
                    }, {})
                    .pluck("sinks")
                    .shareReplay(1)
              # en son aşamada page içinden DOM sinkini alıp app'e veriyor
                DOM: page.flatMapLatest(prop("DOM")),
          2.1-routing: highlight "current" menu item
            <url:file:///~/codes/js/cyclejs-examples/2.1-routing/src/app.js>
            navi oluştururken
              let aa = (...args) => {
                let vnode = a(...args)
                let {href, className} = vnode.properties
                vnode.properties.className = Class(className, {active: isActiveUrl(url, href)}) // TODO or rather `isActiveRoute`?
                return vnode
              }
              // isActiveUrl :: String -> String -> Boolean
              let isActiveUrl = curry((baseUrl, currentUrl, url) => {
                baseUrl = withSuffix("/", Url.parse(baseUrl).pathname)
                currentUrl = withSuffix("/", Url.parse(currentUrl).pathname)
                url = withSuffix("/", Url.parse(url).pathname)
                if (url == baseUrl) {
                  return url == currentUrl // link to "home" is active only on "home"
                } else {
                  return currentUrl.startsWith(url) // link to "page" is active on "page" and "page" subpages TODO handle trailing slashes, etc.
                }
              })
              # url ve href ne?
                url: currentUrl
                  let [route, page] = window.doroute(url)
                href: linkin url'si
                  let {href, className} = vnode.properties
              # aa nasıl kullanıyıor?
                chunks/menu.js
                  module.exports = function ({navi}) {
                    let {aa} = navi
                    return div([
                      div(aa({href: "/"}, "Home")),
                      div(aa({href: "/about"}, "About")),
                      div(aa({href: "/users"}, "Users")),
                      div(aa({href: "/broken"}, "Broken")),
                    ])
                  }
                pages/about.js
                  module.exports = function (src) {
                    return {
                      DOM: src.navi.map((navi) => {
                        console.log("render about")
                        return div([
                          h1("About"),
                          menu({navi}),
            2.2-routing: use route-parser + models and URL params
              <url:file:///~/codes/js/cyclejs-examples/2.2-routing/src/app.js>
              use route-parser
                routes.js
                  let Route = require("route-parser")
                  let routes = [
                    [new Route("/"), require("./pages/home")],
              users page
                chunks/user.card.js
                  module.exports = function ({navi, user}) {
                    return (
                      div([
                        h2("User"),
                        p(["Id: ", user.id]),
                        p(["Name: ", user.username]),
                pages/user.detail.js
                  let userCard = require("../chunks/user.card")
                  return {
                    DOM: user.withLatestFrom(
                      src.navi, src.state::view("users"),
                      (user, navi, users) => {
                        console.log("render user.detail")
                        let ids = keys(users)
                        return div([
                          h1("User Detail"),
                          menu({navi}),
                          userCard({navi, user}),
                  # state.users objeleri nereden geliyor?
                    app.js
                      let state = store(seeds, $.empty())
                    seeds.js
                      let seeds = {
                        users: {
                          "1": makeUser({id: "1", username: "gizmo", email: "gizmo@paqmind.com", points: 30, bonus: 10}),
                          "2": makeUser({id: "2", username: "fancy", email: "fancy@paqmind.com", points: 20}),
            2.3-routing
              <url:file:///~/codes/js/cyclejs-examples/2.3-routing/src/app.js>
            3.0-crud-alt
              <url:file:///~/codes/js/cyclejs-examples/3.0-crud.alt/src/app.js>
          next
            tcomb
      taslak dizaynlar - cyclejs id=g10202
        taslak dizaynlar - cyclejs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10202>
        focus/blur example id=g10199
          focus/blur example <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10199>
          https://javascript.info/focus-blur
          features:
            blur edince inputu submit et
            validasyon yap
            girdi veri hatalarını göster
          intent(sources.DOM)
            inputText$ = sources.DOM.select('#input').events('input')
            blur$ = sources.DOM.select('#input').events('blur')
            return {blur$, inputText$}
          model(actions)
            validationErrors$ = actions.inputText$.map(e => e.target.value)
              .filter(text => validate(text) === false)
            text$ = actions.inputText$.map(e => e.target.value)
              .filter(text => validate(text) === true)
            textSubmitted$ = xs.combine(text$, actions.blur$)
              .map([text, blur] => text)
            return {validationErrors$, textSubmitted$}
          view(state)
            errors$ = state.validationErrors$
              .map((error) => div("#error", {class: 'invalid'}, "Name is invalid"))
            text$ = state.textSubmitted$
              .map(name => div("#name", name))
            return xs.merge(errors$, text$)
			articles - cyclejs 
				cyclejs ex15_10_05 id=g10585
					~/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_05/index.ts
						index.ts
							onionify(App)
						app/
							main()
								comp = isolate(subcomponent)
								request$ = intent(so)
								reducer$ = model(so)
								state$ = sources.onion.state$
								vdom$ = xs.combine(comp1.DOM, ...)
								return {
									HTTP: request$
									onion: reducer$
									DOM: vdom$
								}
							intent()
								request:RequestInfo = {url:..., method:..., category:...}
								_:xs<RequestInfo> = dom$.select(..).events('click').mapTo(request)
								return {requests$: _}
							model()
								initRed$: Stream<Reducer<State>> = xs.of(function initReducer(prevState: State)...)
								planRed$: .. = so.HTTP.select('cat').flatten().map(res => 
									function planRed(prevState) 
									return {
										...prevState
										plans: res.body
									}
								)
						plan_panel/
							index.ts
								intent()
								model()
								view(state$)
				study_notes_cyclejs.Rmd
					logic
					effects
					separate these parts
    expressjs
			server in expressjs and nodejs id=g10625
				server in expressjs and nodejs <url:file:///~/gdrive/mynotes/content/code/cjs/cjs.md#r=g10625>
				ref
					~/projects/study/js/study_expressjs_server.Rmd
				ex: 
					https://stackoverflow.com/questions/44852688/how-to-properly-send-json-data-using-superagent-on-react
				ex: getting started
					const app = express()
					const port = 3000
					app.get('/', (req, res) => res.send('Hello World!'))
					app.listen(port, () => console.log(`port ${port}!`))
      error: csrf token missing
        # req.path içine POST form'un adresini ekle
          app.use((req, res, next) => {
          if (req.path === '/api/upload' || req.path === '/uploadData') {
            next();
          } else {
            lusca.csrf()(req, res, next);
          }
          });
      using html inside pug
        opt1: just put | pipe symbol in front as if it is raw text
          .content
            | <div>Hello, yes this is dog</div>
        opt2: just put html tags
          <div>Hello, yes this is dog</div>
      using html file
        res.sendFile
          exports.getTest2 = (req, res) => {
            const path = __dirname;
            res.sendFile(path + "/test2.html");
        dynamic routing for static files
          opt1:
            app.get('/test/:uid', function(req, res){
              var uid = req.params.uid;
              var path = "test/" + uid + ".html";
              res.sendfile(path, {root: './public'});
            });
            # put html files into: public/test/ folder
            # use http://x.com/test/file
          opt2: 
            app.use('/static', express.static('public'))
            # put html files into: public/ folder
            # use http://x.com/static/file.html
      change start port
        opt1
          PORT=3001 npm start
          PORT=3001 nodemon app.js
        opt2: gulp
          gulpfile.js
            nodemon({
              script: 'bin/www',
          bin/www
            app.set('port', process.env.PORT || 3003);
        opt3: environment variable
          PORT=3001
        opt4: intellij
          environment variable
            PORT=3001
      run nodemon from intellij
        configuration
          node parameters: /Users/mertnuhoglu/.nvm/versions/node/v7.7.4/bin/nodemon
          javascript file: app.js
    graphql
      alternatives to graphql
        postgraphql
          n+1 problem
            https://github.com/postgraphql/postgraphql/issues/219
        join-monster
          http://join-monster.readthedocs.io/en/latest/
            on top of graphql
            converts graphql to sql
            solves roundtrip problem with joins
            alternative to: Facebook DataLoader
      HN: REST in Peace. Long Live GraphQL
        https://news.ycombinator.com/item?id=14839576
        critic: the article doesn't discuss costs and limitations
        what is the benefit compared to REST?
          multiple round trips to fetch data required by a view -> single request
        critic: baron816: impractical bc it requires Relay or Apollo on frontend
          answer: you can negate need for Relay/Apollo
            https://stackoverflow.com/questions/42520663/how-send-graphql-query-by-postman
        alternative: postgrest
      HN: Apollo Server 1.0  – GraphQL Server for Node.js Frameworks
        https://news.ycombinator.com/item?id=14814007
        q: does apollo solve round trip issue with graphql (joins/n+1 problem)
          ans: it does not. 
            alternative: join-monster handles it
            q: join-monster works only for at most 2 levels
              subzero solves this problem
        q: n+1 problem repeats and spoils
          beware subsystems that propose to wrap and abstract your database for a new paradigm "automatically". They're leaky and difficult and take a decade to get right
        q: graphql has functions called resolvers where you write your logic to get data from wherever you want. SQL, NoSQL, API, filesystem, etc.
    handsontable
      ref
        /Users/mertnuhoglu/projects/itr/vrp/frontend/views/test_pug/handsontable01.pug
      documentation pro 
        https://docs.handsontable.com/pro/1.11.0/tutorial-introduction.html
        @note
          kopyala yapıştır kendinden destekliyor
          yeni satırları otomatik oluşturuyor
          json da olabilir data, array de
      ex: basic
        html
          div(id="spreadsheet")
        js
          var data = [
              ["", "Ford", "Volvo", "Toyota", "Honda"],
              ["2016", 10, 11, 12, 13],
              ["2017", 20, 11, 14, 13],
              ["2018", 30, 15, 12, 13]
          ];
          /* our DIV container */
          var container = document.getElementById('spreadsheet');
          /* spreadsheet initialization */
          var hot = new Handsontable(container, {
              data: data,
              rowHeaders: true,
              colHeaders: true,
              dropdownMenu: true
          });
      ex: createSpreadsheetData()
        var data = function () {
            return Handsontable.helper.createSpreadsheetData(100, 10);
        };
        var hot = new Handsontable(container, {
            data: data(),
            ...
      ex: data as array of objects
        var dataObject = [
            {
                id: 1, flag: 'EUR', currencyCode: 'EUR', },
      ex: columns settings
        columns: [
            {
                data: 'id',
                type: 'numeric',
                width: 40
            },
      ex: hot.getData()
        hot.getData();
        // hot.getData().slice(0,2)
        // (2) [Array(7), Array(7)]0: Array(7)0: ""1: "Ford"2: "Nissan"3: "Toyota"4: "Honda"5: "Mazda"6: "Ford"length: 7__proto__: Array(0)1: Array(7)length: 2__proto__: Array(0)
      ex: ocpu custom function
        ocpu.seturl("//localhost/ocpu/user/opencpu/library/pmf/R")
      ex: ocpu upload_data
        var arg1 = hot.getData();
        // (2) [Array(7), Array(7)]0: Array(7)0: ""1: "Ford"2: "Nissan"3: "Toyota"4: "Honda"5: "Mazda"6: "Ford"length: 7__proto__: Array(0)1: Array(7)length: 2__proto__: Array(0)
        var req1 = ocpu.call("upload_data", {mat: arg1}, function (session) {
            mysession = session;
            mysession.getConsole(function (outtxt) {
                $("#output1").text(outtxt);
            });
        }).fail(function () {
            alert("Error: " + req.responseText);
        });
        // > upload_data(mat = mat)
        //     V1  V2     V3     V4    V5    V6   V7
        // 1 Year Kia Nissan Toyota Honda Mazda Ford
        // 2 2012  10     11     12    13    15   16
        // 3 2013  10     11     12    13    15   16
      ex: ocpu load_data from R to hot
        var req1 = ocpu.call("get_data", {}, function (session) {
            mysession = session;
            mysession.getObject(function (data) {
                var
                    container1 = document.getElementById('example2'),
                    settings1 = { data: data };
                var hot2 = new Handsontable(container1, settings1);
                hot2.render();
      ex: date
        function getCarData() {
            return [
                ["Ford", "A 160", new Date(), 6999.9999],
                ["Ford2", "A 160", new Date().toISOString(), 6999.9999],
                ["Ford3", "A 160", new Date().toDateString(), 6999.9999],
                ["Ford4", "A 160", new Date().toLocaleDateString(), 6999.9999],
                ["Mercedes", "A 160", "01/14/2012", 6999.9999],
        columns: [
          {
              type: 'date',
              dateFormat: 'MM/DD/YYYY',
              correctFormat: true,
              defaultDate: '01/01/1900'
          },
    html id=g10204
      html <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10204>
      document
        attributes and properties id=g10205
          attributes and properties <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10205>
          https://javascript.info/dom-attributes-and-properties
          intro 
            HTML attributes are mapped to DOM Object properties
            ex:
              <body id="page">
              # DOM object mapped to:
              body.id="page"
            but attribet-property mapping is not one-to-one
          DOM properties
            DOM nodes are js objects
              we can modify them
              ex:
                document.body.myData = {name: 'ali'}
                alert(document.body.myData.name)
            we can add methods:
              ex:
              document.body.sayTag = function() {
                alert(this.tagName)
              }
              document.body.sayTag()
            we can modify built-in prototypes:
              Element.prototype.sayHi = () => alert(`Hello ${this.tagName}`)
              document.documentElement.sayHi() // Hello HTML
              document.body.sayHi(); // Hello BODY
          HTML attributes
            browser reads HTML standard attributes and creates DOM properties from them
            but this doesn't happen for non-standard attributes
              ex:
                <body id="test" something="non-standard">
                  <script>
                    alert(document.body.id); // test
                    // non-standard attribute does not yield a property
                    alert(document.body.something); // undefined
                  </script>
                </body>
            each element type has different standard attributes
              ref
                http://htmlcheatsheet.com > HTML > Attributes
              ex:
                <body id="body" type="...">
                  <input id="input" type="text">
                input.type // text
                body.type // undefined
              how to access non-standard attributes?
                elem.hasAttribute(name)
                elem.getAttribute(name)
                elem.setAttribute(name, value)
                elem.removeAttribute(name)
                elem.attributes
                  :Array({name,value})
                ex:
                  <body something="non-standard">
                  document.body.getAttribute('something') // non-standard
              HTML attributes have following features:
                case-insensitive
                values are always string
          Property-attribute synchronization
            when a standard attribute changes, its corresponding property is auto-updated, and vice versa
              ex
                let input = document.querySelector('input');
                // attribute => property
                input.setAttribute('id', 'id');
                alert(input.id); // id (updated)
                // property => attribute
                input.id = 'newId';
                alert(input.getAttribute('id')); // newId (updated)
          DOM properties are typed
            DOM properties are not always strings
              ex: input.checked is boolean
              ex: any.style is an object
            DOM properties might differ from HTML attributes
              ex: a.href is full URL, but 'href' attribute might be relative URL or #hash
                <a id="a" href="#hello">link</a>
                a.getAttribute('href'); // #hello
                a.href ; // full URL in the form http://site.com/page#hello
          Non-standard attributes, dataset
            to pass custom data from HTML to JS
              ex:
                <div show-info="name">
                <div show-info="age">
                let user = {name: "Pete", age=25}
                for (let div of document.querySelectorAll('[show-info]'))
                  let field = div.getAttribute('show-info')
                  div.innerHTML = user[field]
            css
              ex:
                <style>
                  .order[order-state="new"] { color: green }
                <div class="order" order-state="new">
              why to use attribute instead of classes?
                the state can be changed easily:
                ex:
                  div.setAttribute('order-state', 'canceled')
            problem with custom attributes:
              what if later standard attributes introduce our non-standard attribute
              to aviod conflicts: use data-* attributes
              they are available in `dataset` property
                ex:
                  <elem data-about="..">
                  elem.dataset.about
                ex: multiword become camel-cased
                  <div data-order-state="new">
                  order.dataset.orderState // new
        Introduction to browser events
          https://javascript.info/introduction-browser-events
          intro 
            event: signal that something happend
            mouse events:
              click
              contextmenu: mouse right-click on an element
              mouseover/mouseout: cursor comes over / leaves
              mousedown/mouseup
              mousemove
            form element events
              submit: submitting a <form>
              focus: focusing an element ex an <input>
            keyboard events:
              keydown / keyup
            document events 
              DOMContentLoaded: HTML is loaded, DOM fully built
            css events:
              transitioned: css animation finish
          Event handlers
            handler: a function that runs in case of an event
            several ways to assign a handler:
              HTML-attribute
                simplest way
                ex:
                  <input value="Click" onclick="alert('click!')" type="button">
              DOM property
                ex:
                  <input id="elem" type="button" value="...">
                  elem.onclick = function() { alert('thanks') }
              Accessing the element: this
                `this` is the element
                ex:
                  onclick="alert(this.innerHTLM)"
              Possible mistakes
                ex:
                  // wrong
                  button.onclick = sayThanks()
                  // correct
                  button.onclick = sayThanks
                  // but in markup we have brackets
                  <input type="button" onclick="sayThanks()">
              addEventListener
                above ways have limit: no multiple handlers
                ex:
                  element.addEventListener(event, handler[, phase])
                event: event type name
                handler: handler function
                phase: usually we don't use it
              Event object
                the browser creates an event object and passes it as an argument to the handler
                ex:
                  elem.onclick = function(event) { event.type }
                properties of event object:
                  type
                  currentTarget
                  clientX/clientY
              Object handlers: handleEvent
                ex:
                  element.addEventListener('click', {
                    handleEvent(event) { ... }
                  })
      events
        focus/blur
          https://javascript.info/focus-blur
            an element receives focus by click/Tab
            `autofocus` HTML attribute
            blur: losing focus
              mostly more important
              means: data has been entered
      error: Access-Control-Allow-Origin
        https://stackoverflow.com/questions/35553500/xmlhttprequest-cannot-load-https-www-website-com
          Same Origin Policy 
            a security feature of browsers
            how it happens?
              alice is a person
              bob runs website: website.com
              mallory runs website: localhost:4300
              alice is logged into bob's site
              alice visits mallory
                this has js that makes alice's browser make an http request to bob
          solution: CORS
            explicitly grant permission to mallory's site to access data via alice's browser
        https://stackoverflow.com/questions/38043194/the-access-control-allow-origin-header-has-a-value-that-is-not-equal-to-the-su
    http requests
      alternative libraries
        nodejs http
          lots of boilerplate
        request/request
          very popular
        unirest
          supports 8 languages
        got
          popular and easy
      request/request
        https://github.com/request/request
    hyperscript
      ref
        <url:file:///~/projects/study/js/study_hyperscript.Rmd>
      snabbdom - cyclejs id=g10203
        snabbdom - cyclejs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10203>
        documentation
          ref
            https://github.com/snabbdom/snabbdom
          props attrs 
            both allow to set properties
            h('a', {props: {href: '/foo'}}, 'Go to Foo');
            h('a', {attrs: {href: '/foo'}}, 'Go to Foo');
            boolean attributes:
              ex: disabled hidden selected
              depend on presence/absence of the attribute itself
          dataset
            set data attributes data-*
            h('button', {dataset: {action: 'reset'}}, 'Reset');
            datasets: [{
              label: `Clicks per ${timeframeSec} second`,
              data: history,
              backgroundColor: '#3498db',
            }],
          style
            h('span', {
              style: {border: '1px solid #bada55', color: '#c0ffee', fontWeight: 'bold'}
                }, 'Say my name, and every colour illuminates');
          class
            map class names to booleans
            h('a', {class: {active: true, selected: false}}, 'Toggle');
          hook
            a way to hook into lifecycle of DOM nodes
            to execute any code at desired points in the life of a vnode
            hooks
              pre: patch process begins
              init: a vnode has been added
              ...
              post: patch process is done
            usage:
              h('iv.row', {
                key: movie.rank,
                hook: {
                  insert: (vnode) => {movie.elmHeight = vnode.elm.offsetHeight; }
                }
              })
          virtual node
            properties:
              sel, data, children, text, elm, key
              sel: String
                .sel property
                css selector for h() during creation
                ex:
                  h('div#container', ..)
                  .sel = "div#container"
              data: Object
                information for modules such as styles, css classes, attributes etc. 
                h('div', {props: {className: 'container'}}, [...])
              children: Array
              text: String
                h('h1', {}, 'Hello')
              elm: Element
                pointer to real DOM created
              key: string|number
                ex:
                  h('div', {key:1}, [])
        html ref library
          a
            a({
              attrs: {href: path},
              class: {selected: state.filter === filterTag}
            }, label)
            a({
              "attrs": {
                "href": "https://htmlg.com/",
                "target": "_blank",
                "rel": "nofollow"
              }
            }, [`Click here`])
            a({
              "attrs": {
                "href": "mailto:me@ruwix.com?Subject=Hi%20mate",
                "target": "_top"
              }
            }, [`Send Mail`])
            a({
              "attrs": {
                "href": "#footer"
              }
            }, [`Jump to footnote`]),
            a({
              "attrs": {
                "name": "footer"
              }
            }),
          button
            button('.destroy')
            button('.clear-completed', 'Clear completed (' + amountCompleted + ')')
          div
            div([`Block element`])
          em(["Italic text"])
          footer('.footer', {style: footerStyle}, [..])
          form({
            "attrs": {
              "action": "/action.php",
              "method": "post"
            }
            }, [
              "Name: ",
              input({
                "attrs": {
                  "name": "name",
                  "type": "text"
                }
              }),
              br(),
            ])
          h
            h1([`Page title`]),
            h2([`Subheading`]),
            h3([`Tertiary heading`]),
            h4([`Quaternary heading`])
          hr()
          iframe
            iframe({
              "attrs": {
                "src": "link.html",
                "width": "200",
                "height": "200"
              }
            }, [])
          img
            img({
              "attrs": {
                "src": "/demo.jpg",
                "alt": "description",
                "width": "100",
                "height": "48"
              }
            })
          input
            input({
              "attrs": {
                "max": "99",
                "min": "1",
                "name": "age",
                "step": "1",
                "type": "number",
                "value": "18"
              }
              }),
            input('.edit', {
              props: {type: 'text'},
              hook: {
                update: (oldVNode, {elm}) => {
                  elm.value = title;
                  if (editing) {
                    elm.focus();
                    elm.selectionStart = elm.value.length;
                  }
                }
              }
            })
            input('.toggle', {
              props: {type: 'checkbox', checked: completed},
            }),
            input('.new-todo', {
              props: {
                type: 'text',
                placeholder: 'What needs to be done?',
                autofocus: true,
                name: 'newTodo',
                value: state.inputValue
              }
              })
            input('.toggle-all', {
              props: {type: 'checkbox', checked: allCompleted},
              }),
            type: radio
              input({
                "attrs": {
                  "checked": "checked",
                  "name": "newsletter",
                  "type": "radio",
                  "value": "daily"
                }
              }),
              " Daily ",
              input({
                "attrs": {
                  "name": "newsletter",
                  "type": "radio",
                  "value": "weekly"
                }
              }),
              " Weekly",
            input({
              "attrs": {
                "type": "submit",
                "value": "Submit"
              }
              })
            input('.slider', {
              attrs: {type: 'range', min: props.min, max: props.max, value}
            })
          label(title),
          li([
            a({
              attrs: {href: path},
              class: {selected: state.filter === filterTag}
            }, label)
            ]);
          nav
            nav([
              span({
                dataset: {page: 'home'},
                class: {'active': pathname === '/home'}
              }, 'Home'),
              span({
                dataset: {page: 'about'},
                class: {'active': pathname === '/about'}
              }, 'About'),
          p
            p({
              "style": {
                "name": "style",
                "value": "text-align: center;"
              }
            }, [`text`]),
          section('.main', {style: sectionStyle}, [ listVDom ]);
          select({
            "attrs": {
              "name": "gender"
            }
            }, [
              option({
                "attrs": {
                  "selected": "selected",
                  "value": "male"
                }
              }, ["Male"]),
              option({
                "attrs": {
                  "value": "female"
                }
              }, ["Female"])
            ]),
          span
            span({
              dataset: {page: 'home'},
              class: {'active': pathname === '/home'}
            }, 'Home'),
            span('.todo-count', [
              strong(String(amountActive)),
              ' item' + (amountActive !== 1 ? 's' : '') + ' left'
            ]),
            span({
              "style": {
                "name": "style",
                "value": "text-decoration: underline;"
              }
            }, ["Underlined text"])
          strong(String(amountActive)),
          table
            table([
              caption(["Phone numbers"]),
              thead([
                tr([
                  th(["Name"]),
                  th({
                    "attrs": {
                      "colspan": "2"
                    }
                  }, ["Phone"])
                ])
              ]),
              tbody([
                tr([
                  td(["John"]),
                  td(["577854"]),
                  td(["577855"])
                ]),
                tr([
                  td(["Jack"]),
                  td(["577856"]),
                  td(["577857"])
                ])
              ]),
              tfoot([
                tr([
                  td([]),
                  td(["Personal"]),
                  td(["Office"])
                ])
              ])
            ])
          textarea({
            "attrs": {
              "cols": "20",
              "name": "comments",
              "rows": "5"
            }
            }, ["Comment"]),
          ul('.filters', [
            renderFilterButton(state, '', '/', 'All'),
            renderFilterButton(state, 'active', '/active', 'Active'),
            renderFilterButton(state, 'completed', '/completed', 'Completed'),
            ]),
        idioms
          toHTML convert to concrete HTML
            var out = toHTML(vdom)
          h function
            var vdom = h("ul#bestest-menu", items.map( e =>
              h(`li#item-${e.id}`, e.title))
            );
          bootstrap attributes
            h("ul#myTab.nav.nav-tabs", {
              "attrs": {
                "role": "tablist",
              },
          attributes like href
            a({
              attrs: {href: path},
              class: {selected: state.filter === filterTag}
              }, label)
          css styles
            display
              const footerStyle = {'display': state.list.length ? '' : 'none'};
              footer('.footer', {style: footerStyle}, [..])
          dynamic class based on state
            a({
              attrs: {href: path},
              class: {selected: state.filter === filterTag}
              }, label)
          state and vdom
            return xs.combine(state$, childrenVDOM$)
              .map(([state, childrenVDOM]) => {
                const color = idToColor(state.id)
                return div({style: style(color)}, [
                  button('.add', ['Add Folder']),
                  state.removable && button('.remove', ['Remove me']),
                  state.children && div({}, childrenVDOM),
                ])
              })
            xs.combine(state$, listVDom$).map(([state, listVDom]) =>
              div([
                renderHeader(state),
                renderMainSection(state, listVDom),
                renderFooter(state)
              ])
          hooks for input
            input('.edit', {
              props: {type: 'text'},
              hook: {
                update: (oldVNode, {elm}) => {
                  elm.value = title;
                  if (editing) {
                    elm.focus();
                    elm.selectionStart = elm.value.length;
                  }
                }
              }
            })
          many elements
            <url:/Users/mertnuhoglu/codes/js/cyclejs/examples/advanced/many/src/List.js#tn=function view(items$) {>}
            return items$.map(items => {
              const itemVNodeStreamsByKey = items.map(item =>
                item.DOM.map(vnode => {
                  vnode.key = item.id; return vnode;
                })
              );
              return xs.combine(...itemVNodeStreamsByKey)
                .map(vnodes => div('.list', [addButtons].concat(vnodes)));
            }).flatten();
          display if
            state.removable && button('.remove', ['Remove me']),
            state.children && div({}, childrenVDOM),
            ex: logic: display button if x > 0
              (amountCompleted > 0 ?
                button('.clear-completed', 'Clear completed (' + amountCompleted + ')')
                : null
              )
        ref ex:
          <url:file:///~/codes/js/todomvc-cycle-onion/src/components/TaskList/view.js>
      hyperaxe
        https://github.com/ungoldman/hyperaxe
        ex
          var { a, img, video } = require('hyperaxe')
          a({ href: '#' }, 'click')
          // <a href="#">click</a>
          img({ src: 'cats.gif', alt: 'lolcats' })
          // <img src="cats.gif" alt="lolcats">
          video({ src: 'dogs.mp4', autoplay: true })
          // <video src="dogs.mp4" autoplay="true"></video>
        custom tags
          var x = require('hyperaxe')
          var p = x('p')
          p('over 9000')
          // <p>over 9000</p>
        css shorthand
          var horse = x('.horse.with-hands')
          horse('neigh')
          // <div class="horse with-hands">neigh</div>
        custom components
          var siteNav = (...links) => x('nav.site')(
            links.map(link =>
              x('a.link')({ href: link.href }, link.text)
            )
          )
          x.body(
            siteNav(
              { href: '#apps', text: 'apps' },
              { href: '#games', text: 'games' }
            )
          )
          // <body>
          //   <nav class="site">
          //     <a class="link" href="#apps">apps</a>
          //     <a class="link" href="#games">games</a>
          //   </nav>
          // </body>
        API
          hyperaxe
            args
              tag: String
              props: object
              children: node, string, number, array
            returns: a function that creates HTML elements
            factory is variadic
              x('.variadic')(
                x('h1')('hi'),
                x('h2')('hello')
              )
            array works too
              x('.arrays')([
                x('p')('hello'),
                x('p')('mert')
              ])
          HTMLElement.outerHTML
            returns stringified HTML
          hyperaxe[tag]
            all HTML tags are attached to `hyperaxe` as keys
            partial application
      hyperscript
        ex
          var h = require('hyperscript')
          h('div#page',
            h('div#header',
              h('h1.classy', 'h', { style: {'background-color': '#22f'} })),
            h('div#menu', { style: {'background-color': '#2f2'} },
              h('ul',
                h('li', 'one'),
                h('li', 'two'),
                h('li', 'three'))),
              h('h2', 'content title',  { style: {'background-color': '#f22'} }),
              h('p',
                "so it's just like a templating engine,\n",
                "but easy to use inline with javascript\n"),
              h('p',
                "the intention is for this to be used to create\n",
                "reusable, interactive html widgets. "))
        API
          h(tag, attrs, [text?, Elements?, ...])
            classes&id
              ex: name.class1.class2#id
              shortcut 
            default tag name
              if tag name is omitted, it defaults to <div>
            attributes
              {href: 'https://npm.im/hyperscript'}
              gotchas:
                colspan -> colSpan
                for -> htmlFor
              events
                if an attribute is a function, it is registered as an event listener
                ex
                  var h = require('hyperscript')
                  h('a', {href: '#',
                    onclick: function (e) {
                      alert('you are 1,000,000th visitor!')
                      e.preventDefault()
                    }
                  }, 'click here to win a prize')
              styles
                if attr has style property it is handled specially
                ex
                  h('h1.fun', {style: {'font-family': 'Comic Sans MS'}}, 'Happy Birthday!')
                ex: or as a string
                  h('h1.fun', {style: 'font-family: Comic Sans MS'}, 'Happy Birthday!')
            children
              string: TextNode is created
              HTMLElement: 
              null: ignored
              Array
                ex
                  var obj = {
                    a: 'Apple',
                    b: 'Banana',
                    c: 'Cherry',
                    d: 'Durian',
                    e: 'Elder Berry'
                  }
                  h('table',
                    h('tr', h('th', 'letter'), h('th', 'fruit')),
                    Object.keys(obj).map(function (k) {
                      return h('tr',
                        h('th', k),
                        h('td', obj[k])
                      )
                    })
                  )
      html2hyperscript cli
        http://html-to-hyperscript.paqmind.com/
          https://github.com/ivan-kleshnin/html-to-hyperscript
      html tags important
        html-css-js.com/html/tags
          a
          body
          br
          div
          form
          h1-h2-h3-h4
          head
          html
          iframe
          img
          input
          li
          link
          meta
          ol
          option
          p
          script
          select
          span
          style
          table
          td
          textarea
          title
          tr
          ul
    introspection - metaprogramming - reflection
      ownKeys
        const delay = require('xstream/extra/delay').default
        console.log(typeof delay)
        //> function
        const keys = Reflect.ownKeys(delay)
        console.log(keys)
        //> [ 'length', 'name', 'prototype' ]
      getOwnPropertyNames
        console.log(Object.getOwnPropertyNames(sources.DOM))
		js language
			classes	
				class expressions
					https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_expressions
					unnamed
						let Rectangle = class {
							constructor(height, width) {
								this.height = height;
								this.width = width;
							}
						};
						console.log(Rectangle.name);
						// output: "Rectangle"
					named
						let Rectangle = class Rectangle2 {
							constructor(height, width) {
								this.height = height;
								this.width = width;
							}
						};
						console.log(Rectangle.name);
						// output: "Rectangle2"
    modules
      webpack
        Error: Cannot find module '../lib/polyfills'
          cause: I copied the project from somewhere else
            some of the references broken
          solution:
            npm install --save-dev webpack-dev-server
        Error: devServer.proxy is not a function
          solution:
            webpack.config.js
              //devServer.proxy({
                //'/api': { target: 'http://localhost:3000' }
              //}),
            npm run build
            open build/index.html
    nodejs
			ref: server in expressjs and nodejs <url:file:///~/gdrive/mynotes/content/code/cjs/cjs.md#r=g10625>
      node version managers: nvm and n
        nvm is more complex
        n is more simple
        they both manage multiple node installations in the same computer
      update install
        uninstall n
          https://github.com/mklement0/n-install#uninstalling-n
        update npm
          opt1:
            sudo npm install -g npm
          opt2:
            curl -0 -L https://npmjs.com/install.sh | sudo sh
          errors:
            msg
              npm ERR! Refusing to delete /usr/local/share/man/man1/npm-access.1: /usr/local/Cellar/node/7.8.0/libexec/npm/lib/node_modules/npm/man/man1/npm-access.1 symlink target is not controlled by npm /usr/local/share/man/man1
              npm ERR! File exists: /usr/local/share/man/man1/npm-access.1
              npm ERR! Move it away, and try again.
            ls -la /usr/local/share/man/man1/npm-access.1
            lrwxr-xr-x  1 mertnuhoglu  admin  83 Apr  5  2017 /usr/local/share/man/man1/npm-access.1 -> /usr/local/Cellar/node/7.8.0/libexec/npm/lib/node_modules/npm/man/man1/npm-access.1
            rm /usr/local/share/man/man1/npm-access.1
        install n version manager
          https://askubuntu.com/questions/594656/how-to-install-the-latest-versions-of-nodejs-and-npm
          sudo npm cache clean -f
          sudo npm install -g n
          sudo n stable
        update node with n
          https://github.com/tj/n
          # install and use stable node
          n stable
          # list node versions
          n
          # remove all versions except current
          n prune
          # remove some versions
          n rm 0.9.4
          # if npm doesn't work properly
          curl -0 -L https://npmjs.com/install.sh | sudo sh
          deprecated nvm
            update node with nvm
              https://davidwalsh.name/nvm
              sudo npm cache clean -f
              sudo npm install -g n
              nvm ls
              # check local node versions
              nvm ls-remote
              # check available node versions
              nvm install 9.8.0
              nvm install 10.0.0
              # install node version
              nvm use 10.0.0
              # use v 10
        update npm
          sudo npm install -g npm
      repl
        error: invalid repl keyword
          ex:
            request('http://jsonplaceholder.typicode.com/users/1')
              .then( html => console.log('body:', html) )
          cause:
            node's repl has commands that begin with `.` such as `.clear`
          solution:
            request('http://jsonplaceholder.typicode.com/users/1').
              then( html => console.log('body:', html) )
      install tools: npm npx
      string templates
        backtick ` not "
        `//${ocpu_domain}/ocpu/library/stats/R`
      import source require
        local library
          var $ = require("jquery")
        global library
          npm link <library>
          var $ = require("jquery")
      passing server side parameters to client side js
        https://stackoverflow.com/questions/5927824/best-practice-for-passing-server-side-variables-to-javascript
          2 correct ways
            data as a service: REST service for parameter
            inject data into HTML: js will extract it from HTML
        expressjs
          https://stackoverflow.com/questions/10919650/accessing-express-js-local-variables-in-client-side-javascript
            sending data to pug template
              nodejs
                var myMongo = {name: 'stephen'}
                res.render('home', {locals: {data: myMongo}})
              home.pug
                p Hello #{data.name}
              output in html
                Hello stephen
            sending data to client side js
              opt1: data in HTML
                home.pug
                  - local_data = JSON.stringfiy(data)
                  input(type='hidden', value=local_data)#myLocalDataObj
                client side js
                  var localObj = JSON.parse($("#myLocalDataObj").val())
                  console.log(localObj.name)
              opt2: data as rendered js
                script.
                  var local_data = !{JSON.stringify(data)}
              opt2b: 
                nodejs
                  res.render('search-directory', {
                    title: 'My Title',
                    place_urls: JSON.stringify(placeUrls),
                  });
                client js
                  var placeUrls = !{place_urls};
          https://stackoverflow.com/questions/16098397/pass-variables-to-javascript-in-expressjs
            nodejs
              res.render(.., { arg: "arg data" } )
            html
              <script> var arg = .. </script>
            normal data aktarımı 
              h1= title
              p Welcome to #{title}
      dotenv: environment variables configuration
        https://github.com/motdotla/dotenv
          const dotenv = require('dotenv');
          dotenv.load({ path: '.env.example' });
        define in .env
          MONGODB_URI=mongodb://myUserAdmin:12345@localhost:27017/test
        use
          mongoose.connect(process.env.MONGODB_URI);
        define in docker-compose.yml
          environment:
           - MONGODB_URI=mongodb://myUserAdmin:12345@mongo:27017/beyp_poc
      msg: Error: spawn psql ENOENT
        at exports._errnoException (util.js:1036:11)
        at Process.ChildProcess._handle.onexit (internal/child_process.js:193:32)
        at onErrorNT (internal/child_process.js:359:16)
        at _combinedTickCallback (internal/process/next_tick.js:74:11)
        at process._tickCallback (internal/process/next_tick.js:98:9)
        cause
          psql is missing to execute/spawn
          cannot find the program that it tries to spawn
        general debug
          https://stackoverflow.com/questions/27688804/how-do-i-debug-error-spawn-enoent-on-node-js#27883443
      api doc
        https://nodejs.org/api/
      file system io
        ls list files
          ex
            var dir = './'; // your directory
            var files = fs.readdirSync(dir);
          sort files
            files.sort(function(a, b) {
              return fs.statSync(dir + a).mtime.getTime() - 
              fs.statSync(dir + b).mtime.getTime();
            });
      process
        get working directory getwd pwd
          process.cwd()
    npm
      npm i 
        npm i <lib> -D
        npm i <lib> --save-dev
      pnpm: faster npm
        uses symlinks instead of hard files everytime
        install
          npm install -g pnpm
        update
          pnpm install -g pnpm
        usage
          npm init -y
          pnpm install lodash
        commands
          store prune
            remove unreferenced packages
      errors
        node-gyp: gyp ERR! stack You can pass the --python switch to point to Python >= v2.5.0 & < 3.0.0.
          where python
          npm install --python=/usr/bin/python -g underscore-cli
      local npm repository: verdaccio
        https://github.com/verdaccio/verdaccio
        npm install --global verdaccio
        verdaccio
        open http://localhost:4873
        npm adduser --registry  http://localhost:4873
        npm publish --registry http://localhost:4873
        # updating
          npm version <update_type>
            patch, minor, major
        # new package
          npm init -y
      use new local npm module without publishing it every 5 minutes
        ref
          <url:/Users/mertnuhoglu/projects/study/js/study_js.Rmd#tn=### Node.js — How to test your new NPM module without publishing it every 5 minutes - Alex Mills>
        cd <viking-root>
        npm link
        cd <tudor-root>
        npm link viking 
        # create a symlink locally to global viking symlink
        # issues
          bunu yapınca npm i komutunda sorun çıkar
          npm install <lib> yaptıktan sonra yeniden link etmen lazım
    npm cli tools
      http-server
        http-server .
    ramdajs id=g10246
			ramdajs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10246>
			ref
				https://ramdajs.com/docs/
				<url:file:///~/projects/study/js/study_ramda.Rmd>
				<url:/Users/mertnuhoglu/Dropbox/mynotes/content/articles/articles_fp.md#tn=Ex1: Dealing with Null Checks>
					<url:/Users/mertnuhoglu/Dropbox/mynotes/content/articles/articles_fp.md#tn=Functional Programming In JavaScript — With Practical Examples (Part 1)>
					<url:/Users/mertnuhoglu/Dropbox/mynotes/content/articles/articles_fp.md#tn=Ramda By Example>
				<url:file:///~/projects/study/js/study_fp_js.Rmd>
				<url:/Users/mertnuhoglu/projects/study/js/study_frisby_book_adequate_guide_to_fp.Rmd#tn=### Wrapping With `map`>
				<url:file:///~/projects/study/js/ex/study_frisby_flickr_app_support.js>
			ex
				global names:
					R.map(([k, v]) => global[k] = v, R.toPairs(R));
					const fn = compose(toPairs);
			import require
				import * as R from "ramda";
			reduce
			compose
				ex
					const data = [
						{'sub': {'id': 1, 'title': "a"}},
						{'sub': {'id': 2, 'title': "b"}},
					];
					const getId = R.map(R.compose(R.prop('id'), R.prop('sub')));
					console.log(getId(data));
					// [ 1, 2 ]
				ex: equivalent to
					const getId = R.map(e => e.sub.id);
      const newObject = R.omit([propertyToRemove], origObject)
      curry
        returns a curried equivalent of given function
        ex: equivalent calls:
          var g = R.curry(f)
          g(1)(2)
          g(1,2)
        ex: placeholder 
          var _ = R.__
          g(_,2)(1)
        ex
          var addFourNumbers = (a, b, c, d) => a + b + c + d;
          var curriedAddFourNumbers = R.curry(addFourNumbers);
          var f = curriedAddFourNumbers(1, 2);
          var g = f(3);
          g(4); //=> 10
			add
				R.add(2,3)
				R.add(7)(10)
			all
				var equals3 = R.equals(3);
				R.all(equals3)([3,2,3]); //=> false
			allPass
				var isQueen = R.propEq('rank', 'Q');
				var isSpade = R.propEq('suit', 'S');
				var isQueenOfSpades = R.allPass([isQueen, isSpade]);
				isQueenOfSpades({rank: 'Q', suit: 'M'}); //=> false
			always
				var t = R.always('Tee')
				t(); //=> 'Tee'
			and
				R.and(true, true); //=> true
			any
				var lessThan0 = R.flip(R.lt)(0);
				var lessThan2 = R.flip(R.lt)(2);
				R.any(lessThan0)([1,2]); //=> false
			ap
				R.ap([R.multiply(2), R.add(3)], [1,2,3]); 
				//=> [2, 4, 6, 4, 5, 6]
			append 
				R.append('tests', ['write', 'more']);
				//=> ['write', 'more', 'tests']
      assoc
      assocPath
			filter
				var validUsersNamedBuzz = R.filter(R.where({name: 'Buzz', errors: R.isEmpty}));
			flatten
				ex
					R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
					//=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
				see: unnest
      identity
      lens
        returns a lens for given getter and setter functions
        ex
          var xLens = R.lens(R.prop('x'), R.assoc('x'));
          R.view(xLens, {x: 1, y: 2});            //=> 1
          R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
          R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
      lensProp
        ex
          var xLens = R.lensProp('x');
          R.view(xLens, {x: 1, y: 2});            //=> 1
          R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
          R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
      lensPath
        deprecated
        ex
          const twitterLens = lensPath(['socialMedia', 'twitter'])
			map
				ex
					var double = x => x * 2;
					R.map(double, [1, 2, 3]); //=> [2, 4, 6]
					R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
				see: transduce, addIndex
				ex
					const List = items => <ul>{items}</ul>
					const Item = todo => <li key={todo.id}>{todo.text}</li>
					const getTodos = prop('todos')
					const TodoList = compose(List, map(Item), getTodos)
					const props = {todos: [{id:1, text: 'foo'}, {id:2, text: 'bar'}]}
					render(<TodoList {...props} />, document.getElementById('root'))
				ex
					const data = { 'group1-perm1': true, 'group1-perm2': false, 'group2-perm1': false, 'group2-perm2': true, 'perm3': true, 'perm4': false };
					const addLabel = ([value, checked]) => ({value, checked, label: value});
					const fn = compose(map(addLabel), toPairs);
					fn(data)
					// [ { value: 'group1-perm1', checked: true, label: 'group1-perm1' }, ...
			pipe
				ex
					var f = R.pipe(Math.pow, R.negate, R.inc);
					f(3, 4); // -(3^4) + 1
				ex
					const fn = compose(R.groupBy(groupName), map(addLabel), toPairs);
					--->>>>
					const fn = pipe(
						toPairs,
						map(addLabel), 
						R.groupBy(groupName), 
					);
			placeholder
				ex
					g(1,2,3)
					g(_,2,3)(1)
					var greet = R.replace('{name}', R.__, 'Hello, {name}!');
					greet('Alice'); //=> 'Hello, Alice!'
			pluck
			prop
				ref
					<url:/Users/mertnuhoglu/projects/study/js/study_ramda.Rmd#tn=### v05: Null handling with prop>
				ex
					const data = [
						{'id': 1, 'title': "a"},
						{'id': 2, 'title': "b"},
					];
					const getId = R.map(R.prop('id'));
					console.log(getId(data));
					// [ 1, 2 ]
				ex
					const data = [
						{'id': 1, 'title': "a"},
						{},
					];
					const getId = R.map(R.prop('id'));
					console.log(getId(data));
					// [ 1, undefined ]
      set 
        sets the object to the given lens and returns the result
        ex
          var xLens = R.lensProp('x');
          R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
          R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
			unnest 
				= concatAll 
				shorthand: `R.chain(R.identity)`
				ex
					R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
					R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
				see: flatten, chain
		ramdajs fantasy id=g10604
			ramdajs fantasy <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10604>
			deprecated: use sanctuaryjs instead
			Functor
				implements
					map 
				ex
					Array
    rxjs id=g10247
			rxjs <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10247>
      ref
        <url:file:///~/projects/study/js/study_learn_rxjs.Rmd>
        v6 rxjs based cyclejs <url:#r=cjs_003>
      install
        npm install rxjs
      setup example
        es6
          import { Observable, Subject, ReplaySubject, from, of, range } from 'rxjs';
          import { map, filter, switchMap } from 'rxjs/operators';
          range(1, 200)
            .pipe(filter(x => x % 2 === 1), map(x => x + x))
            .subscribe(x => console.log(x));
        nodejs
          const { Observable, Subject, ReplaySubject, from, of, range } = require('rxjs');
          const { map, filter, switchMap } = require('rxjs/operators');
          range(1, 200)
            .pipe(filter(x => x % 2 === 1), map(x => x + x))
            .subscribe(x => console.log(x));
      ex01: setHtml
        const setHtml = id => val => (document.getElementById(id).innerHTML = val);
        const addOneClick$ = id =>
          fromEvent(document.getElementById(id), 'click').pipe(
            // map every click to 1
            mapTo(1),
            startWith(0),
            // keep a running total
            scan((acc, curr) => acc + curr),
            // set HTML for appropriate element
            tap(setHtml(`${id}Total`))
          );
        const combineTotal$ = combineLatest(addOneClick$('red'), addOneClick$('black'))
          .pipe(map(([val1, val2]) => val1 + val2))
          .subscribe(setHtml('total'));
      pluck
        https://www.learnrxjs.io/operators/transformation/pluck.html
      reactivex / rxjs v4
        pluck
          ex
            var source = Rx.Observable
                .from([
                    { value: 0 },
                    { value: 1 },
                    { value: 2 }
                ])
                .pluck('value');
            // => Next: 0
            // => Next: 1
            // => Next: 2
      creation
        create
          ex01
            const hello = Observable.create(function(observer) {
              observer.next('Hello');
              observer.next('World');
            });
            const subscribe = hello.subscribe(val => console.log(val));
    date
      utc gmt 
        utc: coordinated universal time
          this is a standard not a time zone
          but people use it as time zone of GMT as well
        gmt: greenwich mean time
          this is the time zone
      Date.toISOString()
        https://www.ecma-international.org/ecma-262/6.0/#sec-date.prototype.toisostring
        time zone is always UTC, denoted by suffix Z
        ex: 2013-02-04T22:44:30.652Z
      Date Time String Format: Simplification of ISO 8601 Extended Format
        https://www.ecma-international.org/ecma-262/6.0/#sec-date-time-string-format
        YYYY-MM-DDTHH:mm:ss.sssZ
          T: separator
          HH: 00-24
          sss: milliseconds
          Z: time zone
            Z: UTC
            + or -
      Date.toLocaleDateString
      string to date
        opt1: Date.parse()
          Date.parse(dateString)
          dateString in ISO8601 format
          Date.parse("12.04.2017")
          Date.parse("13.04.2017")
            NaN
          Date.parse("12.30.2017")
          new Date("12.30.2017")
          new Date("13.04.2017")
            Invalid
        opt2: moment.js
      new Date
        var today = new Date();
        var birthday = new Date('December 17, 1995 03:24:00');
        var birthday = new Date('1995-12-17T03:24:00');
        var birthday = new Date(1995, 11, 17);
        var birthday = new Date(1995, 11, 17, 3, 24, 0);
      moment
        install
          npm install -g moment
          var moment = require()
        basic
          var now = moment();
        string to date
          moment: string to date
            moment(String, String);
            var dt = moment("1995-12-25", "YYYY-MM-DD");
            # ignores separators:
            moment("12-25-1995", "MM-DD-YYYY");
            moment("12/25/1995", "MM-DD-YYYY");
          moment: multiple options
            moment("12-25-1995", ["MM-DD-YYYY", "YYYY-MM-DD"]);
          unix timestamp 
            (milliseconds)
              var day = moment(1318781876406);
            seconds
              var day = moment.unix(1318781876);
        date to string: format()
          opt1: moment(date).format(str)
            StartDate = moment(StartDate).format('YYYY-MM-DD');
          opt2: moment(new Date(str))
            var dateString = 'Thu Jul 15 2016 19:31:44 GMT+0200 (CEST)';
            var dateObj = new Date(dateString);
            var momentObj = moment(dateObj);
            var momentString = momentObj.format('YYYY-MM-DD'); // 2016-07-15
            moment("25/01/1995", "DD/MM/YYYY").toISOString() // 2013-02-04T22:44:30.652Z
            moment("2017/07/14 18:19", "YYYY/MM/DD HH:mm").toISOString()
            # "2017-07-14T15:19:00.000Z"
            moment("2017/07/14 18:19", "YYYY/MM/DD HH:mm").format() // 2017-07-14T18:19:00+03:00
            moment("2017/07/14 18:19", "YYYY/MM/DD HH:mm").format("YYYY-MM-DDTHH:mm:ss") // 2017-07-14T18:19:00
      iso8601 date formats
        Date: 2017-07-04
        Combined date and time in UTC:  
          2017-07-04T11:24:41+00:00
          2017-07-04T11:24:41Z
          20170704T112441Z
        Week: 2017-W27
        Date with week number:  2017-W27-2
        Date without year:  --07-04
        Ordinal date: 2017-185
      iso8601
        new Date("2017-07-04")
        new Date(Date.parse("2017-07-04"))
        moment("2017-07-04")
    twitter bootstrap id=g10145
      twitter bootstrap <url:file:///~/projects/study/study/study_js.md#r=g10145>
      ref
        bootstrap twitter bootstrap <url:file:///~/Dropbox/mynotes/content/articles/articles_js.md#r=g10186>
      cheatsheets
        https://hackerthemes.com/bootstrap-cheatsheet/
      themes
        dashgum: saf html
        blur: çok güzel, fakat angular
        AdminLTE
        coreui: güzel
        gentetella: çok kapsamlı
      template builders
        free
          http://www.layoutit.com/build
          http://angrytools.com/bootstrap/editor/
          https://pingendo.com/new
        http://bootstrapstarterkit.com
        https://mobirise.com
        brix.io
        http://www.cssauthor.com/bootstrap-editors/
        http://mashable.com/2013/10/20/bootstrap-editors/#2EoYSV03PaqW
      intellij support
        bootstrap templates
          bs3-...
          shortcut: #j
      bootstrap setup
        opt1: bower
          http://stackoverflow.com/questions/36160883/getting-start-with-node-express-and-bootstrap
            sudo npm install bower -g
            nano .bowerrc
            {
            "directory":"./public"
            }
            bower install bootstrap --save
        opt2: manual
      tabs in bootstrap
        http://getbootstrap.com/javascript/#tabs
          opt1: only markup
            <ul class="nav nav-tabs" role="tablist">
              <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">Home</a></li>
            <div class="tab-content">
              <div role="tabpanel" class="tab-pane active" id="home">tab1</div>
    typescript # typescript id=g10209
      typescript <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10209>
      reference
        Compiler Options
          https://www.typescriptlang.org/docs/handbook/compiler-options.html
          --skiplibcheck
            Skip type checking of all declaration files (*.d.ts).
      install
        npm install -g typescript
        npm install -g ts-node
      errors
				Duplicate identifier 
					same identifier cannot be declared in the same folder if there is no export 
					After adding one `export` it is fixed
        ts-node error but tsc compiler produces js files
          you can run generated js files even ts-node doesn't run
        Error:(21, 36) TS7006:Parameter 'prevState' implicitly has an 'any' type.
          remove this from tsconfig.json:
            "noImplicitAny": true,
            --noImplicitAny
        error TS2451: Cannot redeclare block-scoped variable 'a'.
				cannot find name Map
					https://stackoverflow.com/questions/35660498/angular-cant-find-promise-map-set-and-iterator
						npm install --save-dev @types/core-js
						tsconfig.json
							"types": ["core-js"]
      issues
        tsconfig.json
          how to run tsc
            opt01: use tsc with source file directly
              tsc ex01.ts
              this ignores tsconfig.json
            opt02: use tsc only
              tsc
              this searches for tsconfig.json from current dir then from parent
            opt03: --project -p
              tsc -p tsconfig.json
              explicitly point to tsconfig.json
          init
            npx tsc --init
          --outDir
            --rootDir ile birlikte kullan
            "compilerOptions": {
              "rootDir": "./src",
              "outDir": "./lib",
        Type[] vs Array<Type>
          https://stackoverflow.com/questions/36842158/arraytype-vs-type-in-typescript
          http://www.typescriptlang.org/docs/handbook/generics.html#working-with-generic-type-variables
          they are the same
        string vs String
          https://stackoverflow.com/questions/14727044/typescript-difference-between-string-and-string
          best:
            var s3: string = "..."
          it is ok:
            var s1 = new String("Avoid newing things where possible");
            var s2 = "A string, in TypeScript of type 'string'";
            var str: String = new String("Hello world"); // Uses the JavaScript String object
            var str: string = String("Hello World"); // Uses the TypeScript string type
        call constructor vs new
          https://stackoverflow.com/questions/32807163/call-constructor-on-typescript-class-without-new
          The keyword new is required for ES6 classes:
          before these were equivalent
            var a = new MyClass(5);
            var b = MyClass(5);
      running ts scripts
        opt1: tsc + node
          tsc ex01.ts
          node ex01.js
        opt2: ts-node
          ts-node ex01.ts
        opt3: tsc --watch
          tsc ex01.ts --watch
        opt4: from vim
          nnoremap <Leader>üt :call BuildAndRunTypeScript()<cr>
            :!ts-node % | tee >(pbcopy)
        opt5: from intellij
      keyof
        Index Types
          http://www.typescriptlang.org/docs/handbook/advanced-types.html
          to check code that uses dynamic property names
          ex: 
            pluck function
              function pluck(o, names) {
                return names.map(n => o[n])
              }
            in typescript
              function pluck<T, K extends keyof T>(o: T, names: K[]): T[K][] {
                return names.map(n => o[n])
              }
              interface Person {
                name: string
                age: number
              }
              let person: Person = {
                name: 'Jarid',
                age: 35
              }
              let strings: string[] = pluck(person, ['name'])
          ex:
            let personProps: keyof Person; // 'name' | 'age'
      interfaces
        https://www.typescriptlang.org/docs/handbook/interfaces.html
        Function Types 
          ex:
            interface definition:
              interface SearchFunc {
                  (source: string, subString: string): boolean;
              }
            this is nearly equivalent to:
              function SearchFunc(source: string, subString: string): boolean
            using
              let mySearch: SearchFunc;
              mySearch = function(source: string, subString: string) {
                  let result = source.search(subString);
                  return result > -1;
              }
      articles
				Painting app for STEM 
					https://github.com/bradymholt/the-painting-app
				CLI apps in TypeScript via ts-node id=g10666
					CLI apps in TypeScript via ts-node <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10666>
					https://www.geekytidbits.com/cli-apps-in-typescript-via-ts-node/
					cli.ts
						export function run() {
							const message: string = "Hello from TypeScript!";
							console.log(message);
						}
					my-script
						#!/usr/bin/env node
						require('ts-node').register();
						require('./cli.ts').run();
					> ./my-script
						Hello from TypeScript!
				Five tips I wish I knew when I started with Typescript id=g10227
					Five tips I wish I knew when I started with Typescript <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10227>
					https://codeburst.io/five-tips-i-wish-i-knew-when-i-started-with-typescript-c9e8609029db
					Strict configuration
						tsconfig.json
							"forceConsistentCasingInFileNames": true,
							"noImplicitReturns": true,
							"strict": true,
							"noUnusedLocals": true,
						strict: true
							noImplicitAny
								ex
									const fn = (foo) => foo.bar;
								foo is of type any implicitly
								this is evil
							noImplicitThis
							alwaysStrict
							strictNullChecks
								never try to access a property of null
								ex
									interface Foo {
										bar: string;
									}
									const fn = (foo?: Foo) => foo.bar;
								foo is optional. Thus it can be undefined. Thus ts will not compile.
						tslint
							"no-any": true
							won't allow explicit "any"
					Type inference
						always let the compiler automatically deduce the type for you
						avoid being explicit 
						check type by hovering with cursor
						type guards leverage type inference
							code
								interface Fish {
									fin: number;
								}
								interface Cat {
									legs: {
										number: number;
									}
								}
								type Animal = Fish | Cat
								const myAnimal: Animal = {
									legs: { number: 2 }
								};
								const isFish = (animal: Animal): animal is Fish => (<Fish>animal).fin !== undefined
								if (isFish(myAnimal)) {
									console.log(myAnimal.fin);
								} else {
									console.log(myAnimal.legs.number);
								};
					Managing non existing values (null undefined)
						use undefined instead of null
						tslint
							{"no-null-keyword": true}
						ex: use type guard to unwrap optional user
							type Optional<T> = T | undefined
							let user: Optional<User>
							let user: User | undefined // equivalent
							const getFirstName = (user?: User) => {
								if(user) {
									return user.firstName;
								}
								return 'no name';
							}
							let user: Optional<User>;
							console.log(getFirstName(user)); // "no name"
						what about bang operator "!"
							ex
								const getFirstName = (user?: User) => {
									return user!.firstName;
								}
							exclamation mark cast to type T minus undefined
							so it doesn't handle undefined case
							ex
								["test", "hello"].find(el => el === "hello")!;
								find(predicate: (obj: Array<T>) => boolean): T | undefined; // type definition
					Runtime check
						check at runtime input data
						use ajv tool
					Type abstractions
						Generics
				TypeScript 2.1 and the power of pick
					https://medium.com/@curtistatewilkinson/typescript-2-1-and-the-power-of-pick-ff433f1e6fb
					interfaces are built up from one another, either defining a property of an interface as another interface, or making use of the “extends” keyword
						ex
							interface PartialTask {
								id: string,
								name: string,
								contacts: any[], //for brevity
							}
							interface Task extends PartialTask{
								associatedJob: string,
								...
							}
					alternatives to this
						Partial
							ex
								interface Task {
								 id: string,
								 name: string,
								 assignee: string,
								 contacts: any[], //for brevity
								 ...
								}
								type PartialTast = Partial<Task>
							creates a clone but with all optional properties
						Pick
							break the interface down instead of built it up
							ex
								type PartialTast = Pick<Task, 'id' | 'name' | 'contacts'>
							now we have an interface that defines a Task without a chain of "extends"
				Advanced TypeScript Types with Examples
					https://levelup.gitconnected.com/advanced-typescript-types-with-examples-1d144e4eda9e
					Record
						to create a typed map
						useful to make composite interfaces
						ex
							const SERVICES: Record<string, string> = { 
									doorToDoor: "delivery at door",
									airDelivery: "flying in",
									specialDelivery: "special delivery",
									inStore: "in-store pickup",
							};
				Advanced Types - Typescript Handbook id=g10226
					Advanced Types - Typescript Handbook <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10226>
					https://www.typescriptlang.org/docs/handbook/advanced-types.html
					ref
						article: Advanced Types - Typescript Handbook <url:file:///~/projects/study/js/study_ts.Rmd#r=g10224>
					Intersection Types
						def
							A & B
							has all members of A and B
					Union Types
						def
							number | string
							ex: Either a number or a string
					Type Guards and Differentiating Types
						def
							Type guards perform a runtime check that assures the type in some scope
						ex
							Define a function whose return type is a type predicate:
							code
								function isFish(pet: Fish | Bird): pet is Fish {
										return (<Fish>pet).swim !== undefined;
								}
								if (isFish(pet)) {
										pet.swim();
								}
								else {
										pet.fly();
								}
						type predicate
							ex: pet is Fish
					`typeof` type guards
						def
							Defining a function for each type predicate is difficult. 
							Alternative solution: `typeof x === "number"`
						`typeof` checks only: `number`, `string`, `boolean`, `symbol`
					`instanceof` type guards
						def
							`instanceof` narrows types using their constructor function.
							The rhs must be a constructor function.
						code
							if (padder instanceof SpaceRepeatingPadder) {
								padder; // type narrowed to 'SpaceRepeatingPadder'
							}
					Nullable types
						def
							TS has two special types: `null` `undefined`
							They can be assigned to anything. They are valid values of every type.
							This is "billion dollar mistake" according to Tony Hoare.
							`--strictNullChecks` flag prevents this. 
						code
							let sn: string | null = "bar";
							sn = null; // ok
							sn = undefined; // error, 'undefined' is not assignable to 'string | null'
					Optional parameters and properties
						`--strictNullChecks` adds `| undefined` automatically to optional parameters and properties:
						ex
							function f(x: number, y?: number) {..}
							f(1, null); // error, 'null' is not assignable to 'number | undefined'
					Type Guards and Type Assertions
						def
							To get rid of `null` you need type guard.
					Type Aliases
						def
							Type aliases create a new name for a type.
						ex
							type Name = string 
							type NameResolver = () => string;
							type NameOrResolver = Name | NameResolver;
					Interfaces vs. Type Aliases
					String Literal Types
						def
							Enum-like behavior
							type Easing = "ease-in" | "ease-out" | "ease-in-out";
							animate(dx: number, dy: number, easing: Easing) {
					Numeric Literal Types
					Enum Member Types
					Discriminated Types
						def
							Three parts:
							1. discriminant
							2. union
							3. type guards on common property
						ex
							interface Square { kind: "square"; size: number; }
							type Shape = Square | Rectangle | Circle
							function area(s: Shape) {
								switch (s.kind) {
									case "square": return s.size * s.size;
					Exhaustiveness Checking:
						def
							`never` type checks for exhaustiveness:
						ex
							function assertNever(x: never): never { throw new Error("Unexpected object: " + x); }
							function area(s: Shape) {
								switch (s.kind) {
									case "square": return s.size * s.size;
									case "rectangle": return s.height * s.width;
									case "circle": return Math.PI * s.radius ** 2;
									default: return assertNever(s); // error here if there are missing cases
					Polymorphic `this` types
						def
							`this` is any subtype of the containing class or interface. This is called F-bounded polymorphism.
						ex
							class BasicCalculator {
								public add(operand: number): this {...
							let v = new BasicCalculator(2)
								.multiply(5)
								.add(1)
					Index Types
						def
							Compiler checks code that uses dynamic property names. 
						ex
							let personProps: keyof Person; // 'name' | 'age'
						`keyof T`: the index type query operator
							keyof T is the union of property names of T
						`T[K]`: the indexed access operator
					Index types and string index signatures
						`T[string]` is the type of the index signature
					Mapped types
						def
							ex: Take an existing type. Make its properties optional:
						ex
							type Readonly<T> = {
								readonly [P in keyof T]: T[P];
							}
							type Partial<T> = {
								[P in keyof T]?: T[P];
							}
							type PersonPartial = Partial<Person>;
							type ReadonlyPerson = Readonly<Person>;
					Inference from mapped types
				TypeScript Deep Dive id=g10228
					TypeScript Deep Dive <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10228>
					https://basarat.gitbooks.io/typescript/content/docs/getting-started.html
					Run TypeScript with NodeJs
						https://basarat.gitbooks.io/typescript/content/docs/quick/nodejs.html
						intro
							npm init -y
							npm i typescript -D
							npm i @types/node -D
							npx tsc --init
								module:commonjs
							alm -o
							# use node modules 
								import fs = require('fs')
						live compile + run
							npm i ts-node -D
							npm i nodemon -D
							package.json
								"scripts": {
									"start": "npm run build:live",
									"build:live": "nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts"
								},
						file structure
							tsconfig.json
								"outDir": "lib"
								"declaration": true
								include: ["./src/**/*"]
							package.json
								"main": "lib/index"
								"types": "lib/index"
					01 Getting Started 
						Why Typescript  
							js is ts
							types can be implicit
							types can be explicit
							types are structural
							type errors dont prevent js emit
							types can be ambient
								ex
									declare var $: any
									$('.avesome').show()
								you can add type information
								ex
									declare var $: {
										(selector:string): any
									}
							future js now
					02 Your Js is Ts
						intro 
							coffeescript: new syntax but doesn't help fix bugs
							dart: too far from runtimes, communities
						making js better
							ex
								[] + []
								{} + []
								"hello" - 1
						Equality
							intro
								== vs ===
								ts error:
									5 == "5"
									5 === "5"
								always use === and !==
									for null checks
							Structural Equality
								ex: === not sufficient
									console.log({a:123} == {a:123}); // False
									console.log({a:123} === {a:123}); // False
								deep-equal:
									import * as deepEqual from "deep-equal";
									console.log(deepEqual({a:123},{a:123})); // True
						References
							any object is reference
							Mutations are across all references
								var foo = {};
								var bar = foo; // bar is a reference to the same object
								foo.baz = 123;
								console.log(bar.baz); // 123
							Equality is for references
								var foo = {};
								var bar = foo; // bar is a reference
								var baz = {}; // baz is a *new object* distinct from `foo`
								console.log(foo === bar); // true
								console.log(foo === baz); // false
						Null vs. Undefined
							Checking for either
								== check 
									/// Imagine you are doing `foo.bar == undefined` where bar can be one of:
									console.log(undefined == undefined); // true
									console.log(null == undefined); // true
									// You don't have to worry about falsy values making through this check
									console.log(0 == undefined); // false
									console.log('' == undefined); // false
									console.log(false == undefined); // false
								== null to check for both
									arg != null
							Checking for root level undefined
								if at global level use `typeof`
									typeof someglobal !== 'undefined'
								better: always use modules
							Limit explicit use of undefined
								function foo(){
									// if Something
									return {a:1,b:2};
									// else
									return {a:1,b:undefined};
								}
								-->
								function foo():{a:number,b?:number}{
									// if Something
									return {a:1,b:2};
									// else
									return {a:1};
								}
							Node style callbacks
								ex: err is null if no error
									fs.readFile('someFile', 'utf8', (err,data) => {
										if (err) {
											// do something
										} else {
											// no error
										}
									});
								better: use promises
							Don't use undefined as a means of denoting validity
								function toInt(str:string) {
									return str ? parseInt(str) : undefined;
								}
								-->>
								function toInt(str: string): { valid: boolean, int?: number } {
									const int = parseInt(str);
									if (isNaN(int)) {
										return { valid: false };
									}
									else {
										return { valid: true, int };
									}
								}
						this
							referred to as the “calling context.”
							function foo() {
								console.log(this);
							}
							foo(); // logs out the global e.g. `window` in browsers
							let bar = {
								foo
							}
							bar.foo(); // Logs out `bar` as `foo` was called on `bar`
						Closure
							intro
								The variables in the outer function have been closed by (or bound in) the inner function. Hence the term closure. 
								ex
									function outerFunction(arg) {
											var variableInOuterFunction = arg;
											function bar() {
													console.log(variableInOuterFunction); // Access a variable from the outer scope
											}
											// Call the local function to demonstrate that it has access to arg
											bar();
									}
									outerFunction("hello closure"); // logs hello closure!
								The inner function can access the variables from the outer scope even after the outer function has returned.
								ex
									function outerFunction(arg) {
											var variableInOuterFunction = arg;
											return function() {
													console.log(variableInOuterFunction);
											}
									}
									var innerFunction = outerFunction("hello closure!");
									// Note the outerFunction has returned
									innerFunction(); // logs hello closure!
						Reason why it's awesome
						Number
							Decimal
								console.log(.1 + .2); // 0.30000000000000004
								For true decimal math use big.js 
							big.js
								npm install big.js @types/big.js
								import { Big } from 'big.js';
								export const foo = new Big('111.11111111111111111111');
								export const bar = foo.plus(new Big('0.00000000000000000001'));
								// To get a number:
								const x: number = Number(bar.toString()); // Loses the precision
							NaN
								console.log(Math.sqrt(-1)); // NaN
								Note: Equality checks don't work on NaN values. Instead use Number.isNaN instead:
								// Don't do this
								console.log(NaN === NaN); // false!!
								// Do this
								console.log(Number.isNaN(NaN)); // true
					03 Future JavaScript Now
						Classes
							constructor
								class Foo {
										x: number;
										constructor(x:number) {
												this.x = x;
										}
								}
								-->>
								class Foo {
										constructor(public x:number) {
										}
								}
							property initilazer
						Classes Emit
						Arrow Functions
							Quick object return
								// WRONG WAY TO DO IT
								var foo = () => {
										bar: 123
								};
								-->>
								var foo = () => ({
										bar: 123
								});
						Rest Parameters
							function iTakeItAll(first, second, ...allOthers) {
									console.log(allOthers);
							}
							iTakeItAll('foo', 'bar'); // []
							iTakeItAll('foo', 'bar', 'bas', 'qux'); // ['bas','qux']
						let
							`var` is function scope
							let/const are block scope
							ex: function scope
								var foo = 123;
								if (true) {
										var foo = 456;
								}
								console.log(foo); // 456
							functions create a new variable scope
								var foo = 123;
								function test() {
										var foo = 456;
								}
								test();
								console.log(foo); // 123
							let in closures
								ex
									var funcs = [];
									// create a bunch of functions
									for (var i = 0; i < 3; i++) {
											funcs.push(function() {
													console.log(i);
											})
									}
									// call them
									for (var j = 0; j < 3; j++) {
											funcs[j]();
									}
									// 3 3 3
									--->>>
									var funcs = [];
									// create a bunch of functions
									for (let i = 0; i < 3; i++) { // Note the use of let
											funcs.push(function() {
													console.log(i);
											})
									}
						const
							const declarations must be initialized
								const foo; // ERROR: const declarations must be initialized
						Destructuring
							intro
								structuring in JavaScript is the object literal:
								var foo = {
										bar: {
												bas: 123
										}
								};
							Object Destructuring
								ex
									var rect = { x: 0, y: 10, width: 15, height: 20 };
									// Destructuring assignment
									var {x, y, width, height} = rect;
									console.log(x, y, width, height); // 0,10,15,20
									rect.x = 10;
									({x, y, width, height} = rect); // assign to existing variables using outer parentheses
									console.log(x, y, width, height); // 10,10,15,20
								deep data
									var foo = { bar: { bas: 123 } };
									var {bar: {bas}} = foo; // Effectively `var bas = foo.bar.bas;`
								Object Destructuring with rest
									ex
										var {w, x, ...remaining} = {w: 1, x: 2, y: 3, z: 4};
										console.log(w, x, remaining); // 1, 2, {y:3,z:4}
									ex: ignore some properties
										// Example function
										function goto(point2D: {x: number, y: number}) {
											// Imagine some code that might break
											// if you pass in an object
											// with more items than desired
										}
										// Some point you get from somewhere
										const point3D = {x: 1, y: 2, z: 3};
										/** A nifty use of rest to remove extra properties */
										const { z, ...point2D } = point3D;
										goto(point2D);
								array destructuring
									ex
										var x = 1, y = 2;
										[x, y] = [y, x];
										console.log(x, y); // 2,1
								array destructuring with rest
									var [x, y, ...remaining] = [1, 2, 3, 4];
									console.log(x, y, remaining); // 1, 2, [3,4]
								array destructuring with ignore
									var [x, , ...remaining] = [1, 2, 3, 4];
									console.log(x, remaining); // 1, [3,4]
						Spread Operator
							to spread elements of an array/object
							Apply
								function foo(x, y, z) { }
								var args = [0, 1, 2];
								foo.apply(null, args);
								--->>>
								function foo(x, y, z) { }
								var args = [0, 1, 2];
								foo(...args);
							Array assignment
								var list = [1, 2];
								list = [...list, 3, 4];
								console.log(list); // [1,2,3,4]
							object spread
								const foo = {a: 1, b: 2, c: 0};
								const bar = {c: 1, d: 2};
								/** Merge foo and bar */
								const fooBar = {...foo, ...bar};
								// fooBar is now {a: 1, b: 2, c: 1, d: 2}
						for...of forof forin
							for...in for an array iterates over the keys
							ex
								var someArray = [9, 2, 5];
								for (var item in someArray) {
										console.log(item); // 0,1,2
								}
							ex: for of
								var someArray = [9, 2, 5];
								for (var item of someArray) {
										console.log(item); // 9,2,5
								}
							ex: string
								var hello = "is it me you're looking for?";
								for (var char of hello) {
										console.log(char); // is it me you're looking for?
								}
						Iterators
						Template Strings
							String Interpolation
								console.log(`1 and 1 make ${1 + 1}`);
							Multiline Strings
								var lyrics = `Never gonna give you up
								Never gonna let you down`;
							Tagged Templates
						Promise
						Generators
						Async Await
						Project
							Compilation Context
								which compiler options are in use: tsconfig.json
								tsconfig.json
									basic 
										{}
										ts will include all .ts files in this directory
									compilerOptions
										{
											"compilerOptions": {
												/* Basic Options */                       
												"target": "es5",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */
												"module": "commonjs",                  /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'. */
												"lib": [],                             /* Specify library files to be included in the compilation:  */
												"allowJs": true,                       /* Allow javascript files to be compiled. */
												...
								Which Files?
									opt1
										"files":[
												"./some/file.ts"
										]
									opt2
										"include":[
												"./folder"
										],
										"exclude":[
												"./folder/**/*.spec.ts",
												"./folder/someSubFolder"
										]
							Declaration Spaces
								ex: type declarations
									class Foo {};
									interface Bar {};
									type Bas = {};
								ex: type annotations
									var foo: Foo;
									var bar: Bar;
									var bas: Bas;
								ex: but interface don't contribute to variable declaration space
									interface Bar {};
									var bar = Bar; // ERROR: "cannot find name 'Bar'"
								Variable Declaration Space
									ex: class contributes both to type and variable declaration spaces
										class Foo {};
										var someVar = Foo;
										var someOtherVar = 123;
									ex: variables cant be used as type annotations
										var foo = 123;
										var bar: foo; // ERROR: "cannot find name 'foo'"
							Modules
								Global Module
									By default: you type code in global namespace
									foo.ts
										var foo = 123;
									then from any file in the same project, you can access `foo`
								File Module
									aka external modules
									if you have an import/export, then it creates a local scope
									foo.ts
										export var foo = 123
								External Modules
									Clarification: commonjs, amd, es modules, others
										options for generating the javascript
											`module` option
											amd: don't use. was browser only
											systemjs: superseded by es modules
											es modules: not ready yet
											commonjs: best
										how to write ts modules?
											not to do:
												import foo = require('foo')
											use es module syntax
										tsconfig.json
											module:commonjs
									ES Module Syntax id=g10602
										ES Module Syntax  <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10602>
										ex
											// file `foo.ts`
											export let someVar = 123;
											export type SomeType = {
												foo: string;
											};
										ex
											// file `foo.ts`
											let someVar = 123;
											type SomeType = {
												foo: string;
											};
											export {
												someVar,
												SomeType
											};
										ex: exporting with renaming
											// file `foo.ts`
											let someVar = 123;
											export { someVar as aDifferentName };
										ex: import
											// file `bar.ts`
											import { someVar, SomeType } from './foo';
										ex: import with renaming
											// file `bar.ts`
											import { someVar as aDifferentName } from './foo';
										ex: import everything
											// file `bar.ts`
											import * as foo from './foo';
											// you can use `foo.someVar` and `foo.SomeType` and anything else that foo might export.
										ex: import only for side effects
											import 'core-js'; // a common polyfill library
										ex: re-exporting
											export * from './foo';
											export { someVar } from './foo';
											export { someVar as aDifferentName } from './foo';
									Default exports/imports
										ex
											// some var
											export default someVar = 123;
											// OR Some function
											export default function someFunction() { }
											// OR Some class
											export default class SomeClass { }
											import someLocalNameForThisFile from "../foo";
									Module paths
									What is place
										`foo` a place
											foo.ts
											foo/index.ts
											foo/package.json with {types}
											foo/package.json with {main}
								File Module Details
								globals.d.ts
							Namespaces
							Dynamic Import Expressions
						Node.js QuickStart
						Browser QuickStart
						TypeScript's Type System
							JS Migration Guide
							@types
							Ambient Declarations
								Declaration Files
								Variables
							Interfaces
							Enums
							lib.d.ts
							Functions
							Callable
							Type Assertion
							Freshness
							Type Guard
							Literal Types
							Readonly
							Generics
							Type Inference
							Type Compatibility
							Never Type
							Discriminated Unions
							Index Signatures (index types) id=g10230
								Index Signatures (index types) <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10230>
								in js:
									any object can be used as index 
									ex
										let obj = {
											toString(){
												console.log('toString called')
												return 'Hello'
											}
										}
										let foo:any = {};
										foo[obj] = 'World'; // toString called
										console.log(foo[obj]); // toString called, World
										console.log(foo['Hello']); // World
									js calls toString on obj
								in ts
									ts only allows string or number as index key
								declaring an index signature
									ex:
										how to make anything that is stored in an object using a string conforms to the structure `{message: string}`
										code
											[index: string] : {message: string}
										full
											let foo:{[index: string] : {message: string}} = {}
											foo['a'] = {message: 'some'}
											foo['a'].message
											foo['a'].messages // error
										note: name of index key eg. `index` in "{[index: string] : {message: string}}" has no significance
									ex: number index
										{ [count: number] : A }
								all members must conform to the `string` index signature
									if you have a `string` index signature
										then all explicit members must conform to it
									ex
										/** Okay */
										interface Foo {
											[key:string]: number
											x: number;
											y: number;
										}
										/** Error */
										interface Bar {
											[key:string]: number
											x: number;
											y: string; // ERROR: Property `y` must be of type number
										}
								using a limited set of string literals
									index strings can be members of a union of literal strings by using Mapped Types
									ex
										type Index = 'a' | 'b' | 'c'
										type FromIndex = { [k in Index]?: number }
										const good: FromIndex = {b:1, c:2}
										const bad: FromIndex = {b:1, c:2, d:3};
										// Error:
										// Type '{ b: number; c: number; d: number; }' is not assignable to type 'FromIndex'.
										// Object literal may only specify known properties, and 'd' does not exist in type 'FromIndex'.
									this can be used with `keyof A`
							Moving Types
								Copying both the Type + Value
							Exception Handling
							Mixins
						JSX
					04 Project
						Compilation Context
							tsconfig.json
							Which Files?
						Declaration Spaces
						Modules
							File Module Details
							globals.d.ts
						Namespaces
						Dynamic Import Expressions
					Node.js QuickStart
					Browser QuickStart
					TypeScript's Type System id=g10225
						TypeScript's Type System <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10225>
						intro 
							Primitive Types
								var num: number;
								var str: string;
								var bool: boolean;
							Arrays
								var boolArray: boolean[];
							Interfaces
								interface Name {
										first: string;
										second: string;
								}
							Inline Type Annotation
								var name: {
										first: string;
										second: string;
								};
							Special Types
								any
								null undefined
								:void
							Generics
								function fn<T>(items: T[]): T[] {..}
							Union
								a: string[]|string
							Intersection Type
								function extend<T, U>(first: T, second: U): T & U
							Tuple Type
								var a: [string, number]
								a = ['ali', 10]
							Type Alias
								type Text = string | { text: string };
								type Coordinates = [number, number];
								type Callback = (data: string) => void;
								type StrOrNum = string|number
								var a: StrOrNum
								a = 123
								a = '123'
						JS Migration Guide
							steps
								add tsconfig.json
								change extensions: js to ts
								use any to suppress errors
								use type annotations instead of any 
								use ambient definitions for 3rd party js libraries
							Suppressing errors
								ex
									var foo = 123;
									var bar = 'hey';
									bar = foo; // ERROR: cannot assign a number to a string
								ex: use any -->>
									var foo = 123;
									var bar = 'hey';
									bar = foo as any; // Okay!
								ex
									function foo() {
											return 1;
									}
									var bar = 'hey';
									bar = foo(); // ERROR: cannot assign a number to a string
								ex: suppressed -->>
									function foo(): any { // Added `any`
											return 1;
									}
									var bar = 'hey';
									bar = foo(); // Okay!
							3rd party js
								use @types but alternatively:
								ex: jquery.d.ts
									declare var $: any
								ex
									declare type JQuery = any;
									declare var $: JQuery;
							3rd party NPM modules
								you can  declare a global module
								ex: jquery.d.ts
									declare module "jquery"
									// using:
									import * as $ from "jquery"
							External non js resources
								ex: globals.d.ts
									declare module "*.css"
									// using:
									import * as foo from "./file.css"
						@types
							Using @types
								ex: install
									npm install @types/jquery -D
							Global @types
								better: use modules
							Module @types
								ex
									import * as $ from "jquery"
						Ambient Declarations
							intro
								goal: to safely use existing js libraries
							Declaration Files
								ex
									foo = 123; // Error: `foo` is not defined
									-->>
									declare var foo: any;
									foo = 123; // allowed
							Variables
								ex: tell ts about process variable
									declare var process: any
								use interfaces when possible
									ex:
									interface Process {
										exit(code?: number): void
									}
									declare var process: Process
								this allows other people to extend these global variables
						Interfaces
							they have zero runtime js impact
							alternative: inline annotation
								ex
									// Sample A
									declare var myPoint: { x: number; y: number; };
									// Sample B
									interface Point {
											x: number; y: number;
									}
									declare var myPoint: Point;
							interface allows extending later with new members
								ex
									// Lib a.d.ts
									interface Point {
											x: number; y: number;
									}
									declare var myPoint: Point;
									// Lib b.d.ts
									interface Point {
											z: number;
									}
									// Your code
									var myPoint.z; // Allowed!
								interfaces are open ended
							Classes can implement interfaces
								ex
									interface Point {
											x: number; y: number;
									}
									class MyPoint implements Point {
											x: number; y: number; // Same as Point
									}
								any change in Point interface will result in a compile error to keep it in sync
							Not every interface is implementable easily
								ex
									interface Crazy {
											new (): {
													hello: number
											};
									}
									class CrazyClass implements Crazy {
											constructor() {
													return { hello: 123 };
											}
									}
									// Because
									const crazy = new CrazyClass(); // crazy would be {hello:123}
						Enums
							ex
								enum CardSuit {
										Clubs,
										Diamonds,
										Hearts,
										Spades
								}
								// Sample usage
								var card = CardSuit.Clubs;
								// Safety
								card = "not a member of card suit"; // Error : string is not assignable to type `CardSuit`
						lib.d.ts
							a special declaration file `lib.d.ts`
							it contains ambient declarations for js constructs in js runtime and DOM
							ex
								var foo = 123;
								var bar = foo.toString();
							this works because `lib.d.ts` contains `toString`
							inside look
								variable declarations for window, document, math and interface declarations Window, Document, Math
								ex
									declare var window: Window
								ex: Math
									declare var Math: Math
									interface Math { ... }
								to extend Math, add new members to interface
								ex
									interface Math { seedrandom(seed?: string) }
						Functions
							Parameter annotations
								ex
									function foo(param: {bar: number}) {}
							Return type annotation
								ex
									interface Foo { foo: string }
									function foo(sample: Foo): Foo { return sample }
							Optional parameters
								ex
									function foo(bar: number, bas?: string): void {
											// ..
									}
									foo(123);
									foo(123, 'hello');
								ex: default value
									function foo(bar: number, bas: string = 'hello') {
							Overloading
								ex
									function padding(a: number, b?: number, c?: number, d?: any) {
											if (b === undefined && c === undefined && d === undefined) {
													b = c = d = a;
											}
											else if (c === undefined && d === undefined) {
													c = a;
													d = b;
											}
								ex
									// Overloads
									function padding(all: number);
									function padding(topAndBottom: number, leftAndRight: number);
									function padding(top: number, right: number, bottom: number, left: number);
									// Actual implementation that is a true representation of all the cases the function body needs to handle
									function padding(a: number, b?: number, c?: number, d?: number) {
						Callable
							ex
								interface ReturnString {
									(): string
								}
							ex: usage
								declare const foo: ReturnString;
								const bar = foo(); // bar is inferred as a string
							ex: overloaded
								interface Overloaded {
										(foo: string): string
										(foo: number): number
								}
								// example implementation
								function stringOrNumber(foo: number): number;
								function stringOrNumber(foo: string): string;
								const overloaded: Overloaded = stringOrNumber;
								// example usage
								const str = overloaded(''); // type of `str` is inferred as `string`
								const num = overloaded(123); // type of `num` is inferred as `number`
							ex: inline
								const overloaded: {
									(foo: string): string
									(foo: number): number
								} = (foo: any) => foo;
							Arrow Syntax
								ex
									const simple: (foo: number) => string
											= (foo) => foo.toString();
								but you can't specify overloads
							Newable
								interface CallMeWithNewToGetString {
									new(): string
								}
								// Usage
								declare const Foo: CallMeWithNewToGetString;
								const bar = new Foo(); // bar is inferred to be of type string
						Type Assertion
							similar to casting
							to override inferred types
								you tell the compiler what is the type
								ex: error without type assertion
									var foo = {};
									foo.bar = 123; // Error: property 'bar' does not exist on `{}`
									foo.bas = 'hello'; // Error: property 'bas' does not exist on `{}`
								why?
									because type of foo: {} doesn't have any property
								ex: fix
									interface Foo {
											bar: number;
											bas: string;
									}
									var foo = {} as Foo;
									foo.bar = 123;
									foo.bas = 'hello';
							`as foo` vs. `<foo>` (Type Assertion vs Casting)
								original syntax: <foo> obj
									runtime cast
								ex:
									var foo: any;
									var bar = <string> foo; // bar is now of type "string"
								this has ambiguity with JSX
							Type Assertion vs. Casting
								casting: runtime support
								type assertions: compile-time cast
							Assertion considered harmful
								ex: forgetting actually add the properties you promised
									interface Foo {
											bar: number;
											bas: string;
									}
									var foo = {} as Foo;
									// ahhhh .... forget something?
								ex: using assertion for autocomplete
									interface Foo {
											bar: number;
											bas: string;
									}
									var foo = <Foo>{
											// the compiler will provide autocomplete for properties of Foo
											// But it is easy for the developer to forget adding all the properties
											// Also this code is likely to break if Foo gets refactored (e.g. a new property added)
									};
								better way:
									interface Foo {
											bar: number;
											bas: string;
									}
									var foo:Foo = {
											// the compiler will provide autocomplete for properties of Foo
									};
							Double Assertion
						Freshness
							aka: strict object literal checking
								to make it easier to type check object literals
							structural typing is very convenient
							ex: like duck typing
								function logName(something: { name: string }) {
										console.log(something.name);
								}
								var person = { name: 'matt', job: 'being awesome' };
								var animal = { name: 'cow', diet: 'vegan, but has milk of own species' };
								var random = { note: `I don't have a name property` };
								logName(person); // okay
								logName(animal); // okay
								logName(random); // Error: property `name` is missing
							ex: but this doesn't work with object literals
								function logName(something: { name: string }) {
										console.log(something.name);
								}
								logName({ name: 'matt' }); // okay
								logName({ name: 'matt', job: 'being awesome' }); // Error: object literals must only specify known properties. `job` is excessive here.
							why the difference?
								object literals have a lot of typos
							Allowing extra properties
								ex: use index signature
									var x: { foo: number, [x: string]: any };
									x = { foo: 1, baz: 2 };  // Ok, `baz` matched by index signature
							Use Case: React State
								ex
									// Assuming
									interface State {
										foo?: string;
										bar?: string;
									}
									// You want to do: 
									this.setState({foo: "Hello"}); // Yay works fine!
									// Because of freshness it's protected against typos as well!
									this.setState({foos: "Hello"}}; // Error: Objects may only specify known properties
									// And still type checked
									this.setState({foo: 123}}; // Error: Cannot assign number to a string
						Type Guard
							to narrow down the type of an object
							typeof
								ex
									function doSomething(x: number | string) {
											if (typeof x === 'string') { // Within the block TypeScript knows that `x` must be a string
													console.log(x.subtr(1)); // Error, 'subtr' does not exist on `string`
													console.log(x.substr(1)); // OK
											}
											x.substr(1); // Error: There is no guarantee that `x` is a `string`
									}
							instanceof
								ex
									class Foo {
											foo = 123;
											common = '123';
									}
									class Bar {
											bar = 123;
											common = '123';
									}
									function doStuff(arg: Foo | Bar) {
											if (arg instanceof Foo) {
													console.log(arg.foo); // OK
													console.log(arg.bar); // Error!
											}
											if (arg instanceof Bar) {
													console.log(arg.foo); // Error!
													console.log(arg.bar); // OK
											}
											console.log(arg.common); // OK
											console.log(arg.foo); // Error!
											console.log(arg.bar); // Error!
									}
									doStuff(new Foo());
									doStuff(new Bar());
							in
								ex
									interface A {
										x: number;
									}
									interface B {
										y: string;
									}
									function doStuff(q: A | B) {
										if ('x' in q) {
											// q: A
										}
										else {
											// q: B
										}
									}
							Literal Type Guard
								discriminate literal types in a union
								ex
									type Foo = {
										kind: 'foo', // Literal type 
										foo: number
									}
									type Bar = {
										kind: 'bar', // Literal type 
										bar: number
									}
									function doStuff(arg: Foo | Bar) {
											if (arg.kind === 'foo') {
													console.log(arg.foo); // OK
													console.log(arg.bar); // Error!
											}
											else {  // MUST BE Bar!
													console.log(arg.foo); // Error!
													console.log(arg.bar); // OK
											}
									}
							User Defined Type Guards
								ex
									interface Foo {
											foo: number;
											common: string;
									}
									interface Bar {
											bar: number;
											common: string;
									}
									// User Defined Type Guard!
									function isFoo(arg: any): arg is Foo {
											return arg.foo !== undefined;
									}
									// usage
									function doStuff(arg: Foo | Bar) {
											if (isFoo(arg)) {
													console.log(arg.foo); // OK
													console.log(arg.bar); // Error!
											}
											else {
													console.log(arg.foo); // Error!
													console.log(arg.bar); // OK
											}
									}
									doStuff({ foo: 123, common: '123' });
									doStuff({ bar: 123, common: '123' });
						Literal Types
							literals are exact values that are js primitives
							String Literals
								allow only one value to be assigned
								ex
									let foo: 'Hello';
									foo = 'Bar'; // Error: "Bar" is not assignable to type "Hello"
								ex: using in type union
									type CardinalDirection =
											"North"
											| "East"
											| "South"
											| "West";
									function move(distance: number, direction: CardinalDirection) {
											// ...
									}
									move(1,"North"); // Okay
									move(1,"Nurth"); // Error!
							Use Cases
								String base enums
						Readonly
						Generics
							goal: meaningful type constraints between members
								members: class instance members, clas methdos, function args, function return values
							Motivation and samples
								ex
									class Queue<T> {
										private data = [];
										push = (item: T) => this.data.push(item);
										pop = (): T => this.data.shift();
									}
									/** Again sample usage */
									const queue = new Queue<number>();
									queue.push(0);
									queue.push("1"); // ERROR : cannot push a string. Only numbers allowed
							Useless Generic
								ex
									declare function foo<T>(arg: T): void;
									-->>
									declare function foo(arg: any): void;
							Design Pattern: Convenience Generic
						Type Inference
							Structuring 
								structuring: object literal creation
						Type Compatibility
							Type Compatibility
								if one thing can be assigned to another
							Soundness
								ts allows unsound behaviours
									ex: anything can be assigned to any and it allows anything
										let foo: any = 123;
										foo = "Hello";
										// Later
										foo.toPrecision(3); // Allowed as you typed it as `any`
							Structural 
								objects are structurally typed
									ie: names don't matter
									ex
										interface Point {
												x: number,
												y: number
										}
										class Point2D {
												constructor(public x:number, public y:number){}
										}
										let p: Point;
										// OK, because of structural typing
										p = new Point2D(1,2);
							Variance
								ex:
									Base and Child are types
									Child is child of Base
									=>
									instances of Child can be assigned to a variable of type Base
								Covariant : (corporate) only in same direction
								Contravariant : (contra aka negative) only in opposite direction
								Bivariant : (bi aka both) both co and contra.
								Invariant : if the types are aren't exact then they are incompatible.
						Never Type
						Discriminated Unions
						Index Signatures
							code	
								let foo:any = {}
								foo[obj] = 'world'
								console.log(foo[obj])
							if you pass any object to the index signature
								like: foo[obj]
								js calls .toString on `obj` before getting result
							typescript index signature
								ts doesn't allow implicit toString
									// ERROR: the index signature must be string, number ...
									foo[obj] = 'World';
									// FIX: TypeScript forces you to be explicit
									foo[obj.toString()] = 'World';
						Moving Types
						Exception Handling
						Mixins
					JSX
						React
						Non React JSX
					Options
						noImplicitAny
						strictNullChecks
					Testing
						Jest
					Tools
						Prettier
						Husky
						Changelog
					TIPs
						String Based Enums
						Nominal Typing
						Stateful Functions
						Bind is Bad
						Currying
						Type Instantiation
						Lazy Object Literal Initialization
						Classes are Useful
						Avoid Export Default
						Limit Property Setters
						outFile caution
						JQuery tips
						static constructors
						singleton pattern
						Function parameters
						Truthy
						Build Toggles
						Barrel
						Create Arrays
						Typesafe Event Emitter
					StyleGuide
					Common Errors
					TypeScript Compiler Internals
        Article: Anders Hejlsberg  Introducing TypeScript-eX2PXjj-KDk.mp4
        Article: Learn TypeScript
          https://github.com/TypeStrong/learn-typescript
          01-getting-started
            tsconfig.json
            why
              explicit types
                var x: number
              types are structural
            typescript definitions  
              .d.ts files
              they contain type declarations
          02-type-system-introduction
            syntax
              postfix type annotations
            basic types
              string number boolean any any[] void 
              () => any
            type inferencing
              var x = 10
              function callbacks
            interfaces  
              anything more complicated than basic types, including functions and classes
              basic building block
              similar to js object but uses types
              ex
                interface MyI { 
                  value: string
                  method (): number
                  (): boolean
                  }
              can use index types (string or number)
                ex
                interface Dict {
                  [index: string]: string
                }
            type shorthand
              ex
                type Hello = string
                type PrimitiveArray = Array<string | number | boolean>
                function print(): Hello {
                  return 'Hellio'
                }
                var mixed: PrimitiveArray = [42, 'is']
              inline interface in parameters:
              function getLabel (obj: { label: string  }): string {
                return obj.label
              }
            extending and implementing interfaces
              interface Animal {
                legs: number
              }
              interface Dog extends Animal {
                barks: boolean
              }
            user-defined type guards
              function implements runtime check of this interface
              ex: check if object is a Dog
                function typeGuard (obj: Dog): obj is Dog {
                  return !!obj.barks
                }
            generics
              ex
                function identity <T> (arg: T): T {
                  return arg
                }
              when invoking, pass the type inline
                var output = identity<string>('myString') 
              or let it be inferred
                var output = identity('myString') 
            union types
              a value can be of many types
              ex
                var value: string | string[] = 'test'
                console.log(value.length) // Works because it exists on both `string` and `Array`.
            intersection types
              an entity that is of all types
              ex
                function extend <A, B> (a: A, b: B): A & B {
                  Object.keys(b).forEach(key => {
                    a[key] = b[key]
                  })
                  return a as A & B
                }
            tuples
              an array where number of elements are known
              ex
                var x: [string, number]
                // Initialize it.
                x = ['hello', 10] // OK.
                // Initialize it incorrectly.
                x = [10, 'hello'] // Error.
              accessing an element
              ex
                console.log(tuple[0].substr(1))
                console.log(tuple[1].substr(1)) //=> Error: Property 'substr' does not exist on type 'number'.
            typeof
              ex
                import * as TS from 'typescript'
                declare function require (module: string): any
                function eventually () {
                  var ts: typeof TS = require('typescript')
                }
          03-javascript-features
            es5
              import ts = require('typescript')
              // This is declared before usage and can not be inferred.
              function sum (a: number, b: number) {
                return a + b
              }
              // Use an interface provided by a third-party.
              var obj: ts.Map<number> = {
                a: 10,
                b: 20,
                c: 30,
                // d: 'foo' // Error.
              }
          05-diving-deeper
            TSD and DefinitelyTyped
              npm i -g tsd
              tsd install node --save
            Typings
              npm i -g typings
              typings i chalk -S
          06-integration
        What is TypeScript and why would I use it in place of JavaScript? [closed]
          https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript/35048303#35048303
            relation to javascript
              ts compiles to es targets
              it supports all es2015 and beyond features
            relation to other js targeting languages
              js code is valid ts code
              ts is not risky choice
            optionally static typing and type inference
              js is dynamically typed
                js doesn't know type of a variable until it is instantiated
              optional  
                ex
                  function divideByTwo(x) {return x/2}
                  ->
                  function divideByTwo(x : any) : any {return x/2}
                to disallow this:
                  --noImplicitAny
            enhanced ide support
            strict null checks
              --strictNullChecks
                won't allow undefined to be assigned 
                unless it is declared as nullable type
              ex
                let x : number = undefined
                  compile error
                let x : number | undefined = undefined
              ex
                let x: number | undefined;
                if (x !== undefined) x += 1; // this line will compile, because x is checked.
                x += 1; // this line will fail compilation, because x might be undefined.
            compilation
              --watch 
                incremental compilation
            js interoperability
              ts definitions needed
                .d.ts files
                so that ts compiler understands 
              simplest definition: allow identifier to be used in any way
                ex
                  declare var _ : any
                  _.foobar() // legal in ts but error in runtime
              typed definitions of npm packages: DefinitelyTyped
                prefixed with "@types/"
            converting from js to ts
              in case no ts definitions are available for js library
                create .d.ts file
                include it in tsconfig.json's `files` array
                declare unknown bits as type `any`
                eliminate all errors
                gradually introduce typing 
        check if a string is Numeric
          https://stackoverflow.com/questions/23437476/in-typescript-how-to-check-if-a-string-is-numeric/23440948#23440948
          Number('1234') // 1234
          Number('9BX9') // NaN
          unary plus operator if you like shorthand:
          +'1234' // 1234
          +'9BX9' // NaN
           isNaN(maybeNumber) // returns true if NaN, otherwise false
        get set in ts
          https://stackoverflow.com/questions/12827266/get-and-set-in-typescript
          ex: ts
            class foo {
                private _bar:boolean = false;
                get bar():boolean {
                    return this._bar;
                }
                set bar(theBar:boolean) {
                    this._bar = theBar;
                }
            }
          ex: generated js
            var foo = (function () {
                function foo() {
                    this._bar = false;
                }
                Object.defineProperty(foo.prototype, "bar", {
                    get: function () {
                        return this._bar;
                    },
                    set: function (theBar) {
                        this._bar = theBar;
                    },
                    enumerable: true,
                    configurable: true
                });
                return foo;
            })();
          ex: usage
            var myFoo = new foo();
            if(myFoo.bar) {         // calls the getter
                myFoo.bar = false;  // calls the setter and passes false
            }
        strongly-typed functions as parameters possible in TypeScript?
          https://stackoverflow.com/questions/14638990/are-strongly-typed-functions-as-parameters-possible-in-typescript
            ex
              class Foo {
                  save(callback: (n: number) => any) : void {
                      callback(42);
                  }
              }
              var foo = new Foo();
              var strCallback = (result: string) : void => {
                  alert(result);
              }
              var numCallback = (result: number) : void => {
                  alert(result.toString());
              }
              foo.save(strCallback); // not OK
              foo.save(numCallback); // OK
            ex: define a type to encapsulate this
              type NumberCallback = (n: number) => any;
              class Foo {
                  save(callback: NumberCallback) : void {
                      callback(42);
                  }
              }
        typescript getting error TS2304: cannot find name ' require'
          https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require
            replace Typings/DefinitelyTyped
              npm install @types/node --save-dev
              tsconfig.json
                {
                    "compilerOptions": {
                        // types option has been previously configured
                         "types": [
                            // add node as an option
                            "node"
                         ],
                         // typeRoots option has been previously configured
                         "typeRoots": [
                            // add path to @types
                            "node_modules/@types"
                         ]
                    }
                }
            opt2
              npm install @types/node --save-dev
              import x from 'x' 
                doesn't need tsconfig.json
        how-do-you-explicitly-set-a-new-property-on-window-in-typescript
          https://stackoverflow.com/questions/12709074/how-do-you-explicitly-set-a-new-property-on-window-in-typescript
          (<any>window).MyNamespace
        Typescript: Interfaces vs Types
          https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types
          interface is similar to type aliases
          but interfaces offer more features
          ex
            interface Point {
                x: number;
                y: number;
            }
            type Point = {
                x: number;
                y: number;
            };
          features lost
            interface can be extended or implemented
            interface can have multiple merged declarations
              interface Point { x: number; } interface Point { y: number; }
        How do I cast a JSON object to a typescript class
          https://stackoverflow.com/questions/22875636/how-do-i-cast-a-json-object-to-a-typescript-class
          opt1: copy data into an object
            ex
              var d = new MyRichObject();
              d.copyInto(jsonResult);
            ex: jQuery.extend() to copy
              var newObject = jQuery.extend({}, oldObject);
            ex: 
              Object.assign(new Foo, { a: 1 })
              Object.setPrototypeOf({ a: 1 }, Foo.prototype)
              JSON.parse('{"a":1}') 
            ex:
              Book.fromJson = function (json){
                  var obj = JSON.parse (json);
                  return new Book (obj.title, obj.author, obj.isbn, obj.price, obj.stock);
              };
          opt2: use class-transformer library
            https://github.com/typestack/class-transformer
            ex
              let jsonObject = response.json() as Object;
              let fooInstance = plainToClass(Models.Foo, jsonObject);
              return fooInstance;
        class-transformer examples
          <url:file:///~/codes/js/class-transformer/sample/sample1-simple-usage/app.ts>
        What is target in tsconfig?
          https://stackoverflow.com/questions/42415942/typescript-what-is-target-in-tsconfig
          ex
            {
              "compilerOptions": 
              {
                "sourceMap": true,
                "target": "es5",
                "module": "commonjs",
                "jsx": "react",
                "moduleResolution": "classic",
                "lib": [ "es2015", "dom",  "es2017" ]
              }
            }
        Create an enum with string values in TypeScript
          https://stackoverflow.com/questions/15490560/create-an-enum-with-string-values-in-typescript
            ex
              enum E {
                  hello = "hello",
                  world = "world"
              };
        Call a Global Variable inside Typescript module
          https://stackoverflow.com/questions/13252225/call-a-global-variable-inside-typescript-module
          declare var bootbox: any;
        Importing lodash into angular2 + typescript application
          https://stackoverflow.com/questions/34660265/importing-lodash-into-angular2-typescript-application
          $ npm install --save lodash
          # This is the new bit here: 
          $ npm install --save @types/lodash
          in .ts
            import * as _ from "lodash";
            Or (as suggested by @Naitik):
            import _ from "lodash";
        The Future of Declaration Files
          https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/
          Getting type declarations in TypeScript 2.0 will require no tools apart from npm
        How to implement a typescript decorator?
          https://stackoverflow.com/questions/29775830/how-to-implement-a-typescript-decorator
          Use:
            class MyClass {
                @log
                myMethod(arg: string) { 
                    return "Message -- " + arg;
                }
            }
          Implementation:
            function log(target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) {
                const originalMethod = descriptor.value; // save a reference to the original method
                // NOTE: Do not use arrow syntax here. Use a function expression in 
                // order to use the correct value of `this` in this method (see notes below)
                descriptor.value = function(...args: any[]) {
                    // pre
                    console.log("The method args are: " + JSON.stringify(args));
                    // run and store result
                    const result = originalMethod.apply(this, args);
                    // post
                    console.log("The return value is: " + result);
                    // return the result of the original method (or modify it before returning)
                    return result;
                };
                return descriptor;
            }
          Input:
            new MyClass().myMethod("testing");
        is-there-a-dedicated-function-to-check-null-and-undefined-in-typescript
          https://stackoverflow.com/questions/28975896/is-there-a-dedicated-function-to-check-null-and-undefined-in-typescript
          test both null and undefined in one hit:
            if (x == null) {
          If you use a strict-check, it will only be true for values set to null 
            if (x === null) {
          ex
            var a: number;
            var b: number = null;
            function check(x, name) {
                if (x == null) {
                    console.log(name + ' == null');
                }
                if (x === null) {
                    console.log(name + ' === null');
                }
                if (typeof x === 'undefined') {
                    console.log(name + ' is undefined');
                }
            }
            check(a, 'a');
            check(b, 'b');
          Output
            "a == null"
            "a is undefined"
            "b == null"
            "b === null"
        How can I create an object based on an interface file definition in TypeScript?
          https://stackoverflow.com/questions/13142635/how-can-i-create-an-object-based-on-an-interface-file-definition-in-typescript
          q
            I have defined an interface like this:
              interface IModal {
                  content: string;
                  form: string;
                  href: string;
                  $form: JQuery;
                  $message: JQuery;
                  $modal: JQuery;
                  $submits: JQuery;
               }
            I define a variable like this:
              var modal: IModal;
            However when I try to set the property of modal it gives me a message saying that
              "cannot set property content of undefined"
          ans
            If you are creating the "modal" variable elsewhere, and want to tell TypeScript it will all be done, you would use:
              declare var modal: IModal;
            If you want to create a variable that will actually be an instance of IModal in TypeScript you will need to define it fully.
              var modal: IModal = {
                  content: '',
                  form: '',
                  href: '',
                  $form: null,
                  $message: null,
                  $modal: null,
                  $submits: null
              };
        typescript-export-vs-default-export
          https://stackoverflow.com/questions/33305954/typescript-export-vs-default-export
          Default Export (export default)
            // MyClass.ts -- using default export
            export default class MyClass { /* ... */ }
            // one default export per file 
            import MyClass from "./MyClass";
            any name you like:
            import MyClassAlias from "./MyClass";
          Named Export (export)
            // MyClass.ts -- using named exports
            export class MyClass { /* ... */ }
            export class MyOtherClass { /* ... */ }
            use
              import {MyClass} from "./MyClass";
              import {MyClass, MyOtherClass} from "./MyClass";
              import {MyClass, MyOtherClass as MyOtherClassAlias} from "./MyClass";
              import * as MyClasses from "./MyClass";
              // use MyClasses.MyClass and MyClasses.MyOtherClass here
          Additional Points
            A default export is actually a named export with the name default 
            import {default as MyClass} from "./MyClass";
            import MyDefaultExportedClass, {Class1, Class2} from "./SomeFile";
            import MyDefaultExportedClass, * as Classes from "./SomeFile";
            import "./SomeFile"; // runs SomeFile.js without importing any exports
        How do I remove an array item in TypeScript?
          https://stackoverflow.com/questions/15292278/how-do-i-remove-an-array-item-in-typescript
          same as js
          opt1
            var index = myArray.indexOf(key, 0);
            if (index > -1) {
               myArray.splice(index, 1);
            }
          opt2: if object
            let foo_object // Item to remove
            this.foo_objects = this.foo_objects.filter(obj => obj !== foo_object);
          opt3:
            removeDocument(doc){
               this.documents.forEach( (item, index) => {
                 if(item === doc) this.documents.splice(index,1);
               });
            }
        tsconfig.json and tsc
          https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
            tsc with no input files
              compiler search for tsconfig.json in current directory then in parent directory chain
            tsc --project or -p
            ex
              "compilerOptions": {
                  "module": "commonjs",
                  "noImplicitAny": true,
                  "removeComments": true,
                  "preserveConstEnums": true,
                  "sourceMap": true
              },
              "files": [
                  "core.ts",
                  "sys.ts",
                  "types.ts",
                  "scanner.ts",
            ex: include/exclude
              "include": [
                  "src/**/*"
              ],
              "exclude": [
                  "node_modules",
                  "**/*.spec.ts"
              ]
        next
          https://github.com/alm-tools/alm/
          https://basarat.gitbooks.io/typescript/content/docs/getting-started.html
    vs code # vscode
      shortcuts 
        #+p   command palette
        #k#s  keyboard shortcuts
        #k#0  fold all
        #k#j  unfold all
        #k#c  comment
        #k#u  uncomment
        f8    next error in all files
        #.    quick fix (intellisense suggestions)
				different from intellij
					#+e   explorer
					#1		first editor group (editor window)
					#2		second editor group (editor window)
				my modifications
					my intellij modifications
						#o    open file (quickopen)
						#!o   go to symbol (project)
					other 
						Fn+Space		auto complete / triggerSuggest
				vscode shortcuts overridden by intellij keybindings
					#p    goto file 
					#t    go to symbol (type/class/variable etc.)
					#b    hide sidebar
        vim shortcuts
          üüs   easymotion search char
						overwritten: by savel all
          üü/   easymotion search multiple chars
					üüf		easymotion search forward char
					üüF		easymotion search backward char
          gcc   toggle comment
          cs<char><char>  surround change
          s<char><char>   sneak move to chars 
            ; , next/prev
          gd    jump to definition
          gh    show hint/message where the cursor is (intellisense message)
        intellij keybindings
          https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings
          !f7   find usages
						f4		go to next reference
          #f9   make project
          ^!r   run configuration...
          ^!d   debug configuration...
          f8    step over
          f7    step into
          #e    open recent projects
          #o    go to symbol
          #+o   go to symbol in file
          ^right/left   next/prev tab
          +esc  hide active toolbar/panel
          #f12  file structure popup
          +f6   rename
          f2    next error
        vscode other
          +f12  show references
				customizing vim shortcuts
					Settings #, > User Settings
					ex    
						"vim.insertModeKeyBindings": [
							{
									"before": ["j","j"],
									"after": ["<Esc>"]
							}
						],
						"vim.otherModesKeyBindingsNonRecursive": [
								{
										"before": ["<leader>","d"],
										"after": ["d", "d"]
								},
								{
										"before":["<C-n>"],
										"after":[],
										"commands": [
												{
														"command": ":nohl"
												}
										]
								}
						],
						"vim.normalModeKeyBindingsNonRecursive": [
								{
										"before": ["L"],
										"commands": [
												{
														"command": "workbench.action.nextEditor",
												}
										]
								},
			issues
				tsconfig.json
					don't allow any
						"noImplicitAny": false,
      commands  
        build
      errors
        env: node: No such file or directory
          > Executing task: /Users/mertnuhoglu/projects/study/js/ex/study_notes_cyclejs/node_modules/.bin/tsc -p /Users/mertnuhoglu/projects/study/js/ex/study_notes_cyclejs/tsconfig.json <
          The terminal process terminated with exit code: 127
          solution
            add to .zshenv node's path:
              PATH="$PATH:/Users/mertnuhoglu/n/bin"
			debugging
				Debug > Start Debugging
				launch.json
					how to?
						chrome:
							on terminal:
								npm run app
							on vscode
								edit launch.json > add configuration
								Start Debugging F5
					errors:
						unverified breakpoints in vscode
							root directory of vscode project should be compatible with launch.json paths
							örnek: 
								terminalden başlattığım klasör:
									/Users/mertnuhoglu/projects/study/js/vrp/ex/cyclejs_vrp/ex15
								vscode projesi de aynı yerden başlıyor
									/Users/mertnuhoglu/projects/study/js/vrp/ex/cyclejs_vrp/ex15
									fakat esas kaynak kodlarının kök dizini
										/Users/mertnuhoglu/projects/study/js/vrp/ex/cyclejs_vrp/ex15/src/10_03k
					chrome: 
						"configurations": [
							{
									"name": "Chrome",
									"type": "chrome",
									"request": "launch",
									"url": "http://localhost:1234",
									"webRoot": "${workspaceFolder}"
							}
						]
					node
						"program": "${workspaceFolder}/src/problems/p16/ex08.ts",
			articles
				changes may 2018
					move to new file refactoring
					updates import paths when a file is moved
					duplicate workspace in new window
					!up/dn		back/unback
					autocompletion for template variables
					explorer pane > top bar > outline
				changes april 2018
					palette: open view > npm script explorer
					markdown header search: #t > "#header"
				changes march 2018
					emmet: wrap with abbreviation
						ex:
							footer>div.col1+div.col2>ul
					search include/exclude file patterns
						!*.ts test/**/*.log
    widgets
      jquery widgets
        datettimepicker
          http://xdsoft.net/jqplugins/datetimepicker/
          how to use
            page scripts
              <link rel="stylesheet" type="text/css" href="/jquery.datetimepicker.css"/ >
              <script src="/jquery.js"></script>
              <script src="/build/jquery.datetimepicker.full.min.js"></script>
            use
              HTML
                <input id="datetimepicker" type="text" >
              javaScript
                jQuery('#datetimepicker').datetimepicker();
    xstream id=g10605
			xstream <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10605>
      import xstream
        const xs = require('xstream').default
        import xs from 'xstream';
      documentation
        http://staltz.github.io/xstream
        overview  
          4 fundamental types:
            Stream, Listener, Producer, MemoryStream
          Stream  
            an event emitter
            methods: called operators such as map, filter, fold
            operator: returns a new Stream
          Listener
            an object with 3 functions: next, error, complete
          Producer
            events of a Stream come from Producer
            an object with 2 functions: start(listener), stop()
            Streams are also Listeners
            ex: xs.create(producer)
              this returns a Stream (Listener)
            ex:
              var producer = {
                start: function (listener) {
                  this.id = setInterval(() => listener.next('yo'), 1000)
                },
                stop: function () {
                  clearInterval(this.id)
                },
                id: 0,
              }
              // This fellow delivers a 'yo' next event every 1 second
              var stream = xs.create(producer)
            a Producer has only one listener
            a Stream may have many listeners
            when is start and stop called?
              see: MemoryStream
          MemoryStream
            like a Stream
              it has operators, 
              it can have multiple listeners 
            difference: it has memory
              it can remember the last next event that it sent to its listeners
            when a new listener is added, MemoryStream sends the last event to it
          How a Stream starts and Stops
            create a Stream:
              xs.create(producer)
              // producer.start() is not yet called
              // stream is idle
            once the first Listener is added
              Stream calls producer.start() 
        Factories
          create(producer)
          createWithMemory(producer)
          never()
          empty()
          throw(error)
          from(input)
            Array, Promise or Observable
          of(a, b)
            of(1,2,3)
          fromArray(array)
          fromPromise(promise)
          fromObservable(observable)
          periodic(period)
            periodic(1000)
          merge(stream1, stream2)
          combine(stream1, stream2)
        Methods and Operators
          operators return a new Stream
          addListener(listener)
          removeListener(listener)
          subscribe(listener)
          map(project)
          mapTo(value)
          filter(condition)
          take(amount)
          drop(amount)
          last()
          startWith(initial)
          endWhen(stream)
          fold(afun(acc, x), initial)
          replaceError(replace)
          flatten()
          compose(operator)
          remember()
            returns: MemoryStream
            a new stream like input stream
            but remembers the last event
          debug(spyFun)
          imitate(target)
            allows circular dependency of streams
			example errors
				TypeError: Cannot read property '_add' of undefined
					code
						const reducer$ = xs.merge(
							parentReducer$, 
							planPanelSinks.onion
						)
					`planPanelSinks.onion` is `undefined`. 
    other topics
      book
        https://github.com/magicbookproject/magicbook
        http://ramdajs.com/0.21.0/index.html
        https://github.com/MostlyAdequate/mostly-adequate-guide
      graph libraries
        graph library: d3
          http://maurizzzio.github.io/greuler/#/
        react links from ericelliott
          https://github.com/ericelliott/react-things
          https://github.com/ericelliott/essential-javascript-links#react
        https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a#.68evlsqlw
        https://medium.com/javascript-scene/the-dao-of-immutability-9f91a70c88cd#.pdjmp6r3z
      elm
        http://www.elmbark.com/2016/03/16/mainstream-elm-user-focused-design
        https://github.com/Nazanin1369/elm-memoryGame
          memory game in elm
      hackathon-starter
        mongodb credentials
          .env.example
            #MONGODB_URI=mongodb://localhost:27017/test
            MONGODB_URI=mongodb://myUserAdmin:12345@localhost:27017/test
      pug jade id=g10139
        pug jade <url:file:///~/Dropbox/mynotes/content/articles/articles_js.md#r=g10139>
        https://webapplog.com/jade/
          tags: first word
            body
              div content
              div
              | this is content too
          variables
            pug
              h1= title
              p= body
            locals
              {
                title: "guide"
                body: ..
          attributes
            div(id="content")
            div(id=variable)
            a#main-link
              <a id="main-link"></a>
          use | for text as well
          literals: classes and IDs right after tag names
            div#content
            p.center
            #notag
          if no tag used, then it is div
          script/style blocks
            script.
              console.log(..)
            style.
              css code
          execute js code
            - var arr = [3,2]
            span= arr[1]
            span!= "unescaped"
          comments
            // comment
            //- comment hidden from html
          conditions if
            if user.admin
              ..
            else
              ..
          iterations each loops
            div
              - var languages = {'php': 2}
              each key, value in languages
                p= key + ". " + value
              - var items = {'php', 'java'}
              each item, index in items
                td= item
          filters: for markdown
            p
              :markdown
                # practical
          interpolation via #{name}
            p read #{title}
          case
            case coins
              when 0
                p ..
              when 1
                p ..
          mixins: functions that produce html. usage is +fun(params)
            mixin row(items)
              tr 
                each item, index in items
                  td= item
            mixin table(tableData)
              table
                each row, index in tableData
                  +row(row)
            - var node = [{name: "express"}]
            +table(node)
          include
            include ./inc/header
            include ../inc/footer
          extend: replace parent files
            parent
              block header
                p ...
            child
              extend parent
              block header
                p overwrite it
          standalone usage
            tldr
    stuff
      memoizee
        https://github.com/medikoo/memoizee
        ex
          var memoize = require("memoizee");
          var fn = function(one, two, three) {
            /* ... */
          };
          memoized = memoize(fn);
          memoized("foo", 3, "bar");
          memoized("foo", 3, "bar"); // Cache hit
      mdn: mozilla developer network
        https://developer.mozilla.org/
      Learn CSS Grid for free
        https://scrimba.com/g/gR8PTE
        https://laracasts.com/series/css-grids-for-everyone
      Es2015+ Cheatsheet
        https://devhints.io/es6
      CSS Cheatsheet
        https://adam-marsden.co.uk/css-cheat-sheet

## Rmd files

	index_rmd for js id=g10627
		index_rmd for js <url:file:///~/Dropbox/mynotes/content/code/cjs/cjs.md#r=g10627>
		~/projects/study/js/ecmascript_modules.Rmd
		~/projects/study/js/import_js_files.Rmd
		~/projects/study/js/mixing_streams_with_values.Rmd
		~/projects/study/js/mockup_rest_api_jsonserver.Rmd
		~/projects/study/js/refcard_css_selectors.Rmd
		~/projects/study/js/study_chrome_devtools.Rmd
		~/projects/study/js/study_cyclejs_examples.Rmd
		~/projects/study/js/study_cyclejs_onion_architecture.Rmd
		~/projects/study/js/study_cyclejs_router.Rmd
		~/projects/study/js/study_expressjs_server.Rmd id=g10634
			~/projects/study/js/study_expressjs_server.Rmd <url:file:///~/gdrive/mynotes/content/code/cjs/cjs.md#r=g10634>
			ref
				~/projects/study/db/study_postgrest.Rmd <url:file:///~/gdrive/mynotes/content/code/cdb.md#r=g10633>
				~/projects/study/r/study_plumber_restful_apis.Rmd <url:file:///~/gdrive/mynotes/content/code/cr/cr.md#r=g10653>
			e01: expressjs getting started
				server.js
					const app = express()
					const port = 3000
					app.get('/', (req, res) => res.send('Hello World!'))
					app.listen(port, () => console.log(`Example app listening on port ${port}!`))
			e03: POST and Parse
				server.js
					app.post('/login',function(req,res){
						var user_name=req.body.user;
						var password=req.body.password;
				usage
					opt1: index.html
						$("#submit").click(function(){
							user=$("#user").val();
							pass=$("#password").val();
							$.post("http://localhost:3000/login",{user: user,password: pass}, function(data){
					opt2: curl
						curl -X POST -H "Content-Type: application/json" -d '{"user":"bob", "password": "ali"}' http://localhost:3000/login
					opt3:  superagent03.js
						superagent
							.post( 'http://localhost:3000/login' )
							.set('Content-Type', 'application/json')
							.send('{"user":"bob", "password": "ali"}')
						$ node e03/superagent03.js
					opt3b: superagent03b.js with js object
						.send({user:"bob", password: "ali"})
					opt4: cycle01.js
						url: 'http://localhost:3000/login',
						method: 'POST',
						send: '{"user":"bob", "password": "ali"}',
					opt4b: cycle01b.js with js object
						send: {user:"bob", password: "ali"},
			e04: File Attach Upload
				curl
					curl -i -X POST -H "Content-Type: multipart/form-data" -F "avatar=@~/projects/study/js/ex/study_expressjs_server/img/galileo.jpg" http://localhost:3000/profile
				superagent
					superagent.post( 'http://localhost:3030/profile' )
						.set('Content-Type', 'multipart/form-data')
						.attach('avatar', '/Users/mertnuhoglu/projects/study/js/ex/study_expressjs_server/img/galileo.jpg')
				cyclejs
					url: 'http://localhost:4755/echo2',
					method: 'POST',
					attach: [
						{
							name: 'upload',
							path: '/Users/mertnuhoglu/projects/study/r/ex/study_plumber_restful_apis/e01.R',
							filename: 'e01.R'
		~/projects/study/js/study_fp_js.Rmd
		~/projects/study/js/study_frisby_book_adequate_guide_to_fp.Rmd
		~/projects/study/js/study_frisby_flickr_app.Rmd
		~/projects/study/js/study_functional_programming_in_javascript_learnrx.Rmd
		~/projects/study/js/study_handsontable.Rmd
		~/projects/study/js/study_http_requests_in_js.Rmd
		~/projects/study/js/study_http_requests_in_nodejs.Rmd
		~/projects/study/js/study_hyperapp.Rmd
		~/projects/study/js/study_hyperscript.Rmd
		~/projects/study/js/study_js.Rmd
		~/projects/study/js/study_js_promises.Rmd
		~/projects/study/js/study_learn_rxjs.Rmd
		~/projects/study/js/study_notes_cyclejs.Rmd id=g10767
			~/projects/study/js/study_notes_cyclejs.Rmd <url:file:///~/gdrive/mynotes/content/code/cjs/cjs.md#r=g10767>
			Andre Staltz' CycleJs Fundamentals
				v01
					<iframe src="ex/cyclejs_ex01.html" width="200" height="30"></iframe>
					html
						<script>
							Rx.Observable.timer(0, 1000)
								.map(i => `Seconds ${i}`)
								.subscribe(text => {
									const container = document.querySelector('#app');
									container.textContent = text;
								})
					two parts
						1. Logic
							before subscribe()
						2. Effects
							inside subscribe()
				v02
					encapsulate logic and effects parts into two separate functions.
					function main() {
						return Rx.Observable.timer(0, 1000)
							.map(i => `Seconds ${i}`);
					function DOMEffect(text$) {
						text$.subscribe(text => {
				v03
					we want to show two different streams.
					main() {
						return {
							DOM: Rx.Observable.timer(0, 1000)
								.map(i => `Seconds ${i}`),
							Log: Rx.Observable.timer(0, 2000)
								.map(i => 2*i),
					const sink = main();
					consoleLogEffect(sink.Log);
					DOMEffect(sink.DOM);
				v04
					The last part joins logic part and effects part. We will encapsulate it into `run()` function.
					function run(main) {
						const sinks = main();
						consoleLogEffect(sinks.Log);
						DOMEffect(sinks.DOM);
					->
					function run(main, effects) {
					->
				v05
					All the effects above are write effects
					But there is a cyclic dependency problem here:
						const sinks = main(DOMSource);
						const DOMSource = drivers.DOM(sinks.DOM);
					solve cyclic dependency by initializing with proxy
						bProxy = ...
						a = f(bProxy)
						b = g(a)
						bProxy.imitate(b)
				v06
					Now, parameterize input source arguments to main() function
					function main(DOMSource) {
						->
					function main(sources) {
					run() becomes totally generic
						put run() into framework
						Cycle.run(main, drivers);
				v07 Improving DOM Driver
					function createElement(obj) {
						const element = document.createElement(obj.tagName);
						obj.children
							.filter(c => typeof c === 'object')
				v08: Different Types of Input Events
					Currently, we have only click type input events
					const mouseover$ = sources.DOM.selectEvents('span', 'mouseover');
				v09
					Our view code can be automated a little further:
					function h(tagName, children) {
						->
					h1([ span([ ..
				v10
					Can we move DOMDriver into an external framework
						only application specific code inside DOMDriver is HTML element id `#app`.
					DOM: makeDOMDriver('#app'),
				v11 Hello World App
				v12: Decrement Increment: State
					const decrementClick$ = sources.DOM
						.select('.decrement').events('click');
					const decrementAction$ = decrementClick$.map(ev => -1);
					const number$ = Rx.Observable.of(0)
						.merge(decrementAction$).merge(incrementAction$)
						.scan((prev, curr) => prev + curr);
				v13: HTTP Driver
					const response$$ = sources.HTTP
						.filter(response$ => response$.request.url ===
									 'http://jsonplaceholder.typicode.com/users/1');
				v14: BMI Calculator
				v18: Onionify
					const state$ = sources.onion.state$;
					const vdom$ = state$.map(state => div(`Hello App ${state}`));
					const initialReducer$ = xs.of(function initialReducer() { return 0; });
					const addOneReducer$ = xs.periodic(1000)
						.mapTo(function addOneReducer(prev) { return prev + 1; });
					const reducer$ = xs.merge(initialReducer$, addOneReducer$);
					onion: reducer$,
			Reference CycleJs Examples
				ref01: Simple CycleJs with import + parceljs
					Edit `/Users/mertnuhoglu/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref01/index.js`
						const vdom$ = sources.DOM
							.select('.myinput').events('input')
							.map(ev => ev.target.value)
							.startWith('')
							.map(name =>
						run(main, {
							DOM: makeDOMDriver('#app')
					Edit `~/projects/study/js/ex/study_notes_cyclejs/package.json`
						"scripts": {
							"ref01": "parcel ref_ex/ref01/index.html",
				ref02: Simple CycleJs xs.of instead of sources.DOM
					Edit `~/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref02/index.js`
						const vdom$ = xs.of(
							div("planet earth")
				ref03: Simple Onion
					Edit `~/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref03/index.js`
						const reducer$ = xs.merge(initReducer$, updateReducer$)
						const state$ = sources.onion.state$
				ref04: HTTP Request
					Edit `~/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref04/index.js`
						const getRandomUser$ = sources.DOM.select('.get-random').events('click')
							.map(() => {
								return {
									url: 'https://jsonplaceholder.typicode.com/users/1',
						const user$ = sources.HTTP.select('users')
							.flatten()
							.map(res => res.body)
				ref05: Multiple HTTP Requests
					Edit `~/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref05/index.js`
						function intent(sources) {
							const getRandomUser$ = sources.DOM.select('.get-random').events('click')
							const getTodo$ = sources.DOM.select('.get-todo').events('click')
							return xs.merge(getRandomUser$, getTodo$)
				ref06: Complex App: Multiple Components + Onion + Multiple HTTP Requests
					Edit `~/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref06/index.js`
						const main = App;
						const wrappedMain = onionify(main);
					~/projects/study/js/ex/study_notes_cyclejs/ref_ex/ref06/components/app/index.js
						const headerSinks = isolate(Header, {storage: null, onion: null, Hot: null})(sources)
						const request$ = intent(sources.DOM)
						const parentReducer$ = model(sources.HTTP);
				ref07: Node Apps
					refblc: p16: onion with one subcomponent and lens <url:file:///~/projects/study/js/study_notes_cyclejs.Rmd#r=g10221>
				ref08: Full CycleJs App:
					refblc: cyclejs ex15_10_05 <url:file:///~/gdrive/mynotes/content/code/cjs/cjs.md#r=g10585>
			Article: Handling lists in Cyclejs
				How to create Dynamic List Components
			Problems
				Common For Some Subprojects:
					Start database server and postgrest:
						export PROJECT_DIR=$HOME/projects/itr
						export VRP_PSK_DIR=$PROJECT_DIR/vrp_psk01
						cd $VRP_PSK_DIR
						docker-compose up 
				p01: Multiple HTML Elements As vdom
					Opt03: xs.of + multiple div inside a single div
						const vdom$ = xs.of(
							div([
								div("div01"),
								div("div02"),
					Opt06: `state$.map` instead of `xs.of`
						const vdom$ = state$.map( (x) =>
							div(`div ${x.a}`),
				p02: Debugging state$.map( ({body}) => table(..))
					Opt03: debug()
						const panel_vdom$ = state$
							.debug( x => console.log(x))
							.debug( ({body}) => console.log(body))
					Opt04_01: Reproduce the error with static data
					Opt04_02: Fix the error
					Understand the Cause of the Error:
						Note that, output_04_01 has double nested array inside div: div([[div(..)]])
						div([
							[
								div([td(1)]),
					How To Find Out The Cause Of The Mistake
						Put .debug() after map and check children.
							.debug( x => console.log(x.children) )
						Or toHTML()
							.debug( x => {
								global.x = x
								console.log(toHTML(x))
							// "<div><div></div></div>"
				p03: Multiple HTTP Requests id=g10764
					intro
						fails:
							const response$ = xs.merge(
								user$,
								todo$,
						Cause: Use xs.combine() instead of xs.merge.
					Test xs.merge
						Edit `~/projects/study/js/ex/study_notes_cyclejs/src/problems/p03/merge_01.js`
						Opt02: Use xs.combine() instead of xs.merge.
							const vdom$ = xs.combine(
								userVdom$, 
								todoVdom$,
							)
								.map( ([user, todo]) =>
						Opt03: Make intent return both requests
							function intent(sources) {
								...
								return xs.merge(getRandomUser$, getTodo$)
						Opt04: Structure as intent model view functions
							const requests$ = intent(sources)
							const {user$, todo$} = model(sources)
							const vdom$ = view({user$, todo$})
							return {
								DOM: vdom$,
								HTTP: requests$,
						Opt09: Call my REST Services with view
							npm run p03_09
							Edit `~/projects/study/js/ex/study_notes_cyclejs/src/problems/p03/index_09.js`
								function view(state) {
									const {user$, todo$} = state
									const userVdom$ = user$
									const vdom$ = xs.combine(
										userVdom$, 
										todoVdom$,
									)
										.map( ([user, todo]) =>
				p04: CycleJs without Bundlers and Transpilers like ParcelJs
					Edit `~/projects/study/js/ex/study_notes_cyclejs/src/problems/p04/index.js`
					This seems too difficult to try.
				p05: Multiple HTTP Requests Using Multiple Components
				p06: xstream.compose function
				p07: Sample Apps for Master-Detail Relationships
					Ex03: Pipe actions to model()
					Ex03a: Why does `model.newItem$` stream return the response object instead of the reducer function?
					Ex04: Pipe model's response to view:
					Ex05: Use onion instead of your own reducer fold function:
					Ex06: Making new items from the input content
					Ex07: Define an id generator and assign id to new items
					Ex08: Remove items
				p08: How to make data flow model from the code?
				p09: Textual representation of the data flow models:
				p10: form submit için bir operatör tanımlama
				p11: Numerical simulation using xstream
				p12: Convert two substreams of state into a single stream of state
				p13: Make HTTP Requests in nodejs with xstream
				p14: Converting state returning model() function to reducer returning function
				p15: Converting reducer$.fold to onion
					p15 ex01
					p15 ex02
					p15 ex03
					p15 ex04
					p15 ex05
				p16: onion with one subcomponent and lens id=g10221
					p16.01 Creating subcomponent  Uses `cycle-onionify.onionify()`
					p16.02 Pass the global state to subcomponent  Custom `isolate()` with `cycle-onionify.onionify()`
					p16.02a Bug:
					p16.02: Correct implementation
					p16.03 Refactoring: Move isolate and onion functions to external module:
					p16.04 Customize the data using lenses
					p16.05 Setting up run() method
						p16.05a Run app without Cyclejs.run()
						p16.05b Implement Cyclejs.run() by my own
					p16.06 Subcomponent changes global state using setter lens
					p16.07 Convert js to typescript
					p16.08 Add type annotations
						Compiling and running TypeScript files
						p16.08a Add type annotations: Sinks problem
					p16.09 Implement custom type-safe `isolate`
				p17: Systematic elimination of possible bug causes id=g10219
					Put debug(console.log) to each stream
					p17_01: Initial application
					p17_02: Elimination of DetailPanel Component
					p17.03: Elimination of PlanPanel.vdom$
					Cause of the Problem
					Did Systematic Elimination Really Work?
					Why Didn't TypeScript Give an Error for undefined variable?
				p18: Why Does `isolate()` Remove Type Information? Reimplementing `isolate()` id=g10223
					p18.01: Base Node App
					p18.02: Encapsulate Components into Their Own Functions
					p18.03: Custom `onionify()`
					p18.04: Simplify type removal with a reference example  Step 01: Remove `So`
					p18.05: Simplify type removal with a reference example  Step 02: Remove `Omit`
					p18.06: Implement Omit with type safety
					p18.07: Implement onionify without Omit
					p18.08: Implement onionify without Omit  Step 02
					p18.08a: Does This Catch Errors Due To Forgetting `onion` in Sinks
						p18.p01: Testing and Studying Generic Types
							p18.p01.02: Refactor p18.08
							p18.p01.03: Use Conditional Types to Compare MainFn and App Types
				p19: Test: addListener doesn't consume streaming data
				p20: Type-safe Component Usage
			xstream Operators
				between: `first.mapTo(source.endWhen(second)).flatten()`
			Opinions
				Opinion01: What do we get for free by using reactive programming?
		~/projects/study/js/study_parcel_jquery.Rmd
		~/projects/study/js/study_parcel_redux.Rmd
		~/projects/study/js/study_parceljs.Rmd
		~/projects/study/js/study_ps.Rmd
		~/projects/study/js/study_ramda.Rmd
			const getId = R.map(R.prop('id'));
			const getId = R.map(R.compose(R.prop('id'), R.prop('sub')));
			const getId = R.map(e => e.sub.id);
			Article: Tutorial by Andrew Burgess
			const data = {
				'group1-perm1': true,
			const target = {
				'group1': [ { value: 'group1-perm1', checked: true, 'label': 'perm1' }
			R.map(([k, v]) => global[k] = v, R.toPairs(R));
			const addLabel = ([value, checked]) => ({value, checked, label: value});
			const fn = compose(map(addLabel), toPairs);
			const getLabel = R.compose(R.head, R.match(/perm[0-9]/g));
			const fn = compose(R.groupBy(groupName), map(addLabel), toPairs);
			v05: Null handling with prop
			const getId = R.map(R.prop('id'));
			Article: Ramda Documentation
			var greet = R.replace('{name}', R.__, 'Hello, {name}!');
			R.all(equals3)([3,2,3]); //=> false
			Article: Introducing Ramda
			Article: Writing Elegant Code With React, Redux and Ramda
		~/projects/study/js/study_ramda_for_reactive_streams.Rmd
		~/projects/study/js/study_render_html_table.Rmd
		~/projects/study/js/study_rxjs.Rmd
		~/projects/study/js/study_rxjs_manual.Rmd
		~/projects/study/js/study_sanctuary.Rmd
		~/projects/study/js/study_source_onion.Rmd
		~/projects/study/js/study_ts.Rmd
		~/projects/study/js/study_xstream.Rmd
		~/projects/study/js/using_js_in_rmd.Rmd
		vrp
			~//itr/vrp_doc/study/cyclejs_vrp.Rmd
			~/projects/itr/vrp_doc/study/study_vrp.Rmd id=g10766
				~/projects/itr/vrp_doc/study/study_vrp.Rmd <url:file:///~/gdrive/mynotes/content/code/cjs/cjs.md#r=g10766>
				001 study_vrp: concatMap example
				002 study_vrp: using ramda
				003 study_vrp: order_line instead of pln_orl
				005 study_vrp: what if there is no related purchase_order for some plan?
				006 study_vrp: cjs sipariş verilerini sunucuya (plumber veya opencpu) gönderir
					006.01 Prepare curl request
						postgrest request
							curl -H "Authorization: Bearer $JWT_TOKEN" -H "Content-Type: application/json" -d '[{"company_id": "103", "company_name":"company_103"},{"company_id": "102", "company_name":"company_102"}]'  http://localhost:8080/rest/company
						plumber request
							curl -v ...\
								-F sevk_emri_file=@input/20170103/sevk_emri.xlsx \
								http://localhost:8300/upload_run
						goal: unify these two
							curl -v ...\
								-d '{"sevk_emri_data": [...], "planningDate": "2017-01-03T00:00:00", "planId": "single_20170103a6"}'  \
								http://localhost:8300/post_run
						R code in `~/projects/itr/vrp/r/pkg/vrpdata/R/vrp_api.R`
					006.02 call R post_run from cjs
						url: 'http://localhost:8300/post_run',
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						send: '{"sevk_emri_data": [[...], ..."}',
				007 study_vrp: setup and running the projects v2 
					007.01 Produce data model files
						Write the following input files:
							dm/rdb/def/enum_value.xlsx ...
							dm/schema/yuml/datamodel_shipment.md ...
						Copy them into `yuml2data01` dm folder.
					007.02 Generate ddl.sql and sample_data.sql files
						Follow `walkthrough yuml2data01 <url:file:///~/projects/itr/vrp_doc/doc_itr.md#r=g10550>`
						Generate the following output files:
							dm/schema/gen/ddl.sql
							dm/schema/gen/views.sql
							...
						Copy them into actual database such as `vrp_psk01`
					007.03 Run the database from docker container
						Follow `walkthrough vrp_psk01 <url:file:///~/projects/itr/vrp_doc/doc_itr.md#r=g10551>`
						cd vrp_psk01
						docker-compose up 
					007.04 Run the java, R servers
						007.04.01 Setup mongo db 
							docker-compose -f docker-compose-mongo.yml up -d
							docker exec -it vrp_mongo_1 bash
							mongo admin
							db.createUser({ user: "administrator", ...});
							...
						007.04.02 Run Java Algorithm Service
							007.04.02a Run Java on Localhost
								Edit `~/projects/itr/vrp/itr_vrp/config_osx.yml`
								mvn package && java -jar target/vrp-0.1.jar server config_osx.yml
							007.04.02b Run Java on Docker
								Edit `~/projects/itr/vrp/itr_vrp/config.yml`
									applicationConnectors:
										port: 8080
								Edit `~/projects/itr/vrp/docker-compose3.yml`
									entrypoint:
										- "java"
										- "-jar"
										...
								docker-compose -f docker-compose3.yml up 
						007.04.03 Run R Backend on Localhost
							cd /Users/mertnuhoglu/projects/itr/vrp/r/pkg/vrpdata/
							Error: Empty reply from server
								ports:
									- "8200:8080"
						007.04.03b Run R Backend on Localhost with Plumber
							intro
								Run server from docker:
									cd /Users/mertnuhoglu/projects/itr/vrp/
									docker-compose -f docker-compose3.yml up 
								Install vrpdata library: 
								R
									pr <- plumber::plumb("R/vrp_api.R")
									pr$run(port=8300)
							opt01: Upload Files using Multipart
								Edit `~/projects/itr/vrp/r/pkg/vrpdata/R/vrp_api.R`
									file.move(from = formContents$sevk_emri_file$tempfile, to = sevk_emri_file)
								run curl
									curl -v \
										-F sevk_emri_file=@input/20170103/sevk_emri.xlsx \
										...
										http://localhost:8300/upload_run
							opt02: Pass Data as Form Parameters id=g10719
								Edit `~/projects/itr/vrp/r/pkg/vrpdata/R/vrp_api.R`
									post_run = function(sevk_emri_data, planningDate, planId) {
								Run curl:
									curl -v \
										...
										http://localhost:8300/post_run
							Error: NPE in Java
								opt01: hiç xlsx yazma, hep tsv olarak yaz
									opt01.03: dosyaları dışarıdan xlsx ve tsv olarak okuyup karşılaştır
							Error: empty reply from server
								opt02: Return anything
										call_java = function(...) {
											return(list(planId = planId))
							Error: java.time.format.DateTimeParseException: Text '2017-01-03T00%3A00%3A00' could not be parsed at index 13
								Fix:
									planningDate = URLdecode(formContents$planningDate)
							Error: could not find function \"%>%\"
								fix
									library(magrittr)
							Error: Error in fread(dec = ".", col_types = c("text",...)
								opt01: run post_run in R
								Why is sevk_emri data broken?
							Error: <assertError: is_empty(x = instances_with_no_attribute_value) is not TRUE> id=g10754
								opt01: Systematic elimination of options
								Why is `order$company_id` empty?
									Compare sevk_emri_file between R run and curl run:
								Why are sevk_emri_file between R and curl runs different?
								Solution: new curl command:
									tsv to json
										Use: https://codebeautify.org/tsv-to-json-converter
							Error: Why does curl run produce additional header line in sevk_emri.tsv file?
								opt01: Use write.table instead of rio::export
									readr::write_tsv(sevk_emri_data, sevk_emri_file, na = "")
							Error: is.data.frame(x) is not TRUE
								sevk_emri_data is read as `matrix.` We need to convert it to `data.frame`:
									titles = sevk_emri_data[1,]
									sem = dplyr::as_data_frame(sevk_emri_data[2:nrow(sevk_emri_data),]) %>%
										setNames(titles)
					007.05 Upload big data 
						intro
							Normal case:
								-d '{"sevk_emri_data": [["order_extid", ...
							Pass data as json file:
								-d '@data.json'  \
								--data '@/Users/mertnuhoglu/projects/itr/vrp/data/jtn/input/20170103/sevk_emri.json'  \
						Error: in (function (sevk_emri_data, planningDate, planId) : argument \"sevk_emri_data\" is missing, with no default\n"]}
							, "planningDate": "2017-01-03T00:00:00"
						Error: assert "assert_non_na: /Users/mertnuhoglu/projects/itr/vrp/data/jtn/verify/default/assert_non_na_Order$company_id.tsv"
							"2e+85",
					007 Summary
						007.01 Upload Data to R and Java Servers and Run Optimization 
							Step 01: Setup mongo db as described in [007.04.01 Setup mongo db](#setup_mongo_db)
							Step 02: Run vrp server from docker:
								docker-compose -f /Users/mertnuhoglu/projects/itr/vrp/docker-compose3.yml up 
							Step 03: Run R plumber server:
								pr <- plumber::plumb("R/vrp_api.R")
								pr$run(port=8300)
							Step 04: Test it
								Run curl command with big data: `~/projects/study/js/vrp/ex/study_vrp/post_run_01/curl02.sh`
								Output: `/Users/mertnuhoglu/projects/itr/vrp/data/jtn/out/plan_single_20170103a6.xlsx`
						007.02 Options  id=g10755
							007.02.01 Running R Services in R Console


## unclassified

	refs
		functional programming in js - js fp - jsfp <url:file:///~/Dropbox/mynotes/content/code/cfp/cfp.md#r=g10606>
	unclassified
    generator functions
      function* mdn
        https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*
        Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.
        ex
          function* idMaker() {
            var index = 0;
            while (index < 3)
              yield index++;
          }
          var gen = idMaker();
          console.log(gen.next().value); // 0
          console.log(gen.next().value); // 1
        ex
          function* anotherGenerator(i) { yield i + 1; }
          function* generator(i) {
            yield i;
            yield* anotherGenerator(i);
            yield i + 10;
          }
          var gen = generator(10);
          console.log(gen.next().value); // 10
          console.log(gen.next().value); // 11
      Iterators and generators
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators
        iterators
          object is an iterator
            when it knows
              how to access items 
              while keeping track of current position
            in js
              next() method
                returns: object with done and value
          code
            function makeIterator(array) {
              var nextIndex = 0
              return {
                next: function() {
                  return nextIndex < array.length ?
                    {value: array[nextIndex++], done: false} :
                    {done: true};
                  }
                }
              }
          code - use
            var it = makeIterator(['yo', 'ya'])
            console.log(it.next().value) // yo
            console.log(it.next().value) // ya
        generators
          syntactic sugar to simplify iterator functions
          code 
            function* idMaker() {
              var index = 0;
              while(true)
                yield index++;
            }
            var gen = idMaker();
            console.log(gen.next().value); // 0
            console.log(gen.next().value); // 1
        iterable
          iterable if can be loop in a for loop
          must implement @@iterator method
            object has a property with Symbol.iterator key
          code
            var myIterable = {};
            myIterable[Symbol.iterator] = function* () {
                yield 1;
                yield 2;
                yield 3;
            };
            for (let value of myIterable) { 
                console.log(value); 
            }
            // 1
            // 2
            // 3
            or
            [...myIterable]; // [1, 2, 3]
        built-in iterables  
          String, Array, TypedArray, Map, Set
          their prototype objects have a Symbol.iterator method
        syntaxes expecting iterables
          for-of, spread operator, yield*, destructuring assignment
          code
            for (let value of ['a', 'b']) {..}
            [...'abc']
            function* gen() {
              yield* ['a','b']
            }
            gen().next()
            [a,b,c] = new Set(['a','b','c'])
            a
    bir satırın nerelerden çağrıldığını nasıl buluruz?  
      console.trace()
    CORS
      same-origin policy
        js cannot access resources from other websites. 
        it can access resources from that same site
      problem with file://
        origin becomes "null"
        thus you cannot import other js modules
      solution
        make the resources 
    json-server: mockup rest services
      
    Craig Spence - Fantastic ASTs and where to find them
      https://www.youtube.com/watch?v=UKCoRKzRqN4
    Alexander Pope - OUTBREAK: index-sw-9a4c43b4b4778e7d1ca619eaaf5ac1db.js
      https://www.youtube.com/watch?v=t7WraVE8rY8
    Brittany Storoz - A year of other’s bugs: the sad state of error handling
      https://www.youtube.com/watch?v=fQHH6aSpYV0
    Eirik Vullum: JavaScript Metaprogramming - ES6 Proxy Use and Abuse | JSConf Budapest 2017
      https://www.youtube.com/watch?v=_5X2aB_mNp4
      prevent XSS
    Dan Callahan: Practical WebAssembly | JSConf Budapest 2017
      https://www.youtube.com/watch?v=bac0dGQbUto
      chrome devtools > console > select an object > right > make global
    David Khourshid: Simplifying Complex UIs with Finite Automata & Statecharts | JSConf Iceland 2018
      https://www.youtube.com/watch?v=RqTxtOXcv8Y
    Will Klein: End to End Testing: The Game Has Changed | JSConf Iceland 2018
      https://www.youtube.com/watch?v=C1D94jWy8uE
    Kate Compton: Creating generative art with Javascript | JSConf Iceland 2018
    Dominik Kundel: XSS, CSRF, CSP, JWT, WTF? IDK ¯\_(ツ)_/¯ | JSConf Iceland 2018
    Opher Vishnia: Wait, you can do that with JavaScript…!? | JSConf Iceland 2018
    Deploying serverless Node.js microservices (Google I/O '18)
    Jake Archibald: In The Loop - JSConf.Asia 2018
    The ServiceWorker: The network layer is yours to own
    Debugging in 2017 with Node.js-Xb_0awoShR8.mp4
      node --inspect script.js
      node --inspect-brk script.js
        # breaks at first line
        open chrome devtools:
      chrome > about:inspect
      column breakpoint
        multiple breakpoints inside callback lines
      don't walk into some lines:
        right > Blackbox script
      console when paused (live edit)
        arguments
        update source lines > ^s (hotload live edits)
      start debugging an existing node process
        process._debugProcess()
      cli debugger
        node inspect hello.js
        > help
      drive with devtools protocol via ws port
      tracing in node
        chrome://tracing
        node --trace-events-enabled
