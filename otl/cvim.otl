
quicklist: kendi kullanım yöntemlerim - ndx id=g14299
	otl-yaml:
		otl yaml dokümanlarındaki bilgileri etkili dolaşma (navigasyon)  <url:file:///~/projects/study/otl/cvim.otl#r=g12603>
		convert:- otl to yaml: <url:file:///~/projects/myrepo/otl/notesme.otl#r=g12590>
		normalize yaml tree: <url:file:///~/projects/myrepo/otl/notesme.otl#r=g12588>
		FindYamlElement: bulunduğun yaml elementine referansları bul <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12617>
		ConvertHeading2YamlElement: bulunduğun başlığı bir yaml elementine çevirir referansıyla id=g12622
		Yaml kısayolları:
			ref:
				which-key yaml_map: SPC ü y   <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12616>
		Bookmarklarla tasnif etme:
			ref:
				which-key vim-bookmarks: SPC m <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12560>
	teg kullanımı
		neoscopes: teglere hızlı erişim <url:file:///~/projects/study/otl/cvim.otl#r=g14298>
pnt
	LuaSnips Configuration and Setup
		Introduction to LuaSnip - Youtube `prg/vim` || ((833457c0-3c05-4b80-b50e-262d96a6b543))
		[[snips.lua]]  `prg/vim` || ((f9e37d52-47f4-4d13-a7b6-11b0c0479ceb))
	ndx/lazyvim docs
	  id:: 4a4612e6-70d3-4447-bab8-7a888f54d520
		[[20230328-Neovim-LazyVim-Kurulum]]
		LazyVim config
			Default: 
				~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/init.lua
				[[lua/lazyvim/init.lua]]
			Options: 
				~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/options.lua
			Key mappings: 
				~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/config/keymaps.lua
				[⌨️ Keymaps - LazyVim](https://www.lazyvim.org/keymaps)
			Plugins: 
				Editor: ~/.local/share/nvim/lazy/LazyVim/lua/lazyvim/plugins/editor.lua
		My config: 
			Init: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/init.lua
			Options: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/config/options.lua
			Key mappings: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/config/keymaps.lua
			Plugins:
				All plugins: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/plugins/plugins.lua
				Gruvbox: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/plugins/gruvbox.lua
				Change plugin settings: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/plugins/alpha.lua
				Belli bir kısayolla aktifleşen plugin: `~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/plugins/file-browser.lua`
				Disable plugin: `~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/plugins/disabled.lua`
				Treesitter: ~/prj/private_dotfiles/.config/nvimconfigs/lazyvim/lua/plugins/treesitter.lua
			ftplugin:
				votl: ~/prj/private_dotfiles/.vim/ftplugin/votl.vim
		My plugins:
			my-vim-lazyvim: `~/prj/private_dotfiles/vim/my-vim-lazyvim/plugin/my-vim-lazyvim.vim`
			my-vim-custom2: ~/prj/private_dotfiles/vim/my-vim-custom2/plugin/my-vim-custom2.vim
	neoscopes: teglere hızlı erişim id=g14298
		teglere hızlı erişim için neoscopes kullan
		:lua require('neoscopes').select() > kslt
		kslt.md dosyasındaki tegleri listeler
	[[20230504-vim--otomatik-dash--hyphen-tire--isareti-koyma]] <url:file:///~/prj/study/logseq-study/pages/20230504-vim--otomatik-dash--hyphen-tire--isareti-koyma.md#r=g14266>
	vim #error Çince karakterler görünüyor <url:file:///~/prj/study/logseq-study/journals/2023_04_26.md#r=g14260>
	markdown outline bullets: indent and outdent lines id=g14256
		<C-t> indent
		<C-d> outdent
		[key bindings - Is there a way to indent and outdent lines without moving the cursor? - Vi and Vim Stack Exchange](https://vi.stackexchange.com/questions/15247/is-there-a-way-to-indent-and-outdent-lines-without-moving-the-cursor)
		[(3) TIL in insert mode you can indent/outdent with C-t and C-d : vim](https://www.reddit.com/r/vim/comments/i6vpm3/til_in_insert_mode_you_can_indentoutdent_with_ct/)
			:h usr_30
			:h i_CTRL-F
			:h indentkeys-format
	Emmet HTML code template expansion autocompleter id=g14029
		imap   <C-k><C-k>   <plug>(emmet-expand-abbr) " <url:file:///~/.vim/bundle/my-vim-custom/plugin/my-vim-custom.vim#r=g14028>
	Bracey (live html preview) kullanımı id=g14027
		rfr
			[turbio/bracey.vim: live edit html, css, and javascript in vim](https://github.com/turbio/bracey.vim)
		:Bracey
	HTML Live previewer
		Bracey
	md bufferlarına özel kısayol nasıl tanımlanır? id=g13669
		[Can you have file type-specific key bindings in Vim? - Stack Overflow](https://stackoverflow.com/questions/6133341/can-you-have-file-type-specific-key-bindings-in-vim)
		autocmd FileType python map <buffer> <C-G> ...
	md dosyalarının file type'ı nedir? id=g13670
		set filetype?
		vimwiki
		autocmd FileType vimwiki map <buffer> <C-G> ...
	Generate UUID in Vim  id=g13451
		rfr
			Generate UUID in Vim <url:file:///~/projects/study/logbook/log_20221011.md#r=g13449>
		:r !uuidgen|tr "[A-Z]" "[a-z]"
	cecutil ile keybinding çatışması <url:file:///~/prj/myrepo/work/work4.otl#r=g13276>
	rfr: surfingkeys: vim kısayollarıyla tarayıcı kullanmak <url:file:///~/projects/study/otl/ccode.otl#r=g13255>
	markdown dosyasının hiyerarşisini nasıl görüyorduk? id=g13246
		SPC ü k t | VoomToggle
		SPC i SPC m | headings
	imlecin bulunduğu kelimeleri çek id=g12998
		ref
			FindYamlElement2: imleçin bulunduğu yaml ifadesine referansları bul <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12997>
		getline gibi benzer fonksiyonlar:
			getpos
			getpos(".")
			[0,5168,5,0]
			getcurpos: getpos(".") gibi
			[0, lnum, col, off, curswant] ~
			setpos('.', num)
		satırın bir pos'undan sonraki metnini almak
			substring: denk fonksiyonlar
				a01: [from,to]
					:h expr-[:]
				a02: strpart("..", from, to)
					Note: To get the first character, {start} must be 0.  For example, to get the character under the cursor: >
						strpart(getline("."), col(".") - 1, 1, v:true)
	message çıktısını buffer içine koyma id=g12685
		:put =execute('messages')
		:let @+ = execute('messages')
	dosya path'inden dosyaya zıplama  id=g12662
		<vimhelp:CTRL-W_F>
		gf | aynı pencere içinde
		^w F | split pencere içinde zıplar
		yalnız mevcut dizine göre path'leri yorumlar
	tab hareket ettirme (move tab = tabmove) id=g12632
		sağa taşıma
		:tabm +1
		sola taşıma
		:tabm -1
		belli bir pozisyona koyma
		:tabm 3
		:tabm[ove]
	otl yaml dokümanlarındaki bilgileri etkili dolaşma (navigasyon)  id=g12603
		ref
			folding and navigation settings <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12604>
		zj zk: maddeler arasında dolaşma
		zJ zK: diğer maddeleri kapatarak dolaşma
		zi ze: diğer maddeleri kapatarak dolaşma
	indent reformat lines
		== current line
		=4j
	bir syntax highlight renginin ne olduğu nasıl debug edilir? 
		[how to find out where a vim highlighting is defined? - Stack Overflow](https://stackoverflow.com/questions/4245171/how-to-find-out-where-a-vim-highlighting-is-defined)
		:verbose hi CursorLine
	check localleader and leader
		:echo mapleader
		:let mapleader = "\<Space>"
	change color in colorscheme theme id=g12477
		1. ilgili colorscheme dosyasını bul
			örn:
				~/.vim/bundle/vim-colorschemes/colors/PapayaWhip.vim
		2. buradaki renkleri tek tek değiştir
			örneğin: Papaya temasında _ karakterlerinin arka fonu kırmızılaştırılmış
			tek tek guifg renklerini değiştirip deneme yap
			sonuç:
			hi Error guifg=#c43060 ctermfg=167 guibg=NONE ctermbg=NONE gui=NONE cterm=NONE
	colorscheme themes id=g11968
		dark
			rigel
			oceanicnext
			Monokai
			parsec
			MountainDew
				yeşil arka fonlu
			SlateDark
				bir tek which-key menüsünün arka fonu ve comment satırları düzgün okunmuyor
			sierra
			gloom-contrast
			allure-contrast
			one
			onedark
			nordisk
			pyte
			lightning
			termschool
			nord
			northsky: lacivert
			norwaytoday
			obsidian2
		light
			papercolor
			lightning
			bold-light
			PapayaWhip
			oceanicnextlight
			newton-light
			hub-light
			nuvola
	delete up to matched line
		g/Notlar/,/Bulgular/ d
			delete from line "Notlar" upto line "Bulgular"
		g/Notlar/,/Bulgular/-1 d
			delete from line "Notlar" upto one line before line "Bulgular"
	:make command
		:make
			runs make build
		:cn
			next error
	:marks
		lists all marks
	smart case - case insensitive search
		opt01: \c
			/\c<keyword>
			https://stackoverflow.com/questions/2287440/how-to-do-case-insensitive-search-in-vim
		opt02: 
			set ignorecase
			set smartcase
		opt03: 
			set ignorecase
	highlight specific words
		https://stackoverflow.com/questions/27686440/in-vim-editor-how-can-some-specific-words-be-always-highlighted
			<vimhelp:highlight>
			<vimhelp:match>
			ex
				hi! Important ctermbg=red guibg=red
				match Important /!Important!/
			ex: see active highlight-groups
				:so $VIMRUNTIME/syntax/hitest.vim
			ex: add to existing groups
				match Title /\<fromNullable\>/
	make current window full screen
		üt: opens a new tab with current window
		^W T: same but closes current window
	open a repl inside vim
		gQ
	getting file path
		help filename-modifiers
		ex
			expand("%:p:h")
				full path of directory of current file
			expand("%:p")
				full path of current file
				p: full path
			expand("%:r")
				root of file name: file extension removed
			let file_name = expand('%:t:r')
				get file name
			cd %:p:h
		<vimhelp:filename-modifiers>
			:p
				make file_name a full path
			:~
				reduce file name to be relative to home dir
			:.
				reduce file name to be relative to current directory
			:h
				head of file name (last component)
		ex: from help
			Examples, when the file name is "src/version.c", current dir
			"/home/mool/vim": >
				:p			/home/mool/vim/src/version.c
				:p:.				       src/version.c
				:p:~				 ~/vim/src/version.c
				:h				       src
				:p:h			/home/mool/vim/src
				:p:h:h		/home/mool/vim
				:t					   version.c
				:p:t					   version.c
				:r				       src/version
				:p:r			/home/mool/vim/src/version
				:t:r					   version
				:e						   c
				:s?version?main?		       src/main.c
				:s?version?main?:p	/home/mool/vim/src/main.c
				:p:gs?/?\\?		\home\mool\vim\src\version.c
			Examples, when the file name is "src/version.c.gz": >
				:p			/home/mool/vim/src/version.c.gz
				:e						     gz
				:e:e						   c.gz
				:e:e:e					   c.gz
				:e:e:r					   c
				:r				       src/version.c
				:r:e						   c
				:r:r				       src/version
				:r:r:r			       src/version
	tab colors
		lightline gibi tabline eklentisi kullanıyorsan, oradan değiştirmelisin
			ref
				lightline: statusline/tabline  <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10570>
		https://stackoverflow.com/questions/7238113/customising-the-colours-of-vims-tab-bar
			:hi TabLineFill ctermfg=LightGreen ctermbg=DarkGreen
			:hi TabLine ctermfg=Blue ctermbg=Yellow
			:hi TabLineSel ctermfg=Red ctermbg=Yellow
			This line affects the window counter per tab:
			:hi Title ctermfg=LightBlue ctermbg=Magenta
neovim documentation
	LSP lsp2 id=g12575
		ref
			[Neovim - Native LSP Setting Up Autocomplete and Language Servers - YouTube](https://www.youtube.com/watch?v=NXysez2vS4Q)
		features
			| gd | goto definition |
			| gr | goto reference |
			autocompletion
			diagnostics:
				error messages
				| ^n/p | next/prev error |
			code actions:
				intentions
				:LspCodeAction
		neovim LSP id=g12576
			ref
				LSP lsp2 <url:file:///~/projects/study/otl/cvim.otl#r=g12575>
				[Neovim - Native LSP Setting Up Autocomplete and Language Servers - YouTube](https://www.youtube.com/watch?v=NXysez2vS4Q)
				~/projects/private_dotfiles/.config/nvim/lua/lsp.lua
			nvim-lspconfig
				clojure-lsp
					ref
						[clojure-lsp/clojure-lsp: Language Server (LSP) for Clojure](https://github.com/clojure-lsp/clojure-lsp)
						~/.lsp/config.edn
				check if lsp client has attached:
					lua print(vim.inspect(vim.lsp.buf_get_clients()))
				yaml
					ref
						[nvim-lspconfig/server_configurations.md at master · neovim/nvim-lspconfig](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#yamlls)
				bash
					ref
						[bash-lsp/bash-language-server: A language server for Bash](https://github.com/bash-lsp/bash-language-server)
				lua
					ref
						[sumneko/lua-language-server: Lua Language Server coded by Lua](https://github.com/sumneko/lua-language-server)
				sql
					ref
						[nanotee/sqls.nvim: Neovim plugin for sqls that leverages the built-in LSP client](https://github.com/nanotee/sqls.nvim)
						[lighttiger2505/sqls: SQL language server written in Go.](https://github.com/lighttiger2505/sqls)
plugins
	Emmet (HTML code complete expansion template)
		rfr
			Emmet HTML code template expansion autocompleter <url:file:///~/projects/study/otl/cvim.otl#r=g14029>
	Bracey (live html preview)
		rfr
			Bracey (live html preview) kullanımı <url:file:///~/projects/study/otl/cvim.otl#r=g14027>
	calendar id=g13674
		rfr
			[renerocksai/calendar-vim: calendar vimscript](https://github.com/renerocksai/calendar-vim)
		:Calendar
		:CalendarT
			full screen
	vimwiki id=g13671
		wikilink linklerinin navigasyonu için
		örnek: [[this-is-a-link]]
		alternatif: mkdnflow
		mkdnflow lua ile yapılmış, ama vimwiki daha düzgün çalışıyor
		ancak vimwiki her dosya açılırken "no mapping found" warning mesajları veriyor
	mkdnflow id=g13668
		rfr
			[jakewvincent/mkdnflow.nvim: Fluent navigation and management of markdown notebooks](https://github.com/jakewvincent/mkdnflow.nvim)
			~/prj/private_dotfiles/.config/nvim/lua/mert/mkdnflow.lua
		wikilink linklerinin navigasyonu için
		örnek: [[this-is-a-link]]
		ancak bu wikilink stilinde çalıştırmayı başaramadım. şunlarla çalışıyor:
			[[Working-Environment|Title]]
			[[Working-Environment|]]
			[Working-Environment.md](Working-Environment.md)
			[Working-Environment.md](./Working-Environment.md)
		alternatif: vimwiki
	lsp plugins
		lspkind-nvim
			ref
				[Autocomplete with nvim-cmp - Neovim Lua From Scratch #9 - YouTube](https://www.youtube.com/watch?v=5lPA8LpMytI)
			autocomplete popup listesinde Text, Property vs yanında sembol gösterimi
	lualine.vim id=g12598
		ref
			~/projects/private_dotfiles/.config/nvim/lua/statusline.lua
	packer.nvim  id=g12573
		ref
			[wbthomason/packer.nvim: A use-package inspired plugin manager for Neovim. Uses native packages, supports Luarocks dependencies, written in Lua, allows for expressive config](https://github.com/wbthomason/packer.nvim)
		description: plugin manager
			lua tabanlı
			en iyisi diyorlar NeoVim 0.5+ için
		how to use:
			edit ~/.config/nvim/lua/plugins.lua
			:PackerCompile
			:PackerInstall
			:PackerUpdate
	telescope id=g12561
		shortcuts
			ref: https://github.com/nvim-telescope/telescope.nvim#default-mappings
			^/ | help menu (insert mode)
			esc | normal mode
			? | help menu (normal mode)
			^d ^u	| scroll dn/up in preview
		file_browser
			telescope > file_browser
			description: klasörler ve dosyalar arasında dolaşmayı sağlar
		vim-bookmarks
			ref
				vim-bookmarks <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12655>
				[MattesGroeger/vim-bookmarks: Vim bookmark plugin](https://github.com/MattesGroeger/vim-bookmarks)
		telescope-vim-bookmarks id=g12563
			ref
				vim-bookmarks <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12560>
				[tom-anders/telescope-vim-bookmarks.nvim: Integrates vim-bookmarks into telescope.nvim](https://github.com/tom-anders/telescope-vim-bookmarks.nvim)
		telescope-zoxide id=g12564
			ref
				zoxide settings: <url:file:///~/projects/private_dotfiles/.config/nvim/lua/mytelescope.lua#r=g12565>
				[jvgrootveld/telescope-zoxide: An extension for telescope.nvim that allows you operate zoxide within Neovim.](https://github.com/jvgrootveld/telescope-zoxide)
			shortcuts
				^s	open directory
				^q	split directory
		telescope-fzf-native id=g12566
			ref
				fzf-native settings: <url:file:///~/projects/private_dotfiles/.config/nvim/lua/mytelescope.lua#r=g12567>
				[nvim-telescope/telescope-fzf-native.nvim: FZF sorter for telescope written in c](https://github.com/nvim-telescope/telescope-fzf-native.nvim)
			description:
				fzf sentaksını kullanmana izin verir
				$: end of line
				': exact match
				etc.
		telescope-repo
			ref
				[cljoly/telescope-repo.nvim: 🦘 Jump into the repositories (git, mercurial…) of your filesystem with telescope.nvim, without any setup](https://github.com/cljoly/telescope-repo.nvim)
		neoclip id=g12571
			ref
				neoclip settings <url:file:///~/projects/private_dotfiles/.config/nvim/lua/mytelescope.lua#r=g12570>
	vinegar
		bookmarking a directory
			mb        mark bookmark
			{cnt}gb   go back to bookmarked dir
			mB        delete bookmark
		shortcuts
			I   help
			i   file information
			-   open explorer
			enter     open file
			o         open horizontal split
			v         open vertical split
			.         prepopulate command line
			!         prepop with bang
			cg cl     add to cd lcd
			:Ntree    change path
			a         switch appearance of files
			d         new dir
			%         new file
			file copying
				mt      mark target dir
				mf      mark files
				mc      copy files
	TableMode
		https://github.com/dhruvasagar/vim-table-mode
		start using
			:TableModeToggle
				ütm
		table mode
			enter first line
				| col1 | col2 |
			second line
				||
			body lines
				| content 1 |
			last line
				||
		convert existing content into a table
			:Tableize
				ütt
			default separator: ,
				g:table_mode_tableize_map
			:Tableize/;
				separator: ;
				üT
					take input from cmd line
		examples
			can be indented too
			| col 1 | col 2  |
			|-------|--------|
			| pg1   | pg 2   |
			| cl15  | cl35_a |
			|-------|--------|
	voom
		outline navigation
		outline navigation in tree
			click    move
			i I    beginning of node
			space    toggle node
			left/right    to parent/child
		voomgrep
			very sophisticated search tool
		moving
			^^  ^up  üu
			--  ^dn  üd
			<<  ^lf  ül
			>>  ^rg  ür
			yy  "+ register
			dd
			pp
	surround
		<vimhelp:*surround-mappings*>
		ys[object]
			ysw	surround word
			ysa'	surround quoted text
	install plugins
		vim-plug plugin manager
		put new line
		open nvim
			:PlugInstall
	tabular: align
		ref
			tabular align text <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g11680>
	spacemacs
		cheatsheet.nvim
			ref
				[sudormrfbin/cheatsheet.nvim: bundled cheatsheets for the editor](https://github.com/sudormrfbin/cheatsheet.nvim#installation)
		which-key.nvim
			ref
				~/projects/private_dotfiles/.config/nvim/lua/mert/which-key.lua
		vim-which-key
			ref
				vim-which-key spacemacs emacs-which-key port {{{ <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g11679>
				<url:vimhelp:vim-which-key>
	deoplete - autocomplete
	easymotion - quick move chars
		m: my leader
		mmw		move by word
		mmf		search by letter
		mmj/k		up/down lines
		mmn/N		by / search
	vim-markdown
		https://github.com/plasticboy/vim-markdown
		shortcuts
			jump/navigate
				]]    next
	tsuquyomi: typescript
		TsuDefinition
		TsuReferences
		TsuImplementation
	lightline: statusline/tabline  id=g10570
		lightline: statusline/tabline  <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10570>
		let g:lightline = {
					\ 'colorscheme': 'solarized',
		tema tanımları:
			~/.vim/bundle/lightline.vim/autoload/lightline/colorscheme/solarized.vim
		tabların rengi temadan belirlenir
	votl
		outline navigation in tree
			click    move
			i I    beginning of node
			space    toggle node
			left/right    to parent/child
		voomgrep
			very sophisticated search tool
		moving
			^^  ^up  üu
			--  ^dn  üd
			<<  ^lf  ül
			>>  ^rg  ür
			yy  "+ register
			dd
			pp
	ale: LSP Language Server Protocol Client id=g10563
		ale: LSP Language Server Protocol Client <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10563>
		typescript
			let b:ale_fixers = { 'typescript': ['eslint', 'prettier'] }
		<vimhelp:ale-typescript-options>
		<vimhelp:ale-javascript-eslint>
		<vimhelp:*ale-completion>
		<vimhelp:*ALEGoToDefinition>
		<vimhelp:ALEHover>
		articles
			https://dmerej.info/blog/post/lets-have-a-pint-of-vim-ale/
				intro
					edit lint.sh
						pycodestyle . 
						python bin/run-pyflakes.py
				shortcomings of the makeprg
					finding binaries to run
						when in node_modules/.bin
					forgetting to run :make
					parsing errorformat
				switching to vim-ale
					runs `eslint` with zero configuration
					runs in background
				customization
					run only after saving the file
						let g:ale_lint_on_text_changed = 'never'
					don't run right after opening a file
						let g:ale_lint_on_enter = 0
				location list
					like quickfix window
						:lprevious :lnext 
				custom mappings
					nnoremap <space>l :lnext<CR>
					nnoremap <space>p :lprevious<CR>
					nnoremap <space>r :lrewind<CR>
				back to python
			https://dmerej.info/blog/post/how-i-lint/
				running linters from vim
					set makeprg=ci/lint.sh
					:make
	fugitive.vim id=g10519
		fugitive.vim <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10519>
		ref
			http://vimcasts.org/categories/git/
		use cases
			ex01: mevcut dosyayı commit et
				Gwrite
				Gcommit %
		.gitconfig
		Gwrite
			Git add %
		Gread
			Git checkout %
		Gremove
			:Git rm %
			:bwipeout
		Gmove dest/path
			:Git mv original/path dest/path
			:bwipeout original/path
			:edit dest/path
			# relative/absolute
				relative to current file
				absolute: relative to git repo
		Gcommit
			git commit
			# auto completion
				:help 'complete'
		Gblame
			# shows last updates by whom
			# vertical split
		Glog
			# loads previous revisions into quickfix
			Glog -10
			:cnext # go to prev version
				unimpaired.vim to 
					[q ]q
					[Q ]q
			Gedit # return to current revision
			:copen
			Glog -10 --reverse
			Glog -1 --until=yesterday
			Glog --
				loads logs into current buffer
	unimpaired.vim id=g10520
		unimpaired.vim <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10520>
		<vimhelp:unimpaired-next>
		*[q*     |:cprevious|
		*]q*     |:cnext|
		*[Q*     |:cfirst|
		*]Q*     |:clast|
	fuzzy finders
		fzf: fuzzy file finder <url:/Users/mertnuhoglu/Dropbox/mynotes/content/code/ccode.md#tn=vim plugin: fzf.vim>
	file explorers
		netrw - builtin explorer
			https://shapeshed.com/vim-netrw/
			<url:/Users/mertnuhoglu/.vim/bundle/my-vim-custom/plugin/my-vim-custom.vim#tn=" NERDtree like setup>
				:Vexplorer
		vimfiler
			help
				:VimFiler # run
				:let g:vimfiler_as_default_explorer = 1  # default explorer
				:VimFilerExplorer # sidebar
				:VimFilerDouble # double pane
				:VimFilerCurrentdir
			default keymappings
				problem/does not work
					<Enter>     <Plug>(vimfiler_cd_or_edit)
				basic
					<BS>      <Plug>(vimfiler_switch_to_parent_directory)
					a cd  change current directory 
					t     <Plug>(vimfiler_expand_tree)
					gs      <Plug>(vimfiler_toggle_safe_mode)
					e     <Plug>(vimfiler_edit_file)
					T     <Plug>(vimfiler_expand_tree_recursive)
					o     <Plug>(vimfiler_expand_or_edit)
					a     <Plug>(vimfiler_choose_action)
					<Space>     <Plug>(vimfiler_toggle_mark_current_line)
				file commands
					yy      <Plug>(vimfiler_yank_full_path)
					c     <Plug>(vimfiler_copy_file)
					m     <Plug>(vimfiler_move_file)
					d     <Plug>(vimfiler_delete_file)
					r     <Plug>(vimfiler_rename_file)
					K     <Plug>(vimfiler_make_directory)
					N     <Plug>(vimfiler_new_file)
				directories
					gc      <Plug>(vimfiler_cd_vim_current_dir)
					L     <Plug>(vimfiler_switch_to_drive)
					<url:file:///~      <Plug>(vimfiler_switch_to_home_directory)>
					\     <Plug>(vimfiler_switch_to_root_directory)
					&     <Plug>(vimfiler_switch_to_project_directory)
					<C-j>     <Plug>(vimfiler_switch_to_history_directory)
				switch windows
					<Tab> (default)
								<Plug>(vimfiler_switch_to_another_vimfiler)
					<Tab> (enabled "no-quit" and "split" options)
								<Plug>(vimfiler_switch_to_other_window)
					q     <Plug>(vimfiler_hide)
					Q     <Plug>(vimfiler_exit)
					-     <Plug>(vimfiler_close)
					g?      <Plug>(vimfiler_help)
				system-shell
					v     <Plug>(vimfiler_preview_file)
					ge      <Plug>(vimfiler_execute_external_filer)
					H     <Plug>(vimfiler_popup_shell)
					!     <Plug>(vimfiler_execute_shell_command)
					gr      <Plug>(vimfiler_grep)
					gf      <Plug>(vimfiler_find)
					Y     <Plug>(vimfiler_pushd)
					P     <Plug>(vimfiler_popd)
			steps
				plug keymappings nerede tanımlanıyor?
					vimfiler_cd_input_directory
					nnoremap <buffer><silent> <Plug>(vimfiler_cd_input_directory)
								\ :<C-u>call <SID>cd_input_directory()<CR>
				utl ile help url'lerine nasıl link veriliyordu?
					<url:vimhelp:vimfiler-default-key-mappings>
		nerdtree - file explorer
			keybindings
				<vimhelp:NERDTreeMappings>
				my customizations
					e  preview file 
				open
					o/enter		open file
					go  preview file
					t/T		tab/silently
					i/gi	split/silently
					s/gs	vsplit/silently
				tree navigation
					x/X		close dir/recursively
					P		jump to root
					p		jump to parent
					K/J		top/tail of branch
					^K/J	up/dn sibling of dir
				change dirs
					C		change root to selected dir
					u		up one dir
						U		keep old root open
					r/R		refresh/all
					cd	change cwd to node
					CD	change root to cwd
				toggles
					m		menu
					I		hidden files
					B		toggle bookmarks
					q		quit
					A		maximize window
					?		help
				bookmarks
					D		delete
					:Bookmark <name>		new bookmark
	swoop: search globally with preview
		https://github.com/pelodelfuego/vim-swoop
		<url:file:///~/.vim/bundle/vim-swoop/README.md>
		direct command	
			:Swoop <pattern>
				single buffer search
				ül
			:Swoop! <pattern>
				all buffers
				üml
		:q	quit
		:w  save
	Utl: universal text links
		help
			<vimhelp:utl-tutUI>
			:Utl <command> <operand> <mode>
				:Utl openLink underCursor edit  " default
				:Utl openLink underCursor split " Open link in split window
				:Utl openLink underCursor tabe  " Open link in new tab
			command completion works
				:Utl <Tab>
			visual selection
				ex:
					select line with ex command:
					:ls
				:Utl openLink visual
				:Utl o v
			vimscript scheme (ex commands)
				<url:vimscript:ls>
				<url:vimscript:split|call input('I will open a new window now!')>
				<url:vimscript:call input('Hit %3creturn%3e to continue')>
					hex value for < %3c > %3e
				global variables must be prefixed with g
				smart samples <vimhelp:utl-smartSamples>
					lookup word
						nmap ,l :exe ":Utl ol http://dict.leo.org/?search=" . expand("<cword>")
					jump to an open window/tab
						:set switchbuf=usetab
					backup a file
						<url:vimscript::let dt=strftime('%Y%m%d_%H%M') | exe ':w /tmp/'.dt.'_%:t'>
		linking and references
			<url:vimhelp:%5cM>
			<url:vimhelp:vimfiler-default-key-mappings>
		id
			<url:#r=come-here>
			id=come-here
		text next
			<url:#tn=some text>
			here will come some text
			or
			<url:#some text>
		file links
			<url:../plugin/utl.vim>
			<url:../plugin/utl.vim#tn=thanks for>
			<url:../problem_data_model_20160305.md#r=come-here>
		url
			<url:http//www.vim.org>
		embedding-less links
			filename.txt
		custom utl links
			ex
				" open <url:yt:T-1265>
				" opens: http://yt.teuis.net/issue/T-1265
				let btId = UtlUri_unescape( UtlUri_opaque(a:url) )
				" btId = T-1265
			ex: <url:/Users/mertnuhoglu/.vim/bundle/my-vim-custom/plugin/my-vim-custom.vim#tn=function! Utl_AddressScheme_f>
			ex
				<url:/Users/mertnuhoglu/.vim/bundle/my-vim-baku-project/plugin/my-vim-baku-project.vim#tn=fu! Utl_AddressScheme_yt(url, fragment, dispMode)>
				fu! Utl_AddressScheme_yt(url, fragment, dispMode)		
					" open <url:yt:T-1265>
					" opens: http://yt.teuis.net/issue/T-1265
					let btId = UtlUri_unescape( UtlUri_opaque(a:url) )
					let btUrl = 'http://yt.teuis.net/issue/'.btId
					return  Utl_AddressScheme_http(btUrl, a:fragment, a:dispMode)
				endfu
			ex
				<url:/Users/mertnuhoglu/.vim/bundle/my-vim-baku-project/plugin/my-vim-baku-project.vim#tn=fu! Utl_AddressScheme_p(url, fragment, dispMode)>
				fu! Utl_AddressScheme_p(url, fragment, dispMode)		
					" p:#p01
					" opens: /~/Dropbox (BTG)/TEUIS PROJECT 00-BTG TEAM FOLDER/problems/problem_rdb_review/problem_rdb_review_tracking.md#p01
					let btId = UtlUri_unescape( UtlUri_opaque(a:url) )
					echo btId
					let filepath = '/~/Dropbox (BTG)/TEUIS PROJECT 00-BTG TEAM FOLDER/problems/problem_rdb_review/problem_rdb_review_tracking.md#r='
					let btUrl = filepath . btId
					echom btUrl
					let result = Utl_AddressScheme_file(btUrl, a:fragment, a:dispMode)
					return result
				endfu
	vim-polyglot
		collection of language packs
		https://github.com/sheerun/vim-polyglot
	vim-db database client
		https://github.com/tpope/vim-db
		:DB postgresql:///<dbname> <sql>
		DB postgresql:///app select * from data.client
			sql query 
		DB postgresql:///<dbname> < <sql_file>
			import external sql file
		DB g:prod = postgresql://superuser:superuserpass@localhost/app
			DB g:prod select * from data.client
			# global variable: g:prod
		DB postgresql:///$PGDATABASE select * from data.client
			environment var: $PGDATABASE
	vimproc
		install
			$ make
				from vimproc repo
		examples  
			let file = vimproc#fopen("./meta.R", "O_RDONLY", 0)
			let res = file.read()
			call file.close()
			new
			call append(0, split(res, '\r\n\|\r\|\n'))
	ctags
		http://andrewradev.com/2011/06/08/vim-and-ctags/
			static tags
				ex
					set tags+=~/tags/rails.tags
			taglist: for using tag data in your own functions
				ex
					let tags = taglist('^'.a:name)
					let tags = filter(tags, 'v:val["kind"] == "f"')
		multiple tags file
			opt01
				set tags=./tags
			check which tags file is used
				let tagfiles = tagfiles()
				echo tagfiles
			set tags=./tags,./../tags,./../../tags,./../../../tags,tags
			<vimhelp:tagfiles()>
			<vimhelp:'tags'>
		universal-ctags
			https://github.com/universal-ctags/ctags
				manual
					Universal-ctags doesn't load ~/.ctags and ./.ctags at starting up time. 
					it loads ~/.ctags.d/*.ctags and ./.ctags.d/*.ctags. 
			http://docs.ctags.io/en/latest/
				official documentation
			debugging
				ctags --verbose -R .
					# shows what config options are loaded
			error: --exclude patterns are ignored
				cause: ~/.ctags.d/.ctags file is ignored
				put options into ~/.ctags.d/js.ctags 
			how does gutentags find the project root to create "tags" file?
				<url:vimhelp:gutentags_add_default_project_roots>
				checks for project markers:
					.git .hg _FOSSIL_
			pattern for js
				https://github.com/romainl/ctags-patterns-for-javascript
					fix: replace F with f
						--regex-javascript=/^[ \t]*const[ \t]\{1,\}\([a-z][A-Za-z0-9_$]\{1,\}\)[ \t]*=[ \t]*([^\*]/\1/F,Function,Functions/b
		https://medium.com/@kuiro5/best-way-to-set-up-ctags-with-neovim-37be99c1bd11
			install universal-ctags
				brew install --HEAD universal-ctags/universal-ctags/universal-ctags
			install vim-gutentags
				async updates tag file on save
		error: E257: cstag: tag not found
			https://stackoverflow.com/questions/4137359/vim-ctags-setup
			opt1
				:set tags?
				tags=~/.vim/vimoutliner/vo_tags.tag,./tags
			opt2
				cstag is wrong command
					verb map <c-]> 
					verb map Ü
					verb set cst? 
					#> cscopetag
					remove cscope from .vimrc
			disable cscope in vim
		https://andrew.stwrt.ca/posts/vim-ctags/
			41 languages supported
			using ctags
				ctags -R .
				ctags -R -f ./.git/tags .
					put tags file into .git
			using in vim
				:tag function_name
			vim commands
				:tag /^asserts_*
					find all tags that start with asserts_
				:ts :tselect
				: show list
				:tn :tnext
				:tp
				:tf :tfirst
				:tl :tlast
				:tags
					show tags you've traversed
			vim+ctags+ctrlp
				:CtrlPTag
				nnoremap <leader>.. :CtrlPTag<cr>
			vim+ctags+tagbar
				nnoremap <silent> <Leader>b :TagbarToggle<cr>
					pops up in sidebar
					show tags organized
			<url:file:///.ctags>
				<url:file:///~/.ctags>
				configuration
			help
				:help exuberant-ctags
		https://github.com/ludovicchabant/vim-gutentags
			<url:~/.vim/bundle/my-vim-custom/plugin/my-vim-custom.vim#tn=gutentags>
		http://andrewradev.com/2011/06/08/vim-and-ctags/
			:Function foo
				list functions that start with foo in quickfix
	ctrlp
		CtrlP Help
			:CtrlP
				starting dir: g:ctrlp_working_path_mode
				let g:ctrlp_working_path_mode = 'ra'
					c: current file's dir
					a: when cwd isn't ancestor of dir of current file
					r: ancestor dir containing: .git
					0: disable
		Basic commands
			Once CtrlP is open:
				F5  refresh cache
				<c-f> and <c-b> 
					to cycle between modes.
				<c-j>, <c-k> or the arrow keys 
					to navigate the result list.
				search modes
					<c-d> 
						to switch to filename only search instead of full path.
					<c-r> 
						to switch to regexp mode.
				<c-t> or <c-v>, <c-x> 
					to open a new tab or in a new split.
				<c-n>, <c-p> 
					next/previous string in history.
				<c-y> 
					to create a new file and its parent directories.
				<c-z> 
					to mark/unmark multiple files and <c-o> to open them.
			:help ctrlp-mappings or submit ? in CtrlP for more mapping help.
				<url:file:///.. >
					go up the directory tree by one or multiple levels.
				:command at the end of input
					Use :25 to jump to line 25. Use :diffthis when opening multiple files to run :diffthis on the first 4 files.
viml vimscript id=g10491
	viml vimscript <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10491>
	refcard - komut listesi
		expand
			let word = expand('<cword>')
		foldclosed:
			ref: <vimhelp:foldclosed()>
			dsc: is fold closed
			kd:
				:echo foldclosed(415)
		line:
			ref: <vimhelp:line()>
			dsc: get current line number
			kd: 
				:echo line(".") + 1
		getline
			let lines = getline(lnum1, lnum2)
		getpos
			let [lnum1, col1] = getpos("'<")[1:2]
		input
			let name = input('Enter name: ')
		matchstr
			let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
		printf
			let result = printf("<url:file:///%s#r=%s>", filename3, id)
		readfile
			let line = readfile(global_refid, 1)[0]
		strftime
			let date = strftime("%Y%m%d")
		substitute
			let url = substitute(url, ">\s*", "", "")
	check if line is folded: foldclosed()
		<vimhelp:foldclosed>
		echo foldclosed(811)
	visual range to a command as its argument
		https://vi.stackexchange.com/questions/11025/passing-visual-range-to-a-command-as-its-argument
			function! PrintGivenRange() range
				echo "firstline ".a:firstline." lastline ".a:lastline
				" Do some more things
			endfunction
			command! -range PassRange <line1>,<line2>call PrintGivenRange()
		ex
			function! SurroundMdImage() range
				exe a:firstline.",".a:lastline."g/\\(\\.jpg\\>\\)\\|\\(\\.png\\)/ s#\\(^\\)\\(.*/\\)\\([^/]\\+\\)\\(\\..*$\\)#![\\3](\\2\\3\\4)#"
			endfunction
			command! -nargs=* -range=% SurroundMdImage <line1>,<line2>call SurroundMdImage()
	window/buffer navigation: goto some window/buffer id=g10490
		window/buffer navigation: goto some window/buffer <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10490>
		echo bufnr("%")
		win_findbuf(6)
		win_gotoid(win_id)
		win_id2tabwin({expr}
		:echo "The file in the current window is " . bufname(winbufnr(0))
		win_getid([{win}
		window-ID
			each window has a window ID
		win_getid(winnr)
			winnr -> win_id
		win_id2tabwin()
			win_id -> win/tab number
		winnr()
			window number that may change
			for current window only
		:<winnr> wincmd w
			go to winnr
		win_id2win(win_id)
			win_id -> winnr
		bufnr("name")
			name -> buf id
		bufname(id)
			buf id -> name
		ex:
			" <url:/Users/mertnuhoglu/.vim/bundle/my-vim-custom/plugin/my-vim-custom.vim#tn=function! CollectLine()>
			" <url:/Users/mertnuhoglu/.vim/bundle/my-vim-custom/plugin/my-vim-custom.vim#tn=function! SwitchToNerdTree()>
	substitute replace with regex
		<vimhelp:substitute()>
		ex
			echo substitute("testing", ".*", "\\U\\0", "")
			echo substitute('   a', '^\s*\(.\{-}\)\s*$', '\1', '')
	insert string (result of a command) into text
		https://unix.stackexchange.com/questions/8101/how-to-insert-the-result-of-a-command-into-the-text-in-vim
		opt1: use expression register "=
			with P in normal 
			with <C-R> in insert mode
			ex: normal
				"=strftime('%c')<C-M>p
			<C-M>: enter
			ex: insert
				<C-R>=strftime('%c')<C-M>
			ex: mapping to keys
				nmap <F2> "=strftime('%c')<C-M>p
		opt2: use :put command
			ex: any expression or variable
				put =a:refid
			ex: inline
				put =a:refid
				normal! kJ
	<bang>	(See the '-bang' attribute) Expands to a ! if the
		command was executed with a ! modifier, otherwise
		expands to nothing.
		<vimhelp:bang>
	-bang
		-bang	    The command can take a ! modifier (like :q or :w)
		<vimhelp:command-bang>
	let args = {}
		{} is empty object
		this is declaring an object
		args[key] = elem
			this adds elem to key property of args object
	List
		<vimhelp:List>
		:let mylist = [1, two, 3, "four"]
		:let emptylist = []
		:let nestlist = [[11, 12], [21, 22], [31, 32]]
	Ampersand in front of variable &var
		referring to the option, not a variable
			http://learnvimscriptthehardway.stevelosh.com/chapters/19.html
	*a:0* *a:1* *a:000* *E740* *...*
		<vimhelp:a:000>
		Up to 20 arguments can be given, separated by commas.  After the named arguments an argument "..." can be specified
		"a:000" is set to a |List| that contains these arguments
regex2
	vim regex || ((ce6031ec-5990-4f67-a316-64c4fd3dea0e))
vim documentation
	neovim
		:TOhtml id=g11899
			syntax highlighted html output as seen in neovim to print
		<vimhelp:nvim-intro>
			differences between vim and nvim
				<vimhelp:vim-differences>
				configuration
					~/.config/nvim/init.vim
						.vimrc
					~/.config/nvim
						.vim
					~/.data/nvim/shada/main.shada
						.viminfo
				defaults
					autoindent
					:filetype plugin indent on
				new features
					major components
						<vimhelp:API>
						<vimhelp:lua>
						<vimhelp:job-control>
							multitasking without blocking 
						<vimhelp:remote-plugin>
							intro
								nvim supports RPC
								remote plugins can send and receive data/events
						providers
							<vimhelp:provider-python>
								py intergation done via <vimhelp:RPC>
							<vimhelp:provider-ruby>
						<vimhelp:shada> data file
							intro
								stores session data
								SHAred DAta between nvim sessions
						<vimhelp:terminal> embedded terminal emulator
						<vimhelp:xdg> standard paths
					user experience
						<vimhelp:feature-compile>
							nvim compiled with all features
							nvim avoids features that are platform specific
						<vimhelp:K> in help docs for <vimhelp:CTRL-]>
							:pwd # put cursor on top and press `K`
							===
							:!man pwd
					architecture
						plugins run in separate processes
						io built upon libuv
					features
						outline: gO
						META recognized in terminal
						options
						variables
						commands
							<vimhelp:checkhealth>
					<vimhelp:nvim-features-changed>
		points
			gO    navigable outline of buffer (nvim help)
		<vimhelp:shada>
			difference to session file
				there is only one shada file
		misc
			<vimhelp:v:oldfiles>
				list of file names loaded from shada file on startup
			<vimhelp:initialization>
			<vimhelp:session-file>
				starting with a Session:
					vim -S session.vim
	insert.txt
		autocomplete  
			:h i_CTRL-N
			<url:vimhelp:i_CTRL-N>
			shortcuts 
				^N  next match
				^P  prev match
	autocmd.txt
		file specific settings commands by extension
			autocmd BufRead,BufNewFile   *.shaape set nowrap
		autocmd
			<vimhelp:autocmd>
			:au
			:au[tocmd] [group] {event} {pat} [nested] {cmd}
		{pat}
			<vimhelp:autocmd-patterns>
			can be a comma separated list
				:autocmd BufRead *.txt,*.info set et
				===
				:autocmd BufRead *.txt set et
				:autocmd BufRead *.info set et
			<buffer> special pattern
				defines a buffer-local autocommand.
				See |autocmd-buflocal|.
				<vimhelp:autocmd-buflocal>
	map.txt
		map-<expr> map-expression
			<url:vimhelp:map-expression>
	eval.txt
		pumvisible()
			<url:vimhelp:pumvisible()>
				is popup menu visible?
				pumvisible()
				pumvisible()
				pumvisible()
				projects/study/problem/datatables_in_cyclejs/ex/ex0
	vim-plug plug.vim: plugin manager
		https://github.com/junegunn/vim-plug
		use
			reload .vimrc
			:PlugInstall
		Plug 'junegunn/vim-easy-align'
		after opening nvim:
			:PlugClean
				remove unused plugins
			:PlugUpgrade
				upgrade vim-plug
			:PlugInstall
				install plugins
			:PlugUpdate
				install/update plugins
my keybindings
	lsp kısayollarım id=g12595
		ref
			which-key lsp_map: SPC ü l  <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12593>
	c commands
		mnemonics
			c = command
		nnoremap cm :Commands<cr>
			c command, m mand
		nnoremap cl :Files<cr>
			c command, l ls
		nnoremap cnt :NERDTreeToggle<cr>
			c command, nt nerdtree
		nnoremap cnf :NERDTreeFind<cr>
articles-books
	javascript in vim id=g10197
		javascript in vim <url:file:///~/Dropbox/mynotes/content/code/cvim/cvim.md#r=g10197>
		https://davidosomething.com/blog/vim-for-javascript/
			https://github.com/sheerun/vim-polyglot
			https://github.com/pangloss/vim-javascript
			https://github.com/junegunn/vim-plug
			https://github.com/othree/javascript-libraries-syntax.vim
			https://github.com/ternjs/tern_for_vim
				Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
			https://github.com/othree/jspc.vim
			https://github.com/ramitos/jsctags
			https://github.com/benekastah/neomake
			https://github.com/davidosomething/dotfiles/tree/master/vim
		http://www.panozzaj.com/blog/2015/08/28/must-have-vim-javascript-setup/
			https://github.com/moll/vim-node
			https://github.com/groenewege/vim-less
			https://github.com/tpope/vim-projectionist
			https://github.com/SirVer/ultisnips
	Learn Vimscript the Hard Way
		Autoloading
			http://learnvimscriptthehardway.stevelosh.com/chapters/53.html
			How Autoload Works
				For large plugins, loading all of code takes a lot of time
				Solution: autoload
				It delays loading code until it is needed
				ex
					:call somefile#Hello()
				vim looks for a file: `autolad/somefile.vim` inside bundles
				definition inside somefile.vim
					function somefile#Hello()
				multiple slash # characters represent subdirectories
					usage:
						:call myplugin#somefile#Hello()
					looks for:
						autoload/myplugin/somfile.vim
					definition:
						function myplugin#somefile#Hello()
all
	markdown toc headings id=g12874
		a01: Telescope > Markdown Headings
		a02: VoomToggle TOC
	autocomplete disabled in otl/text files
		ref
			disable autocompletion based on file types <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12612>
	indent settings
		ref:
			settings {{{ <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12607>
			error: vim bazen 6 space ile indent ediyor bazen 2  <url:file:///~/projects/study/otl/cvim.otl#r=g12606>
	error: vim bazen 6 space ile indent ediyor bazen 2  id=g12606
		ref
			Add indentation three times for a line that starts with '\' or '"\ ' <url:/usr/local/Cellar/neovim/0.6.0/share/nvim/runtime/indent/vim.vim#tn=Add it three times for a line that starts with >
		durum:
			`=` ile autoindent edince bazen 6 bazen 2 space indent ediliyor
		sebep:
			indent/vim.vim dosyasında GetVimIndent() fonksiyonu autoindent koşullarında indent miktarına karar veriyor
			`{` ve `\` gibi karakterlerle başlayan satırlarda shiftwidth * 3 misli indent yapılıyor otomatik olarak
		[How to Use Auto-indent in Vim](https://linuxhint.com/use-auto-indent-in-vim/)
			a01: 
				set autoindent
			a02: persistent setting
				filetype plugin indent on
			neovim vim ile aynı config klasörünü mü kullanıyor?
		[vim - Setting autoindentation to spaces in neovim? - Stack Overflow](https://stackoverflow.com/questions/51995128/setting-autoindentation-to-spaces-in-neovim/51995699)
			:help tabstop
			:help softtabstop
			:help shiftwidth
			tabstop: width for tab
			softtabstop: 0 -> same as tabstop
			shiftwidth: width for >>: 0 -> same as tabstop
			:help expandtab
			expandtab: use space chars for indentation
	settings folders id=g12605
		neovim:
			/usr/local/Cellar/neovim/0.6.0/share/nvim/runtime/indent/vim.vim
	vimscript fonksiyonları örnekleri ve dokümantasyonu: <vimhelp:eval.txt> id=g12602
	filetype: neden vim dosyalarını conf olarak algılıyor? id=g12601
		sebep:
			vim's modeline feature:
			" vim:fileencoding=utf-8:ft=conf:foldmethod=marker
		fix:
			" vim:fileencoding=utf-8:ft=vim:foldmethod=marker
	Neovim LSP Diagnostics In Your Statusline id=g12599
		ref
			[Neovim LSP Diagnostics In Your Statusline 🦀 ⚙ - YouTube](https://www.youtube.com/watch?v=hPMKLXZIe-s)
			~/projects/private_dotfiles/.config/nvim/lua/statusline.lua
		vim.lsp.diagnostic.get_count(0, [[Hint]])
	diagnosticleri location liste ekleme id=g12597
		ref
			Diagnostic mesajlarını location liste ekleme <url:file:///~/projects/vim_repos/my-vim-custom/plugin/my-vim-custom.vim#r=g12596>
	error: lsp codeAction is not supported by any of the servers id=g12594
		[(3) nvim-lspconfig error 'method textDocument/codeAction is not supported' : neovim](https://www.reddit.com/r/neovim/comments/qhh4qr/nvimlspconfig_error_method_textdocumentcodeaction/)
		debug:
			kd: autocmd CursorHold
			dsc: hangi autocmd komutları aktif onları listeler
			out:
				CursorHold
				*         lua PrintDiagnostics()
									lua vim.diagnostic.open_float(nil, {focus=false})
									lua vim.diagnostic.open_float(nil, {focus=false, scope="cursor"})
									lua require('code_action_utils').code_action_listener()
			lokasyon:
				~/projects/private_dotfiles/.config/nvim/lua/code_action_utils.lua
	quickfix list vs location list farkı id=g12592
		ref
			[What is the difference between location list and quickfix list in vim - Stack Overflow](https://stackoverflow.com/questions/20933836/what-is-the-difference-between-location-list-and-quickfix-list-in-vim)
		location list: local to the window
		quickfix list: global list for all windows
	regex aramalarında / karakterini escapeleme: id=g12589
		a01: SearchNoEscape
			<space>üks
		a02: use ? instead of /
	error: after vim substitution message appears: disable press enter or type command id=g12584
		fix: put <cr><esc> twice at the end of nnoremap
		ex: nnoremap ükm :ConvertLine2YamlKeyMultiline<cr><esc>
	error: indent kendi kendine bozuluyor otl dosyalarında
		solution
			https://vi.stackexchange.com/questions/11023/auto-indent-turns-off-itself-automatically-on-php-files
				autocmd FileType php setlocal autoindent
				autocmd FileType votl setlocal autoindent
		set autoindent
		set ai
		set smartindent
		set si
	ftdetect ftplugin: filetype specific scripts
		https://stackoverflow.com/questions/6133341/can-you-have-file-type-specific-key-bindings-in-vim
			ref
				~/.vim/ftplugin/typescript.vim
			/Users/mertnuhoglu/.vim/ftplugin
			typescript.vim
				nmap <buffer> Ü <Plug>(ale_go_to_definition)
			:set ft?
	set/use environment variables in vim
		let $VRP_PSK_DIR = '/Users/mertnuhoglu/projects/itr/vrp_psk01'
		echo $VRP_PSK_DIR
	vim slides presentation tool
	mark marks marking bookmarking
		<vimhelp:mark>
		'>  `>			To the last line or character of the last selected
			Visual area in the current buffer. 
		'<  `<			To the first line or character of the last selected
			Visual area in the current buffer.  For block mode it
	navigate help topics in vim's documentation
		https://vi.stackexchange.com/questions/2136/how-do-i-navigate-to-topics-in-vims-documentation
		ans1
			1. :help
				:help help
			2. autocomplete with <Tab>
				:help buf<Tab>
				:help :w<C-d>
					list possible completions
					2017-11-27_10-42-20.png
				:help key-notation
					special keys :help key-notation <url:#r=cvim_002>
			3. :helpgrep <keyword>
				search for help
				:copen
			4. syntax to search
				commands
					:h :command                        " help for ex-command 'command'
					:h 'option'                        " help for option 'option'
					:h function()                      " help for function 'function'
					:h modifier-key                    " help for 'modifier'-'key' in normal mode
					:h mode_modifier-key               " help for 'modifier'-'key' in 'mode'
					:h mode_modifier-key_modifier-key  " help for 'modifier'-'key' 'modifier'-'key' in 'mode'
				Examples:
					:h :sort
					:h 'ai                " only one quote needed
					:h bufnr(             " no need for both parenthesis
					:h v_ctrl-g
					:h i_ctrl-x_ctrl-o
					:h ctrl-w             " no mode required for normal mode
			5. anatomy of a :help section
				/Users/mertnuhoglu/Dropbox/public/img/ss-255.png
					red: tags
					green: long/short form
					first line in white: it's a boolean option
						:help options
					second line in white: option is global
						:help option-summary
			6. :help list-functions
			7. RTFM: Read The Fantastic Manual before asking
	special keys :help key-notation id=cvim_002
		special keys :help key-notation <url:#r=cvim_002>
		*key-notation* *key-codes* *keycodes*
		notation  meaning       equivalent  decimal value(s)  ~
		-----------------------------------------------------------------------
		<Nul>   zero      CTRL-@    0 (stored as 10) *<Nul>*
		<BS>    backspace   CTRL-H    8 *backspace*
		<Tab>   tab     CTRL-I    9 *tab* *Tab*
									*linefeed*
		<NL>    linefeed    CTRL-J   10 (used for <Nul>)
		<FF>    formfeed    CTRL-L   12 *formfeed*
		<CR>    carriage return   CTRL-M   13 *carriage-return*
		<Return>  same as <CR>        *<Return>*
		<Enter>   same as <CR>        *<Enter>*
		<Esc>   escape      CTRL-[   27 *escape* *<Esc>*
		<Space>   space        32 *space*
		<lt>    less-than   <  60 *<lt>*
		<Bslash>  backslash   \  92 *backslash* *<Bslash>*
		<Bar>   vertical bar    | 124 *<Bar>*
		<Del>   delete        127
		<CSI>   command sequence intro  ALT-Esc 155 *<CSI>*
		<xCSI>    CSI when typed in the GUI   *<xCSI>*
		<EOL>   end-of-line (can be <CR>, <LF> or <CR><LF>,
		<Up>    cursor-up     *cursor-up* *cursor_up*
		<Down>    cursor-down     *cursor-down* *cursor_down*
		<Left>    cursor-left     *cursor-left* *cursor_left*
		<Right>   cursor-right      *cursor-right* *cursor_right*
		<S-Up>    shift-cursor-up
		<S-Down>  shift-cursor-down
		<S-Left>  shift-cursor-left
		<S-Right> shift-cursor-right
		<C-Left>  control-cursor-left
		<C-Right> control-cursor-right
		<F1> - <F12>  function keys 1 to 12   *function_key* *function-key*
		<S-F1> - <S-F12> shift-function keys 1 to 12  *<S-F1>*
		<S-...>   shift-key     *shift* *<S-*
		<C-...>   control-key     *control* *ctrl* *<C-*
		<M-...>   alt-key or meta-key   *meta* *alt* *<M-*
		<A-...>   same as <M-...>     *<A-*
		<D-...>   command-key (Macintosh only)  *<D-*
	How to Do 90% of What Plugins Do (With Just Vim)-XA2WjJbmmoM.mp4
		file navigating
			set path+=**
				search files through every subdirectory
			:find <somefile>
			:find *<name>
				wildcard
			:find *.js
			:b <unique_substring>
				if substring is unique for a file, it jumps into it directly
		tag navigation
			command! MakeTags !ctags -R .
			:MakeTags 
			g^]
				when tags are ambigous
		autocomplete
			^x^n for JUST this file
			^x^f for filenames (works with our path trick!)
			^x^] for tags only
			^n for anything specified by the 'complete' option
		snippets
			nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jwf>a
	https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118
		{ }
			move to start/end of paragraph
		:1,5 g/../..
		:r foo
			insert file "foo" at current line
		:r! cmd
			run command cmd and redirect its output to here
		:{!}fmt
			reformat current paragraph
		run macros
			:so mymacro.ex
				ex: runs wc and insrets a comment at top
			vi +'so mymacro.ex' ./file
			vi +'/foo/d|wq!' ./file
	multiple global commands at once
		http://stackoverflow.com/questions/11807713/multiple-g-and-v-commands-in-one-statement
		code
			command! -nargs=* -range=% G <line1>,<line2>call MultiG(<f-args>)
			fun! MultiG(...) range
				 let pattern = ""
				 let command = ""
				 for i in a:000
						if i[0] == "-"
							 let pattern .= "\\(.*\\<".strpart(i,1)."\\>\\)\\@!"
						elseif i[0] == "+"
							 let pattern .= "\\(.*\\<".strpart(i,1)."\\>\\)\\@="
						else
							 let command = i
						endif
				 endfor
				 exe a:firstline.",".a:lastline."g/".pattern."/".command
			endfun
		This creates a command that allows you to automate the "regex hack". This way you could do
			:G +foo -bar
		to get all lines with foo and not bar. If an argument doesn't start with + or - then it is considered the command to add on to the end of the :g command. So you could also do
			:G d +foo -bar
		to delete the lines, or even
			:G norm\ foXp +two\ foos -bar
		if you escape your spaces. It also takes a range like :1,3G +etc, and you can use regex in the search terms but you must escape your spaces. Hope this helps.
	history of files
		~/.vim_mru_files
		g:MRU_File
	history of commands
		history size
			:h shada
			:set history=10000
		copy them
			:redir @a>
			:history : -20,
			:redir END
	convert spreadsheet table to a hierarchical votl format id=b_015
		convert spreadsheet table to a hierarchical votl format <url:#r=b_015>
		procedure
			put ~ to the last column in excel
			%s/[^[:print:][:blank:]]//g
			g/^\s*\~$/d
			g/^\s*$/d
			g/"\([^"~]\+\n\)\+"\s*\~$/j
			g/"\([^"~]\+\n\)\+"\s*\~$/j
			g/"\([^"~]\+\n[^"~]\+\)\+"/j
			g/"\([^"~]\+\n[^"~]\+\)\+"/j
			g/"\([^"~]\+\n[^"~]\+\)\+"/j
			g/"\([^"~]\+\n[^"~]\+\)\+"/j
			%s/\t/,/
			set ft=csv
			DeleteColumn 2
			DeleteColumn 2
			DeleteColumn 2
			DeleteColumn 3
			%s/^/@@0/ | %s/\t/@@1/ | %s/\t/@@2/ | %s/\t/@@3/
			%s/@@0/## / | %s/@@1/\r\t@@1 / | %s/@@2/\r\t@@2 / 
			g/##\s*$/d
			set ft=votl
		join multi line cells
			opt
				make a macro ci"
			how to match multiline regex
				"[^"]\+\n[^"]\+"
			join newlines
				g/"[^"]\+\n[^"]\+"/j
				run this multiple times
			don't match single line quotes
			blank lines are not matched?
				"\([^"]\+\n[^"]\+\)\+"
				"[^"]\+\n
				\([^"]\|$\)\+
				"\(\([^"]\+\n[^"]\+\)\|\(^$\)\)\+"
				what are these groups called?
			delete blank lines
			do it manually
				g/"\([^"]\+\n[^"]\+\)\+"/j
			remove invisible chars
			lines that have a single quote
				"\([^"]\+\n[^"]\+\)\+"
				"\([^"]\+\n\)\+"
				"\([^"]\+\n"\)
		error: Application service monitoring line broken
			cause: previous line
				"\([^"]\+\n[^"]\+\)\+"
				problem case
					"Informasiya "  
					Application "ali"
				how to invalidate this case?
					this is impossible to solve
						her kayıtın sonuna ~ koyalım
						sonra replacement işlemlerinde ~ ile sınırlandıralım
						"\([^"~]\+\n[^"~]\+\)\+"
					how can I find each instance end?
						count tabs?
							no it won't work
						put tilda into google docs
							~
						correct prev regex
							"\([^"~]\+\n\)\+"\s*\~$
	Fayda örneği:
		case1: Onlarca dosyada hatalı bir formatta veriyi yazmışım:
			`<url:file:///` yazacağıma `<url:/` yazmışım
			düzeltmek için tek komut yetti:
			bufdo %s#url:file:///#url:file:///# 
	Transpose a csv file
		:Transpose
		:CsvTranspose
	map-arguments
		:h map-arguments
			description
				"<buffer>", "<nowait>", "<silent>", "<special>", "<script>", "<expr>" and
				"<unique>" can be used in any order.  They must appear right after the
				command, before any other arguments.
			:map <buffer>  ,w  /[.,;]<CR>
				mapping is effective only in current buffer
			<nowait>
				overriding global mapping
			<silent>
				mapping will not be echoed on command line
		:h <Plug>
			special key name "Plug" for internal mapping
		using-<Plug>
		<SID>
				
	<Plug> to customize hotkeys
		http://whileimautomaton.net/2008/09/27022735
		nmap works but nnoremap doesn't work with <plug> keybinding
			https://vi.stackexchange.com/questions/9546/why-does-nmap-work-but-nnoremap-not-work-to-set-up-vim-easy-align-shortcut
		normal hotkey customization
			let g:plugin_feature_hotkey = '<F2>'
		problems:
			only 1 hotkey
			modes cannot be overridden
			some plugins add a prefix. it can't be overridden
		better way
			1. plugins provide a "named" key sequence for each feature
				<Plug>(plugin-feature)
			2. users use :map to map any key sequence
		author of plugin
			" named key sequence
			nnoremap <silent> <Plug>(fakeclip-p)
			\ :<C-u>call fakeclip#put('', 'p')<Return>
			nnoremap <silent> <Plug>(fakeclip-Y)
			\ :<C-u>call fakeclip#yank_Y()<Return>
			" default hotkeys
			nmap "*p <Plug>(fakeclip-p)
			nmap "*y <Plug>(fakeclip-Y)
			nmap "*yy <Plug>(fakeclip-Y)
		users customize named key sequences:
			nmap <C-v> <Plug>(fakeclip-p)
		running <Plug> mapping
			http://stackoverflow.com/questions/18546533/execute-plug-commands-in-vim
			:execute "normal \<Plug>NiceCenterCursor"
	gen_tags
		https://github.com/jsfaint/gen_tags.vim
		ctags+gtags
			gtags: gnu global
				tags for: definition, reference, calling, called, include, string etc.
		ctags support
			GenCtags
				generate ctags database
	vim-dotenv environment variables
	how to
		:messages # show error messages


