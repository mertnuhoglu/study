
clojure-otl
rfr: yeni index: [[ndx-clj]]
ref
	~/projects/study/clj/refcard_clojure.otl
[[f/ndx]]
	index || ((098687d3-3c60-417b-8c3b-1c7017c6dda8))
		projects || ((5e9ff4e1-5cc1-43a1-ab1f-6c1e17065a1e))
		rfc quickstart || ((5e9ff4e1-5cc1-43a1-ab1f-6c1e17065a1e))
	clojure || ((5b4cbe89-49a2-4098-a9f9-201a31344086))
  authors || ((3267d5b9-691a-475a-a19a-5313afaa9f8e))
  editors clojure || ((55576e79-e538-4439-a88b-b2facbda2d78))
		sexp editing || ((b688d918-ff88-43b6-b51c-2519cd1ca73a))
		cursive intellij || ((40bf0ef4-9655-45d5-a380-211c2b6b2af6))
		vim clojure || ((183f0d00-2fd7-4418-872e-b1d467f5571d))
  conjure || ((7b3a28f6-9355-4b9f-91d0-2762212a3ed4))
  fireplace.md || ((a0a83150-13c4-4131-a1eb-8a623dc7fca0))
  trainings || ((8a4db47b-94a3-40f4-97cf-a7914f5931e0))
  language || ((d58d94cd-f54a-465b-8985-70c1256c889e))
# f/pnt
index
  id:: 098687d3-3c60-417b-8c3b-1c7017c6dda8
	clojurescript.otl || ((5873ffa7-0f76-4479-97db-bdee63e0e55c))
	articles - clj || ((01eaf532-152c-4a9d-803c-3043b21ee781)) 
		read || ((e038ade8-c6c1-4eb8-8bb5-e1f7fe74bc47)) 
		toread || ((e88d3350-f4c6-4abe-9631-e627207248c0)) 
	articles - datomic || ((a5ba3664-9936-4611-9567-2d142c70c85e)) 
		datomic okuma planı 20221113 || ((c3d0e4dd-d834-4f50-8812-d713ba858307)) 
	gtd - clj || ((c95cd0f4-951f-494d-a9c2-993aa60d7c55)) 
		öncelikli işler - clj || ((6b3e9a99-e154-4586-9741-84479ae7c33d)) 
	jrnl - clj || ((e3214a3b-2076-4b4c-bc40-42b6cc01d46f)) 
	ndx - clj || ((e3214a3b-2076-4b4c-bc40-42b6cc01d46f)) 
	ref
		articles - datomic || ((a5ba3664-9936-4611-9567-2d142c70c85e)) 
		~/projects/study/clj/fulcro.otl
	anki clojure
		~/projects/study/clj/anki_clojure_from_excel.tsv
		~/projects/study/clj/anki_clojure.tsv
	projects id=g12848
	  id:: 5e9ff4e1-5cc1-43a1-ab1f-6c1e17065a1e
		ex06 ~/projects/study/clj/ex/study_clojure/ex06/deps.edn
			~/projects/study/clj/ex/study_clojure/ex06/src/ex_kimh.clj
		datalog-01 /Users/mertnuhoglu/projects/study/clj/ex/study_datomic/datalog-01/deps.edn
			~/projects/study/clj/ex/study_datomic/datalog-01/src/mertnuhoglu/datomic/datomic_01.clj
		/Users/mertnuhoglu/projects/study/clj/ex/fulcro/fulcro.iml
	rfc quickstart id=g12853
		projects || ((5e9ff4e1-5cc1-43a1-ab1f-6c1e17065a1e))
		datomic || ((fe47891e-5cc8-428e-afaf-833c581325d4))
		Setup a new project  || ((4ca15728-2340-441f-87fa-353093d2f7d9))
		Run REPL || ((3fb0b095-1c79-454f-922e-596318fb2122))
		Run a clojure script/function/app || ((7b88f51a-983d-456e-bf81-4e20ec0ccab9))
		idioms - kendime göre özetler || ((e5bc3379-2cfa-4365-9eec-8b890ba9bafd))
		Weird Characters  || ((60209199-79a0-41e8-be9d-8b571db3f946))
		editors clojure || ((55576e79-e538-4439-a88b-b2facbda2d78))
		ClojureScript Koans || ((fa161480-6306-4f11-9a5c-bbd9f233c8d0))
	notes
		Index babashka  || ((e35871e0-bf6e-46e7-92b3-ffe879759ca9))
clojure id=g12396 #questions 
  id:: 4eae8afc-08ad-4d7d-9b61-118f0d0e78d3
	slack vs. yerine stackoverflow'da soruları sormak, bulunabilirlik açısından daha iyi olmaz mı?
clojure
  id:: 5b4cbe89-49a2-4098-a9f9-201a31344086
	authors id=g11837
	  id:: 3267d5b9-691a-475a-a19a-5313afaa9f8e
		Rich Hickey - Clojure
		David Nolen - ClojureScript, core.logic, om next
		unprompt - Meander
		Brian Will - Intro to Clojure
		Reeves - polymorphism
		Rafal Dittwald
		Jimmy Miller - Meander
		Nathan Marz - Specter
		Tony Kay - Fulcro
		Michiel Borkent - babashka, jet
		Timothy Baldridge - clojure tutorials, pivotshare videos
		William Byrd - miniKanren
		Daniel Friedman - miniKanren
		Gerald Sussman - SICP
		Sean Corfield - rebl
	editors clojure id=g12360
	  id:: 55576e79-e538-4439-a88b-b2facbda2d78
		sexp editing id=g12869
		  id:: b688d918-ff88-43b6-b51c-2519cd1ca73a
			ref
				sexp_editing.otl ~/projects/study/clj/sexp_editing.otl
				local clojure_files_map = { -- SPC icj || ((5ee110a2-5f36-4f0d-9058-01769309b7ea))
				": vim-sexp id=g12870 {{{   || ((41b8eb6f-0496-418e-a9cc-b67e07738100))
				sexp cheatsheet || ((7caeba47-93e3-44b2-bde9-387baed34273)) 
				Cheatsheet cleverparens vim-sexp || ((61048688-4992-4a9c-b7a7-c46dc395e672))
				;; smartparens custom mappings id=g_12112 || ((f57c7ead-9a84-467f-a544-0028553bda54))
				sexp cheatsheet || ((7caeba47-93e3-44b2-bde9-387baed34273)) 
			vim => vim-sexp SPC s
			emacs => smartparens + cleverparens
		cursive intellij
		  id:: 40bf0ef4-9655-45d5-a380-211c2b6b2af6
			ref
				quickstart cursive || ((5ca5d9f4-e284-46fc-9135-ee66212848c0))
			shortcuts
				" Cursive repl eval keybindings || ((3238cdb4-204c-4e3f-adf2-65e79956ceba)) 
				" surround wrap keybindings || ((ebb47e49-2990-42db-b848-a01ae9341fc8)) 
				" QuickList Popup keybindings || ((e09a03af-a778-47d8-a82f-33765e1c0288)) 
				| çd       | eval top form  |
				| çe       | eval last form |
				| #e       | actions command bar            |
				| !u       | ç: popup menu prefix           |
				| !up/çp   | popup menus                    |
				| !uj      | clojure popup menu             |
				| !uç/çç   | popup general menu             |
				| !un/çn   | popup next menu                |
				| !ue/çt   | popup structural editing menu  |
				| !u SPC   | popup move menu                |
		vim clojure
		  id:: 183f0d00-2fd7-4418-872e-b1d467f5571d
			conjure id=g14425
			  id:: 7b3a28f6-9355-4b9f-91d0-2762212a3ed4
				rfr
					((b688d918-ff88-43b6-b51c-2519cd1ca73a)) || sexp editing
					local clojure_files_map = { -- SPC icj || ((5ee110a2-5f36-4f0d-9058-01769309b7ea))
				Index: Clojure in Vim || ((619584b0-7558-4663-9946-15a7c29dd962))
				shortcuts
					local quick_clojure_map = { -- Sj || ((bea33b56-79e7-420e-b4da-31fa9cfdfcc9))
					": conjure id=g12847 {{{  || ((9eb72a62-fd74-444e-b2ea-a89f8bc90115))
					| SPC j     | prefix instead of comma ,         |
					| c         | eval comment                      |
					| d         | eval root form                    |
					| e         | eval current form                 |
					| v         | open log buffer vertical          |
					": conjure id=g12847 {{{  || ((9eb72a62-fd74-444e-b2ea-a89f8bc90115))
					[`,` yerine SPC m konulacak]
					| SPC m     | prefix instead of comma ,         |
					| ,vv       | open log buffer vertical          |
					| ,ee       | eval current form                 |
					| ,eb       | eval buffer                       |
					| ,em[mark] | eval form under given `mark`      |
					| ,ew       | eval word under cursor (peek var) |
					| ,E        | eval visual selection             |
					öneksiz düz kısayollar: (ç ile başlayanları iptal)
					| çc | eval_comment_current_form |
					| çe | eval_current_form         |
					| çr | eval_root_form            |
					| K  | look up documentation     |
					| gd | go to definition          |
				temel kullanım
					clojure -M:repl/rebel
					ConjureConnect [port]
					let g:conjure#mapping#prefix = " m"
					| ,ed     | evaluate inner expression       | eval (current-form)    |
					lua require('conjure.eval')['current-form']()
					lua require('conjure.eval')['root-form']()
					nnoremap <leader>mec :call ConjureEvalToComment()<cr>
				Show Documentation in Conjure Floating Window || ((35f50d3b-9518-4698-89e7-c17b20a20fde))
			fireplace.md
			  id:: a0a83150-13c4-4131-a1eb-8a623dc7fca0
				Quickref fireplace.vim || ((fdf9d21a-64e2-41e3-a048-369d3a5163c5))
					| ]d     | Source                     |
					| gf     | go to source of namespace  |
					| cmm    | Macroexpand innermost form |
					| :Eval  | eval current form          |
					| :Eval% | eval file                  |
			sexp editing || ((b688d918-ff88-43b6-b51c-2519cd1ca73a))
			Disable linter: || ((9690fc29-c4c3-4fb6-a1e0-a4f95db82694))
		emacs
			doom
				Doom Refcard  || ((5c5038b5-b954-4bd3-83f0-7abeb5fe3b73)) 
				Doom Cider Refcard || ((1461ca3b-9c93-4ddd-bd21-48ac1a53230e)) 
			spacemacs
				spacemacs doom emacs refcard || ((0d7a91e7-c3dc-48e8-a646-12a8a78d113f))
					| SPC SPC   | list and search all commands | M-x                         |
					| SPC ?     | search for key bindings      | show keybindings            |
					| C-h k     | search for key binding       | describe-key                |
					| SPC h d f | help on function             | describe-function           |
					| SPC h SPC | list layers                  |                             |
					| SPC f e d | open ~/.spacemacs            | find-dotfile                |
					| SPC f e R | reload .spacemacs            |                             |
					| SPC f r   | file recent                  | counsel-recentf             |
					| SPC q r   | restart emacs                | restart-emacs               |
					| SPC w d   | buffer kill                  | delete-window               |
					| SPC m     | cider menu                   | ,                           |
					| '         | start REPL                   | cider-jack-in               |
					| e         | eval menu                    |                             |
					| e f       | eval expression inline       | cider-eval-defun-at-point   |
					| e c       | eval expression as comment   | cider-eval-defun-to-comment |
					| s a       | cider-switch-to-repl-buffer  |                             |
					| SPC a	r   | open ranger                  |
					| C-x t 2   | tab-bar-new-tab              |
					| gt gT     | tab-next                     |
				Cheatsheet cleverparens vim-sexp || ((2a8e1fae-de5e-40f7-a4bd-44412466b4db))
					ref_ex: ~/projects/study/emacs/ex/smartparens/e01/cleverparens_commands.clj
			multiple emacs: chemacs
				Multiple Emacs Setups/Installations in Osx || ((ce2950c3-af20-42f8-96c7-59582abdc4db))
				~/projects/private_dotfiles/.config/chemacs/profiles.el
				emacs --with-profile default
		paredit vim-sexp smartparens cleverparens
			sexp editing || ((b688d918-ff88-43b6-b51c-2519cd1ca73a))
	trainings
	  id:: 8a4db47b-94a3-40f4-97cf-a7914f5931e0
		https://lambdaisland.com/episodes
		https://purelyfunctional.tv/browse/
		https://tbaldridge.pivotshare.com/
	language
	  id:: d58d94cd-f54a-465b-8985-70c1256c889e
		Destructuring
			; destructuring || ((2c91e0d4-4735-4bfb-8247-edf684efcdff))
			Destructuring || ((b349f4f3-4be8-4a04-bae1-f9c2951c6d0d))
		Weird Characters  || ((60209199-79a0-41e8-be9d-8b571db3f946))
	libraries
		clojure.repl help functions || ((9d547dc1-3716-47f0-80bb-0d0b18a16666))
pnt - clj
	Clojure startup initializer: user.clj  || ((0b877352-eb6b-4193-af5a-fa47bc3be3fb))
	20221130
	20221002
	20220930
	Datascript and Datomic: Data Modeling for Heroes - Mark Bastian - YouTube || ((96d81571-64a4-4420-be93-d5f312d60f2a))
	20220928
	Norbert Wojtowicz - Modeling your domain (Lambda Days 2016) - YouTube || ((6fc0de1c-0413-4807-ac5b-50d73849c9ce))
	20220927
	Babashka Datalevin (datalog) example || ((665a9c3f-6e20-490f-a435-9470447ea6dc))
	20220910
	Referentially transparent CRUD - Christian Johansen || ((40ca8c98-7901-4900-b1a3-3e719129c58c))
	Gadget inspector: Bununla datayı gözetleyebilirsin. || ((09445e1a-b671-45f3-a9f5-c926ea7e8b99))
	ClojureScript Debugging || ((e51d9b0f-1174-4136-9c91-f75f358c709d))
	Conjure + nREPL CIDER Debugger || ((83818c2d-dc80-4eae-b64b-657dd1737572))
	Study Debugging || ((f34aa738-1d5b-46b2-9207-bd692b697dba))
	dumdom02d project: Auto completion input + gadget inspector || ((844a0f9a-b0a4-43ef-9f3d-f58c91c910af))
	dumdom02c project: list items || ((88f97beb-3ff5-4bc9-aed1-649e6e2511ad))
	dumdom02b project: defcomponent + add-watch || ((0439aaf0-32a5-4ba9-a48e-e2039b3a701f))
	dumdom02 project: || ((fcdb2a77-6ace-444f-ac78-bf120bc539a7))
	dumdom01 project: dumdom + figwheel + devcards || ((5e4f610b-0fad-4854-ab3b-88514eb74048)) 
	figwheel10 project: dumdom inside devcards || ((ce043a32-40de-4918-8cd6-c00d143be823)) 
	figwheel09 project: use dumdom components || ((3a10b9ad-89e7-4052-87ca-1eb5b995fd91)) 
	figwheel08 project: devcards + custom home page || ((37b21d77-8354-484a-843e-80c9c0a9e493)) 
	figwheel07 project: custom home page manipulate dom  || ((bcd36af4-66ed-4de5-b27c-35996c58c4d7)) 
	error: figwheel: repl açılmama problemi || ((8e9c0b1d-388d-41d4-9e89-46c70612717d))
	cjohansen/dumdom: Efficiently render and re-render immutable data || ((d5043a0f-d76a-4816-92f2-99d39cd5e38c))
	figwheel06 project: custom home page || ((b5b260c1-0ba2-4a34-9788-ca3519c3dbf0)) 
	figwheel05 project: devcards || ((f0d64321-788d-4983-8e83-e05707617466)) 
	figwheel04 project: extra-main || ((ec44889c-5eb8-4223-af64-4f42f3e8b6fb)) 
	figwheel03 project: figwheel configuration dev.cljs.edn || ((fe5ad234-3763-499a-b96e-8f019fcfe137)) 
	figwheel02 Project  || ((0eb26bd0-c7b4-4fda-9dd6-369a67a9cd16)) 
	naming conventions for function arguments  || ((3d04ddcb-efb0-4e4f-8e29-508baa5cb0a4)) 
	Figwheel Tutorial || ((e568d216-1505-41b0-bdc5-c72cdad0b62b)) 
	figwheel-main test || ((7a18eb37-2f65-4702-8650-316f8340f5c2)) 
	figwheel vs shadowcljs vs devcard || ((31f42c86-878e-4151-9c4f-e9bb4add682f)) 
	;; namespaced keywords || ((a92833f2-e9db-40e2-8521-431a0959ea6c))
	;; keeping original value with :as || ((bb981b9a-e80d-4744-9cb5-ce6a443d8d6f))
	; keyword arguments (optional args) || ((794d9112-3554-4f60-99f9-6581f303076a))
	cons vs conj
		(cons x xs)
		(conj xs x)
		mnemonics: cons'un sonunda s var, bu yüzden xs sonra gelir
howto problems
  id:: 372778aa-e2ac-4f70-9117-7b776eaf31c3
	debugging
	  id:: 97cdd46a-f966-48fc-acbe-8c68cae77a15
		Study Debugging || ((f34aa738-1d5b-46b2-9207-bd692b697dba))
		dirac: chrome devtools plugin id=g12454
		  id:: e47c1d90-a23d-4ba8-8f49-a1fd066c3c7d
			kurulum:
				[dirac/cli.md at master · binaryage/dirac](https://github.com/binaryage/dirac/blob/master/docs/cli.md#how-does-dirac-locate-chromium-executable-on-my-machine)
				ln -s "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" link
			kullanım:
				cli: dirac
					dirac ile chrome başlat
				chrome içinden localhost:8000 gibi web uygulamasını aç
				console'a gir, `^,` ile cljs repl'ını başlat
			breakpoint ekleme:
				[(743) Clojurescript and Dirac workflow - YouTube](https://www.youtube.com/watch?v=DDmUop6XlmQ)
				kodun içine (js-debugger) koy
				uygulamayı çalıştırdığında dirac orada durur
		spacemacs cider debugging
			Debugging cider || ((d0099df2-1568-479a-801a-3a0eb9974053))
				| , d b | cider-debug-defun-at-point         |
				| , e f | cider-eval-defun-at-point          |
				| C-z   | disable evil mode during debugging |
		Debug Functions || ((a9857cc8-aa95-4948-9890-062cfe7f51c6))
			ref_ex: ~/projects/study/clj/ex/study_clojure/ex06/src/debug_functions.clj
				; hashp for tracing || ((07e840dd-b1c4-4e4e-8e09-f166315813ea))
				; cider debugging example || ((12cc3a35-1a81-42d8-af77-1927e2251174))
	deps.edn
		find-deps ile search library
			;; find-deps - fuzzy search Maven & Clojars and add deps to deps.edn || ((64a881f5-4811-4b5f-b1b9-a8c3f78695f4))
			clojure -M:project/find-deps http-kit
	repl'a mevcut clj namespace'ini yüklemek
	  id:: 1a786ac0-10d8-49ed-9b6d-6e12edaacc24
		cursive: load-file veya Send file to REPL
		repl:
			(require '[my-namespace])
				(require '[clojure.edn :as edn])
				(require '[clojure.java.io :refer [reader]])
			(in-ns 'my-namespace)
	Setup a new project  id=g11946
	  id:: 4ca15728-2340-441f-87fa-353093d2f7d9
		New Project || ((b5e89103-66a6-4329-be41-40f8d2e64945))
			clojure -X:project/new :name main/project01
				; src/main klasörünü oluşturur proje dizininde
				; project01/src/main
			clojure -X:project/new :name mert/project-01
			clojure -X:project/new :name mertnuhoglu/project-01
			cd project-01
	Run REPL id=g12068
	  id:: 3fb0b095-1c79-454f-922e-596318fb2122
		rfr: [[rebl_reveal_portal_repl]]
		multiple repls together: id=g12447
		  id:: 767ee759-820c-44de-8ba0-807298d37a74
			alias zshrc
				cljreblportal
			rebl+portal
				java15
				clojure -M:lib/cider-nrepl:inspect/rebl15:middleware/nrebl:inspect/portal-cli:repl/rebel
			reveal+portal
				clojure -M:inspect/reveal:repl/rebel:inspect/portal-cli:repl/rebel
			rebl+reveal
				clojure -M:lib/cider-nrepl:inspect/rebl15:middleware/nrebl:inspect/reveal
					opens reveal
				clojure -M:inspect/reveal:lib/cider-nrepl:inspect/rebl15:middleware/nrebl
					opens rebl
				main opts
					:inspect/reveal "-m" "vlaaad.reveal" "repl"
					:lib/cider-nrepl
					:inspect/rebl15 "-m" "cognitect.rebl"
					:middleware/nrebl "-m" "nrepl.cmdline"
			rebl+reveal+portal id=g12431
				java15
				clojure -M:inspect/reveal:repl/rebel:inspect/portal-cli:repl/rebel:lib/cider-nrepl:inspect/rebl15:middleware/nrebl
				(add-tap ((requiring-resolve 'vlaaad.reveal/ui))) ; reveal açar
				çalışmıyor:
					opt01:
						java15
						clojure -M:lib/cider-nrepl:inspect/rebl15:middleware/nrebl:inspect/portal-cli:repl/rebel:inspect/reveal:repl/rebel
					opt02:
						clojure -M:inspect/reveal:repl/rebel:inspect/portal-cli:repl/rebel:lib/cider-nrepl:inspect/rebl15:middleware/nrebl
						(require '[vlaaad.reveal :as reveal])
						(reveal/-main "repl")
		run REBL id=g12422
		  id:: 9420e0cf-01fe-45bf-b933-c225c4b833c9
			Run REBL for nREPL || ((e98cfc10-df6f-4633-b5f1-8e8d3f6bb773)) 
				java15
				clojure -M:trace:inspect/reveal-nrepl
				clojure -M:lib/cider-nrepl:inspect/rebl15:middleware/nrebl
				Connect REBL from Emacs Cider || ((a39dca0d-29d5-476e-b009-d34ba61a4ae6)) 
					SPC SPC cider-connect-clj
				Connect REBL from Intellij Cursive || ((0c9470f8-8283-4f23-b730-c2a05deeb40b)) 
					Configurations > Clojure REPL > Remote
					Connection Type: nREPL
					Use standard port file: checked
				Connect REBL from Vim Conjure || ((3efd5f99-c530-425c-aba2-3b57affa3fd4)) 
					:ConjureConnect <port>
		nREPL
		  id:: 5b0e0daa-40ca-4445-8ebf-f2aa5f9085b1
			nrepl with rebel
				clojure -M:repl/rebel
			reveal with emacs cider || ((04c7013b-46f9-4fbd-9819-3eb8246ab77c)) 
				clojure -M:inspect/reveal-nrepl
			bb nrepl server || ((4aaa2995-755d-4957-9d2c-c7c5e5fd5382))
				bb --nrepl-server 50500
				lein repl :connect 50500
		rebel
			Run rebel-readline
				clj -M:repl/rebel
		Reveal
			rebel-readline with reveal || ((119082f9-043b-4681-880a-f9816c0ddea9)) 
				clojure -M:inspect/reveal:repl/rebel
				(add-tap ((requiring-resolve 'vlaaad.reveal/ui)))
				(tap> {:a 1 :b 2})
		portal id=g12421
		  id:: 58250690-d78b-4cfd-84c0-5b8447912e44
			opt00: hem portal hem nrepl
			  				clojure -M:inspect/portal-cli:repl/rebel
			opt01: çalışıyor
			  				clojure -M:inspect/portal-cli
			  				(require '[portal.api :as portal])
			opt02: bozuk
			  				clojure -M:inspect/portal-web
			  				(require '[portal.web :as portal])
			ortak:
			  				(portal/open)
			  				(portal/tap)
			  				(tap> {:accounts [{:name "jen" :email "jen@jen.com"} {:name "sara" :email "sara@sara.com"}]})
			opt03: doğrudan main olarak çalıştır
			  				cat deps.edn | clojure -M:portal/cli edn
			opt03a: doğrudan aliaslar kullan
				clojure portal || ((155879d6-bbcc-4eea-ac94-03230c6da5d7))
				cat deps.edn | edn
				cat j01.json | json
	Run a clojure script/function/app id=g12108
	  id:: 7b88f51a-983d-456e-bf81-4e20ec0ccab9
		from repl:
			ref: ~/projects/study/clj/book_practicalli_clojure_webapps.md
			(require '[practicalli.p02] :verbose)
			(in-ns 'practicalli.p02)
			(def app-server-instance (-main 8888))
		from conjure/vim:
			ref: ~/projects/study/clj/book_practicalli_clojure_webapps.md
			ConjureConnect
			,eb | eval buffer
			Eval: `(def app-server-instance (-main 8888))`
		from cli: clj
			Run main function || ((03507dde-c1f4-4ae9-a68e-39f7bd2ff71b))
				clj -M -m clj-new-01.clj-new-01
				clojure src/cards/core.clj
			Running functions || ((89beddd4-c284-4253-b8e2-1faffdd56e5a))
				clj -X:my-fn
	require import libraries
	  id:: 55eea8d4-8531-4403-a4f3-8416735c0ed6
		inside code
			rfr: ~/projects/study/clj/ex/study_clojure/ex06/src/require_functions.clj
			(require '[clojure.tools.trace :refer [trace, dotrace]])
			(use '[clojure.string :only (split)])
			(ns help_functions
				(:require [clojure.inspector :as ins]))
			(require 'hashp.core)
			(require '[clojure.repl :refer :all])
		require inside repl id=g12420
			(ns ex01
				{:import java.io.File}
				{:require [clojure.java.io :as io]
					[clojure.core.protocols :as p])
		Import source, doc, apropos and other REPL functions || ((d6f06674-6209-4599-a63f-83b21373467e))
			(require '[clojure.repl :refer :all])
			ref: ~/projects/study/clj/ex/study_clojure/ex06/src/help_functions.clj
				(pp/print-table [{:a 1 :b 2 :c 3}{:a 4 :b 5 :c 6}])
				(clojure.repl/source map)
				(clojure.repl/doc map)
				(clojure.repl/find-doc "create-context")
				(clojure.repl/apropos "unmount-renderer")
				(clojure.repl/dir help_functions)
				*ns*
				(ns-aliases 'user)
				(ns-publics 'clojure.java.io)
				(all-ns)
idioms - kendime göre özetler id=g12080
  id:: e5bc3379-2cfa-4365-9eec-8b890ba9bafd
	let
	  id:: 5769a853-8deb-4ec1-8e4d-bdac178bfdef
		(let [a b
			c a])
		=>
			a = b
			c = a
	assoc get update assoc-in get-in update-in
	  id:: 833a558c-b787-428f-93eb-70f85f7995c3
		rfr: ~/projects/study/clj/ex/study_clojure/ex06/src/assoc_update.clj
		(assoc request :user user)
			denk: request[[:user]] = user
			denk: request.user = user
		(assoc-in users [1 :age] 44)
		(get-in {:a {:b 1}} [:a :b]) ;;=> 1
		(update-in users [1 :age] inc)
		(update-in {:a {:b {:x 3} :c 1}} [:a :b] dissoc :x)
	threading macro ->
	  id:: 536fe041-a97e-4506-afe2-787ba83075e5
		(-> request :session :user-id)
		= request[[:session]][[:user-id]]
		= request.session.user-id
	Ring suyu id=g12082
	  id:: 2ee951e2-0ee1-4324-9a6d-c38965ac578c
		middleware fonksiyonu tanımlama:
			(defn mw [handler]
				(fn [request]
					...
					(assoc request ...)
					(handler request)))
		mw fonksiyonlarını kullanma:
			(def app (-> handler (mw1) (mw2) ...))
		handler tipi: request -> response
		default değer için or kullanma:
			(or (.getScheme uri) "http")
			(or query params)
		string değerleri keyworde çevirip kullanma:
			let [
				scheme (keyword (or (.getScheme uri) "http"))
				request {:scheme         scheme}
			]
	main default arguments
	  id:: 476b4cdb-0eec-43a9-bb67-56d35ee8b181
		defn -main || ((974196cf-6a82-4be6-a2a6-fdd6071dcbc6))
		(defn -main
			[& {:keys [ip port]
				:or   {ip   "0.0.0.0"
					port 8000}}]
		kullanımı:
			(-main :port 8080)
	server initialization in webapps
	  id:: 17b087d4-c1ce-470a-9b46-1fd0ec5d8382
		(def server (atom nil))
		(defn -main
			(reset! server (server/run-server #'handler {:port port})))
		(defn stop-server []
			(when-not (nil? @server)
				(@server :timeout 100)
				(reset! server nil)))
		kullanımı:
			(-main)
			(stop-server)
topics
  id:: 779f0ea2-eae7-421d-bae8-23fffaaecf0e
	cljs id=g13300
	  id:: 2206c639-4644-4c34-97d6-a39453efcffe
		ClojureScript REPL and Evaluation || ((6ee331c6-7175-4d39-aad1-f7311477cb7b))
		ClojureScript REPL Konfigürasyonu 20230221 || ((ca50d597-b60c-46f4-9cbe-a12e7e476f04))
		quickstart
			ClojureScript Debugging || ((e51d9b0f-1174-4136-9c91-f75f358c709d))
			dumdom01 project: dumdom + figwheel + devcards || ((5e4f610b-0fad-4854-ab3b-88514eb74048)) 
			figwheel10 project: dumdom inside devcards || ((ce043a32-40de-4918-8cd6-c00d143be823)) 
			figwheel08 project: devcards + custom home page || ((37b21d77-8354-484a-843e-80c9c0a9e493)) 
		ClojureScript Debugging || ((e51d9b0f-1174-4136-9c91-f75f358c709d))
		dumdom02d project: Auto completion input + gadget inspector || ((844a0f9a-b0a4-43ef-9f3d-f58c91c910af)) 
		dumdom02c project: list items || ((88f97beb-3ff5-4bc9-aed1-649e6e2511ad)) 
		dumdom02b project: defcomponent + add-watch || ((0439aaf0-32a5-4ba9-a48e-e2039b3a701f)) 
		dumdom02 project: || ((fcdb2a77-6ace-444f-ac78-bf120bc539a7)) 
		dumdom01 project: dumdom + figwheel + devcards || ((5e4f610b-0fad-4854-ab3b-88514eb74048)) 
		figwheel10 project: dumdom inside devcards || ((ce043a32-40de-4918-8cd6-c00d143be823)) 
		figwheel09 project: use dumdom components || ((3a10b9ad-89e7-4052-87ca-1eb5b995fd91)) 
		figwheel08 project: devcards + custom home page || ((37b21d77-8354-484a-843e-80c9c0a9e493)) 
		figwheel07 project: custom home page manipulate dom  || ((bcd36af4-66ed-4de5-b27c-35996c58c4d7)) 
		figwheel06 project: custom home page || ((b5b260c1-0ba2-4a34-9788-ca3519c3dbf0)) 
		error: figwheel: repl açılmama problemi || ((8e9c0b1d-388d-41d4-9e89-46c70612717d))
		cjohansen/dumdom: Efficiently render and re-render immutable data || ((d5043a0f-d76a-4816-92f2-99d39cd5e38c))
		figwheel05 project: devcards || ((f0d64321-788d-4983-8e83-e05707617466)) 
		figwheel03 project: figwheel configuration dev.cljs.edn || ((fe5ad234-3763-499a-b96e-8f019fcfe137)) 
		figwheel02 Project  || ((0eb26bd0-c7b4-4fda-9dd6-369a67a9cd16)) 
		figwheel01 Project || ((59ebab69-a4ff-4463-8832-fd471e1d99f7)) 
		Figwheel Tutorial || ((e568d216-1505-41b0-bdc5-c72cdad0b62b))
		Study Figwheel || ((aeaa6bf1-77d7-4f55-9034-83ad6ccaf1d6))
		figwheel vs shadowcljs vs devcard || ((31f42c86-878e-4151-9c4f-e9bb4add682f)) 
	io - file
	  id:: 1461afaf-e083-4b6f-bbd2-1d37487133aa
		rfr: ~/projects/study/clj/ex/study_clojure/ex06/src/io_file.clj
		(edn/read-string (slurp "deps.edn")) ; edn file -> string -> map
		(spit "tmp.txt" "test")
		(slurp "tmp.txt") ;; => "test"
	data structures
	  id:: b25b54f4-cf8e-4543-9d7d-e7feaa63eebe
		boolean
			(boolean false) ;; => false
			(boolean nil) ;; => false
			(boolean 0) ;; => true
			(boolean []) ;; => true
		string
			;; Strings || ((128660fd-05fd-4105-ba98-800741f658c8))
				(str "join " "strings") ;; => "join strings"
				(format "%s %s" "this is" "me") ;; => "this is me"
		numbers
			;; Numbers || ((2e6859f0-9ce1-4c3c-ac5c-9d45c3bf67d7))
			(/ 4 3) ;; => 4/3
			(* (/ 4 3) 3) ;; => 4N
		lists
			;; Lists || ((8b47dcf1-75f2-451b-bd6a-5ea57c9919b0))
			'(1 2 3) ;; => (1 2 3)
			(conj '(1 2) 3) ;; => (3 1 2)
			(nth '(3 5 2) 1) ;; => 5
			(count '(5 3)) ;; => 2
		vectors
			;; Vectors || ((78b279d9-fa12-4af5-84b1-182ce53ac80f))
			[3 2 5] ;; => [3 2 5]
			(conj [4 1] 7) ;; => [4 1 7]
			(nth [3 2] 0) ;; => 3
			(last [2 7 1]) ;; => 1
			(get ["a" "b"] 1) ;; => "b"
		sets
			;; Sets || ((2f6651e2-2d48-41f7-a0ff-fec67e7b7469))
			(conj #{1 2 3} 4) ;; => #{1 4 3 2}
			(disj #{1 2 3} 3) ;; => #{1 2}
			(sort #{1 2 3}) ;; => (1 2 3)
			(contains? #{1 2 3} 2) ;; => true
			(clojure.set/subset? #{1 2} #{1 2 3}) ;; => true
			(clojure.set/superset? #{1 2 3} #{1 2}) ;; => true
		maps
			;; Maps || ((d167482b-e877-4a15-8593-bb125f4381f9))
			{:a 1 :b 2} ;; => {:a 1, :b 2}
			(get {:a 1 :b 2} :a) ;; => 1
			({:a 1 :b 2} :a) ;; => 1
			({:a 1 :b 2} :c "default") ;; => "default"
			(:a {:a 1 :b 2}) ;; => 1
			(assoc {:a 1} :c 3) ;; => {:a 1, :c 3}
			(merge {:a 1} {:c 3}) ;; => {:a 1, :c 3}
			(keys {:a 1 :b 2}) ;; => (:a :b)
			(vals {:a 1 :b 2}) ;; => (1 2)
			(contains? {:a 1 :b 2} :a) ;; => true
			(get-in {:a {:b 3}} [:a :b]) ;; => 3
			Threading macro to shorten code: || ((5092eb8a-3bda-4bd6-b088-a698d9e77aee)) 
				(-> {:a {:b 3}}
					:a
					:b)
				;; => 3
	sequences
	  id:: 158af50e-e0d6-433b-9960-b685a6866bc9
		Sequences || ((225c144e-9630-4b13-8b00-1a5d1b4e4793))
			(seq '(1 2)) ;; => (1 2)
			(seq [1 2]) ;; => (1 2)
			(first [5 2]) ;; => 5
			(second [5 2]) ;; => 2
			(rest [1 2 3]) ;; => (2 3)
			(cons 0 [1 2]) ;; => (0 1 2)
			(concat '(1 2) '(3 4)) ;; => (1 2 3 4)
		sect01: shorter seq || ((eea4fac2-4bad-47a4-b744-30544f492490))
			(distinct [1 2 3 1]) ;; => (1 2 3)
			(filter even? [1 2 3]) ;; => (2)
			(remove pos? [-1 0 1]) ;; => (-1 0)
			(for [x [0 1 2] :let [y (inc x)] when (even? y)] x) ;; => (1)
			(keep pos? [-1 0 1]) ;; => (false false true)
			(keep-indexed #(if (odd? %1) %2) [:a :b :c]) ;; => (:b)
		sect02: longer seq || ((7f38f31d-27e5-4500-ad15-275514345396))
			(cons 1 [2 3]) ;; => (1 2 3)
			(cons 1 '(2 3)) ;; => (1 2 3)
			(concat [1 2] [3 4]) ;; => (1 2 3 4)
			(lazy-cat [1 2] [3 4]) ;; => (1 2 3 4)
			(mapcat reverse [[1 2] [3 4]]) ; foldMap ;; => (2 1 4 3)
			(take 5 (cycle [1 3]))  ; rep ;; => (1 3 1 3 1)
			(interleave [:a :b] [1 2]) ; zip ;; => (:a 1 :b 2)
			(interpose ", " ["ali" "veli"]) ;; => ("ali" ", " "veli")
			(apply str (interpose ", " ["ali" "veli"])) ;; => "ali, veli"
			(str/join ", " ["ali" "veli"]) ;; => "ali, veli"
		sect03: head-items missing || ((fcf96470-a485-40e5-a2b4-fcc7bbb5e810))
			(rest [1 2 3]) ;; => (2 3)
			(next [:a :b :c]) ;; => (:b :c)
			(rest [:a]) ;; => ()
			(next [:a]) ;; => nil
			(fnext [1 2 3]) ;; => 2
			(nnext [1 2 3]) ;; => (3)
			(drop 2 [1 2 3]) ;; => (3)
			(drop -1 [1 2 3]) ;; => (1 2 3)
			(drop 5 [1 2 3]) ;; => ()
			(drop-while pos? [1 3 -2 -5 4]) ;; => (-2 -5 4)
			(nthnext [1 2 3] 2) ;; => (3)
		sect04: tail-items missing || ((6b2497ce-5f5f-4821-acfd-a439feebbed8))
			(take 2 [1 2 3]) ;; => (1 2)
			(take-nth 2 [1 2 3 4 5]) ;; => (1 3 5)
			(take-while pos? [1 2 -1 3]) ;; => (1 2)
			(butlast [1 2 3]) ;; => (1 2)
			(drop-last 2 [1 2 3]) ;; => (1)
		sect05: rearrangement of a seq || ((966716ae-efe0-41e6-a72c-04ffd73e8f97))
			(flatten [1 [2 3]]) ;; => (1 2 3)
			(reverse [1 2 3]) ;; => (3 2 1)
			(sort [3 1 2]) ;; => (1 2 3)
			(sort-by count ["ali" "x"]) ;; => ("x" "ali")
			(shuffle [1 2 3]) ;; => [1 2 3]
		sect06: nested seqs || ((c976af8b-46aa-4cc8-8bfb-2b7e9d46e817))
			(split-at 2 [1 2 3 4 5]) ;; => [(1 2) (3 4 5)]
			(split-with pos? [1 2 -1 3]) ;; => [(1 2) (-1 3)]
			(split-with (partial > 2) [1 2 -1 0]) ;; => [(1) (2 -1 0)]
			(partition 2 (range 5)) ;; => ((0 1) (2 3))
			(partition-all 2 (range 5)) ;; => ((0 1) (2 3) (4))
			(partition-by pos? [-1 3 0 -3]) ;; => ((-1) (3) (0 -3))
		sect07: partition each item to create a new seq || ((a587c3dc-7e1c-4a05-ac74-4aed14a967e4))
			(map inc [1 2 3]) ;; => (2 3 4)
			(map + [1 2] [3 4]) ;; => (4 6)
			(apply map vector [[:a :b :c] [:d :e :f] [:g :h :i]]) ;; => ([:a :d :g] [:b :e :h] [:c :f :i])
			(pmap inc [1 2 3]) ;; => (2 3 4)
			(mapcat reverse [[1 2] [3 4]]) ; foldMap ;; => (2 1 4 3)
			(for [x [0 1 2] :let [y (inc x)]] y) ;; => (1 2 3)
			(replace [:a :b :c :d :e] [0 3 0]) ;; => [:a :d :a]
			(reductions + [1 2 3]) ;; => (1 3 6)
			(map-indexed #(when (< % 2) (str % %2)) [:a :b :c]) ;;=> ("0:a" "1:b" nil)
			(keep-indexed #(when (< % 2) (str % %2)) [:a :b :c]) ;;=> ("0:a" "1:b")
		sect01: extract a specific-numbered item || ((22ac5a82-3980-4efb-b362-2517e2d228be))
			(first [1 2 3]) ;; => 1
			(ffirst [[3 4] [1 2]]) ;; => 3
			(nfirst [[3 4] [1 2]]) ;; => (4)
			(second [1 2 3]) ;; => 2
			(nth [:a :b :c] 2) ;; => :c
			(when-first [a [1 2]] a) ;; => 1
			(last [1 2 3]) ;; => 3
			(rand-nth [1 2 3]) ;; => 2
		sect02: seq -> collection || ((9abef4c4-8d7c-407f-a840-afdd71426590))
			(zipmap [:a :b] [1 2]) ;; => {:a 1, :b 2}
			(into (sorted-map) {:b 1 :a 2}) ;; => {:a 2, :b 1}
			(reduce + [1 2 3]) ;; => 6
			(set [1 2 1]) ;; => #{1 2}
			(vec '(1 2 3)) ;; => [1 2 3]
			(frequencies [:a :b :a]) ;; => {:a 2, :b 1}
			(group-by count ["ali" "ab" "axe"]) ;; => {3 ["ali" "axe"], 2 ["ab"]}
		sect03: pass items to a function || ((5f501113-afb0-44cc-acb1-1ed710638879))
			(apply str [1 2 3]) ;; => "123"
			(str [1 2 3]) ;; => "[1 2 3]"
			(str 123) ;; => "123"
		sect04: compute boolean || ((397f8aa9-c83d-40e9-9797-e6d961b321d7))
			(not-empty [1 2]) ;; => [1 2]
			(not-empty "hello") ;; => "hello"
			(some even? [1 2 3]) ;; => true
			(seq? [1 2 3]) ;; => false
			(every? even? [1 2]) ;; => false
			(not-every? even? [1 2]) ;; => true
			(not-any? even? [1 2]) ;; => false
			(empty? [1 2]) ;; => false
	core id=g11867
	  id:: 914e1668-4417-44f2-8c5f-9d1f3b91ff7f
		assoc assoc-in update update-in
			rfr: ~/projects/study/clj/ex/study_clojure/ex06/src/assoc_update.clj
			update-in
				update-in || ((4196a925-0822-4bcc-9044-9e30159d8499))
				(def p {:name "James" :age 26})
				(update-in p [:age] inc) ;;=> {:name "James", :age 27}
			assoc-in
				assoc-in || ((79d35b9c-4f6e-46ab-b3a8-4c7ea628cf75))
				ref: ~/projects/study/clj/ex/study_clojure/ex06/src/assoc_update.clj
				(assoc-in {:person {:name "Mike"}} [:person :name] "Violet") ; => {:person {:name "Violet"}}
				(assoc-in {:person {:name "Mike"}} [:person] "Violet") ; => {:person "Violet"}
		reduce-kv
			; reduce-kv || ((11824791-e3e3-4e27-9b00-2e7b6c3f704b))
			(reduce-kv #(assoc %1 %3 %2) {} {:a 1 :b 2}) ;; => {1 :a, 2 :b}
			(reduce-kv (fn [m k v] (assoc m k (inc v)))
				{} {:a 1 :b 2}) ;; => {:a 2, :b 3}
		keep
			keep  || ((513c62cc-9c4c-410b-a12b-d761e430ecea))
			(keep #(if (odd? %) %) (range 4)) ;;=> (1 3 5 7 9)
		literals
		  id:: 4ffdc27a-f874-471e-8f71-2d06b5ccb27c
			Strings (character types) || ((8d8249af-ef66-4962-a863-3b2709cf49a9))
			Symbols and idents: || ((3443b96f-20e7-4473-a007-099a21c83869))
			"hello"         ; string
			\e              ; character
			#"[0-9]+"       ; regular expression
			'(1 2 3)     ; list
			[1 2 3]      ; vector
			#{1 2 3}     ; set
			{:a 1, :b 2} ; map
		complement
			; complement id=g_11434 || ((c1d9a688-de98-4f92-8a61-ef0cadb6fddb))
			(def not-empty? (complement empty?))
			(not-empty? [1 2]) ;;=> true
		map
			map doc || ((f16a2238-e024-477a-a7b5-e6df2095ac2b))
			(map f coll)
			(map + [1 2 3] [4 5 6]) ;;=> (5 7 9)
			; map || ((ee4578b4-0927-4726-9a79-0469b6816cfd))
			(map vector [:a :b] [:d :e]) ;; => ([:a :d] [:b :e])
			(map inc [1 2]) ;; => (2 3)
			(map key {:a 1 :b 2}) ;; => (:a :b)
		reduce id=g11310
		  id:: 72c307eb-5f30-47ae-a8a0-a1ddc0d34ccd
			ref: ~/projects/study/clj/ex/study_clojure/ex06/src/reduce.clj
			reduce || ((d66b8b99-6937-4714-a176-38ae8206d76a))
			; reduce  || ((7d017956-fe1e-4ca8-b89e-3699bca0fad6))
			(reduce + [1 2 3]) ;; => 6
			(reduce (fn [rst x] (+ rst x)) [1 2 3]) ;; => 6
			(reduce + -10 [1 2 3]) ;; => -4
		into
			; into || ((a264f005-b49c-45d9-b74f-c87b1549cf3b))
			(into [1 2] '(3 4)) ;; => [1 2 3 4]
			(into [] '(1 2)) ;; => [1 2]
			(into {} [[:a 1] [:b 2]]) ;; => {:a 1, :b 2}
			(into [] {:a 1 :b 2}) ;; => [[:a 1] [:b 2]]
		mapv
			mapv function || ((bd622e7c-51de-4c7b-bf6f-a1c4190ccdba))
			(mapv + [1 2] [3 4]) ;; => [4 6]
		hash-map
			hash-map function || ((468a5192-4e10-465f-91ac-d10a6faa0406))
				(hash-map :key1 'val1) ;; => {:key1 val1}
				(hash-map [:compound :key] nil) ; compound key ;; => {[:compound :key] nil}
			Hashmaps || ((e56434f9-d5b6-4348-bc0b-f5896b3f3349))
				constructor function
					(hash-map :a 1 :b 2) ;; => {:b 2, :a 1}
				hashmap literal
					{:a 1 :b 2} ;; => {:a 1, :b 2}
			Converting other collections to hashmaps || ((e0c00c71-37f1-4576-986b-98db74a83ac5))
				(hash-map [:a 1 :b 2 :c 3]) ;; => IllegalArgumentException
				(apply hash-map [:a 1 :b 2 :c 3]) ;; => {:c 3, :b 2, :a 1}
		map-indexed
			map-indexed function || ((2d27420c-1da5-4772-8fe0-3346633626d6))
			(map-indexed hash-map "foobar") ;; => ({0 "f"} {1 "o"} {2 "o"} {3 "b"} {4 "a"} {5 "r"})
		iterations
			; iterations || ((f7b18ad3-cf15-4b21-b0b3-d4fd644b6f53))
			(take 3 (iterate inc 3)) ;; => (3 4 5)
			(range 1 3) ;; => (1 2)
			(repeatedly 3 #(str "hi")) ;; => ("hi" "hi" "hi")
			(doseq [a [1 2 3]] (println a)) ;; => nil
			(dotimes [i 3] (println i)) ;; 0 ;; 1 ;; 2 ;; => nil
		take
			; take drop || ((40c9c95c-f4bd-4c2c-b654-2e5b7690b39e))
			(take 5 (range 0 100)) ;; => (0 1 2 3 4)
			(take-while pos? [1 2 -3 4]) ;; => (1 2)
			(drop 3 (range 0 10)) ;; => (3 4 5 6 7 8 9)
			(drop-while pos? [1 2 -3 4]) ;; => (-3 4)
		filter
			; filter || ((0854153b-66e4-4a95-9d26-0acf73c40bd9))
			(filter pos? [1 2 -3 4]) ;; => (1 2 4)
			(remove pos? [1 2 -3 4]) ;; => (-3)
		group-by partition-by
			; grouping || ((8c3a0508-6346-4c59-b375-8468649428d0))
			(partition-by pos? [1 2 -3]) ;; => ((1 2) (-3))
			(group-by pos? [1 2 -3]) ;; => {true [1 2], false [-3]}
		for: list comprehension
			; for: list comprehension || ((57172385-7a2e-4ef3-a8cb-62ba2b202cf0))
			(for [x [1 2 3]] (+ 5 x)) ;; => (6 7 8)
			(for [x [-1 2 3] :when (< 0 x)] x) ;; => (2 3)
			(for [x [1 2 3] :let [y (+ x 1)] when (even? y)] y) ;; => (2 4)
			(for [x (range 3) :while (< x 2)] x) ;; => (0 1)
		vec
			vec function || ((19bf302c-8da2-4fe8-ae8c-1cc501c71e2e))
			(vec '(1 2 3)) ;; => [1 2 3]
		partial
			partial doc || ((cdac1ea7-104e-4178-a7c7-0516ad9b36ea))
			(partial f arg1)
			(def hundred-times (partial * 100))
		apply
			apply doc || ((f0f7d83d-7de4-46a7-99f6-740fb0979474))
			(apply f args)
			(apply max [1 2 3])
			(apply + [1 2 3]) ;; => 6
			(apply hash-map [:a 1 :b 2 :c 3]) ;; => {:c 3, :b 2, :a 1}
		comp
			comp doc || ((1444c095-c871-48fd-a9eb-71d2596e7243))
			(comp f g)
			((comp str +) 8 8 8)
		juxt
			juxt doc || ((79cb6793-bd2f-4059-b8c3-cacce96160c0))
			((juxt a b c) x) => [(a x) (b x) (c x)]
			((juxt :a :b) {:a 1 :b 2 :c 3 :d 4}) ;;=> [1 2]
			((juxt identity name) :keyword) ;;=> [:keyword "keyword"]
		identity
			identity doc || ((00992df9-a5e6-4224-ba58-b3daf9bc6734))
			(identity 4) ;; => 4
		name
			name doc || ((873d97e6-a711-457f-8942-a1de1da82917))
			(name :x) ;;=> "x"
		pr-str
			pr-str doc || ((46f4e83c-a2ee-4b8d-ade0-8cc7c654da43))
			(pr-str x) ;; => "[1 2 3 4 5]"
			(read-string (pr-str x)) ;; => [1 2 3 4 5]
		repeat
			repeat doc || ((e9b15bb8-56d2-49b6-91e2-9fc7418328ab))
			(take 5 (repeat "x")) ;; => ("x" "x" "x" "x" "x")
			(repeat 5 "x")
		into
			into doc || ((645268ee-4ad4-40b8-93d7-fc742d3c0bbc))
			(into () '(1 2 3)) ;; => (3 2 1)
			(into [1 2 3] '(4 5 6)) ;; => [1 2 3 4 5 6]
			(into (sorted-map) [ [:a 1] [:c 3] [:b 2] ] ) ;; => {:a 1, :b 2, :c 3}
			(into [] {1 2, 3 4}) ;; => [[1 2] [3 4]]
		remove
			remove doc || ((0415395d-49a2-45ac-bef5-178df6636562))
			(remove even? (range 10)) ;;=> (1 3 5 7 9)
			(remove #(> (second %) 100) {:a 1 c 101 }) ;;=> ([:a 1] )
			(map #(> (second %) 100) {:a 1 :c 101}) ;; => (false true)
		swap!
			swap! amap assoc akey nasıl çalışıyor? || ((12c4ae98-1329-4f05-96d8-fd3dc5541eda))
			(def m (atom {:a 1}))
			(swap! m assoc :b 2) ;; => {:a 1, :b 2}
		defonce
			defonce || ((6ff73f8a-5941-46db-ad04-dc1b9867599c))
			(defonce foo 5)
			(defonce foo 10) ;; => nil
		namespaced keyword (qualified keywords) (namespaced maps)
			namespaced keyword notations || ((2c3d28e1-ec24-4382-b495-c358d02eceee))
			#:a{:b :c} ;; => #:a{:b :c}
			{:a/b :c} ;; => #:a{:b :c}
			Destructuring qualified keywords || ((c1c2e39a-0e73-40b2-ac41-bc644485f4ce)) 
			Destructuring qualified keywords of alias namespaces  || ((b3a5f7a9-64a0-4cbe-ba81-4d296ad372dd)) 
		io file read write
			; slurp: read file url id=g_11404 || ((b89c9c97-d5bc-45cb-81ba-c18ea4ff0458))
			(spit "tmp.txt" "test")
			(slurp "tmp.txt") ;; => "test"
	libraries
	  id:: dfe2cb50-1560-4c15-ba30-87378d869c9e
		specter id=g11443
			ex: Increment every even number nested within map of vector of maps || ((0c5942b5-c664-4529-8155-c865bc125751))
				(def data {:a [{:aa 1 :bb 2} {:cc 3}] b [{:dd 4}]})
				(transform [MAP-VALS ALL MAP-VALS even?] inc data) ;; => {:a [{:aa 1, :bb 3} {:cc 3}], :b [{:dd 5}]}
			ex: Append a sequence of elements to a nested vector || ((c24b99b2-846a-41b9-9c6f-acc5a9b33d56))
				(def data {:a [1 2 3]})
				(setval [:a END] [4 5] data) ;; => {:a [1 2 3 4 5]}
			ex: Increment the last odd number in a sequence || ((825dfcb5-19f4-49e6-b6d8-0e3615371656))
				(def data [1 2 3 4])
				(transform [(filterer odd?) LAST] inc data) ;; => [1 2 4 4]
		string id=g13009
		  id:: 5a5a753a-9da6-41ed-b726-18bf0855598c
			capitalization of a string || ((d8f78af7-eaf7-4d6e-bbcd-d7fd00318710)) 
				(str/capitalize "a b. c d.") ;; => "A b. c d."
				(str/upper-case "ab c") ;; => "AB C"
				(str/lower-case "A B") ;; => "a b"
			Clean Whitespace in a String  || ((c4611fe2-d403-414f-a062-02e2a4a33733)) 
				(str/trim " \ta b\n") ;; => "a b"
				(str/replace "a\t\nb c\fd" #"\s+" " ") ;; => "a b c d"
			Combine/Join a String || ((d5637b75-6329-4d4d-b718-6bd4417edca4)) 
				(str "a" " " "b") ;; => "a b"
				(def lines ["#! /bin/bash\n", "du -a ./ | sort -n -r\n"])
				(apply str lines) ;; -> "#! /bin/bash\ndu -a ./ | sort -n -r\n"
				(def f ["a" "b"]) (str/join ", " f)
				(str/join [1 2 3 4]) ;; => "1234"
			Constructing a CSV from a header string and vector of rows
				(def header "a,b\n")
				(def rows ["10,20","11,21"])
				(apply str header (interpose "\n" rows))
				;; => "a,b\n10,20\n11,21"
			String to Character || ((65b13c56-1c29-4dc6-8e8a-3d5ca5be8352)) 
				(seq "ali") ;; => (\a \l \i)
				(frequencies (str/lower-case "aa b")) ;; => {\a 2, \space 1, \b 1}
			all_upper?
				(defn all_upper? [s] (every? #(or (not (Character/isLetter %)) (Character/isUpperCase %)) s))
				(all_upper? "A B") ;; => true
				(all_upper? "A b") ;; => false
			Character to/from Integer || ((79499e1f-7531-4b49-b747-a06a79bb7b8a)) 
				(int \a) ;; -> 97
				(map int "a b") ;; => (97 32 98)
				(char 97) ;; -> \a
			Formatting Strings || ((573f52b9-2fbc-4059-a45c-ae6a42fa5ef2)) 
				(def me {:k "v"})
				(str "key: " (:k me)) ;; => "key: v"
				(apply str (interpose " " [1 2.000 (/ 3 1) (/ 4 9)])) ;; -> "1 2.0 3 4/9"
				;; format
					(defn filename [name i] (format "%03d-%s" i name))
					(filename "file.txt" 12)
					;; => "012-file.txt"
			Pluralizing Strings || ((8bb1a430-e696-4de6-ac8b-0bcdb7d5e520)) 
				(require '[inflections.core :as inf])
				(inf/pluralize 1 "monkey") ;; -> "1 monkey"
				(inf/pluralize 12 "monkey") ;; -> "12 monkeys"
			Converting Between Strings, Symbols, and Keywords || ((6ff036e7-480e-479c-876b-1dedba7635b1)) 
				(symbol "a?") ;; => a?
				(str 'a?) ;; => "a?"
				(name :a) ;; => "a"
				(str :a) ;; => ":a"
				(keyword "a") ;; => :a
				(keyword 'a) ;; => :a
				(symbol (name :a)) ;; => a
				(name :user/a?) ;; => "a?"
				(namespace :user/a?) ;; => "user"
		regex
			Regex Match || ((49cd9d3b-c5f4-4967-94f9-ec3e18e1a757)) 
				(re-find #"\d+" "ab 12") ;; => "12"
				(re-matches #"\w+" "ab c") ;; => nil
				(re-seq #"\w+" "ab c") ;; => ("ab" "c")
				(defn mentions [tweet] (re-seq #"(@|#)(\w+)" tweet))
				(mentions "ab @c de. #fg")
				;; => (["@c" "@" "c"] ["#fg" "#" "fg"])
			Regex Replace || ((b325aa9c-8140-448b-a29a-ef88109066f0)) 
				(str/replace "a b" "a" "c") ;; => "c b"
				(str/split "A,B" #",") ;; => ["A" "B"]
		clj-time
			(require '[clj-time.core :as t])
			(str (t/now)) ;; => "2019-11-01T11:53:40.214Z"
		number
			BigDecimal BigInt
				(+ 1 0.0001M) ;; 1.0001M
				(+ 1 1000000000000000N)
			Precision Numbers || ((ce594888-8628-4791-9062-88e54bee3120)) 
				2.1e2 ;; -> 2.1E2
				1e-10 ;; -> 1.0E-10
				(* 9999 9999 9999 9999 9999) ;; ArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow
				(*' 9999 9999 9999 9999 9999) ;; => 99950009999000049999N
			Rational Numbers || ((a6cce897-adca-4e97-bcb7-17afb3aeb661)) 
				(/ 1 3) ;; -> 1/3
				(type (/ 1 3)) ;; -> clojure.lang.Ratio
				(* 3 (/ 1 3)) ;; -> 1N
				(rationalize 0.3) ;; -> 3/10
				(+ (/ 1 3) (rationalize 0.3)) ;; -> 19/30
			Parsing Numbers || ((1cb62e86-7451-435b-b0fd-956f9128ceb9)) 
				(Integer/parseInt "-42") ;; -> -42
				(Double/parseDouble "3.14") ;; -> 3.14
			Rounding and Truncating || ((bcc72f4e-b972-4f2d-8d96-835188e9936a)) 
				(int 2.0001) ;; -> 2
				(int 2.999999999) ;; -> 2
				(Math/round 2.0001) ;; -> 2
				(Math/round 2.999) ;; -> 3
			Fuzzy Comparison || ((4aaf599b-4f9c-4c25-bd45-29015f081086)) 
				(defn fuzzy= [tolerance x y]
					(let [diff (Math/abs (- x y))]
						(< diff tolerance)))
				(fuzzy= 0.01 10 10.001)
				;; => true
			Trigonometry || ((416fb9b1-fb9e-497e-8473-f9a0e85ab3f4)) 
				(Math/sin 0.1) ;; => 0.09983341664682815
			Different Bases || ((af24e979-de07-44e2-8cb2-31ea63547501)) 
				(int 2r101) ;; => 5
				(int 16r2A) ;; => 42
				(Integer/toString 5 2) ;; => "101"
			Random Numbers || ((92f532a4-43bf-47a8-8492-442202208a89)) 
				(rand) ;; -> 0.0249306187447903
				(inc (rand-int 6)) ;; => 1
				(rand-nth '(:a :b :c)) ;; -> :c
				(rand-nth (seq #{:heads :tails})) ;; -> :heads
				(shuffle [1 2 3 4 5 6]) ;; -> [3 1 4 5 2 6]
			imprecise numbers || ((ae8db229-390c-4753-af50-f1d8fa28e3e3)) 
				(- 0.23 0.24) ;; -> -0.009999999999999981
		uuid
			uuid global identifiers || ((ae224cea-ca28-4191-adcf-eb386a11400d)) 
				(java.util.UUID/randomUUID) ;; -> #uuid "5358e6e3-7f81-40f0-84e5-750e29e6ee05"
				(def u1 (squuid))
				u1 ;; -> #uuid "527bf210-dfae-4c73-8b7a-302d3b511f41"
		date time
			Date and Time || ((9bb38b6c-8efe-4919-9713-4ea4d7ffdd8d)) 
				(defn now [] (java.util.Date.))
				(now) ;; => #inst "2020-06-16T18:44:08.981-00:00"
				; unix timestamp
				(System/currentTimeMillis) ;; => 1592333064027
			Dates as Literals || ((acacb380-6f4d-42f6-9ab1-dd64c37d3b7f)) 
				(def my-birthday #inst "1987-02-18T18:00:00.000-00:00")
				(println my-birthday) ;; #inst "1987-02-18T18:00:00.000-00:00"
			Parsing Dates || ((7d6cd1a6-c8ed-408f-9ae8-5bc8b98c775e)) 
				(require '[clj-time.format :as tf])
				(tf/parse (tf/formatter "MM/dd/yy") "02/18/87") ;; -> #<DateTime 1987-02-18T00:00:00.000Z>
			Formatting Dates || ((b671f0ff-8610-43e8-a896-c3bcbe828313)) 
			Convert joda from/to java date instances || ((387b0fed-a948-4f51-a892-8b0c05b151db)) 
			Comparing Dates || ((d3b0d8ae-ab32-46c7-90bf-0b576d5c3a6a)) 
				(defn now [] (java.util.Date.))
				(def one-second-ago (now))
				(compare (now) one-second-ago) ;; -> 1
				(def occurrences [#inst "2013-04-06T17:40:57.688-00:00" #inst "2002-12-25T00:40:57.688-00:00"])
				(sort occurrences) ;; => (#inst "2002-12-25T00:40:57.688-00:00" #inst "2013-04-06T17:40:57.688-00:00")
			Time Interval Between || ((aa11d368-3e00-406d-9b6b-01dd407254e4)) 
		edn edn2 id=g13087
			rfr:
				fulcro tipi veritabanı || ((f284aba4-df07-46ec-9ba3-6d1bf3c205f4))
					~/projects/study/clj/ex/study_clojure/ex06/src/edn02.edn
					~/projects/study/clj/ex/study_clojure/ex06/src/edn.cljs
					~/projects/study/clj/ex/study_clojure/ex06/src/edn.clj
				[Learn edn in Y Minutes](https://learnxinyminutes.com/docs/edn/)
				~/projects/study/clj/ex/study_fulcro/glam/out/db_settings.edn
			edn-format/edn: Extensible Data Notation || ((fe32328f-c7be-4195-a4a0-45ce03088cb6)) 
			Tagging elements: #tag {:a 1}
	datomic id=g12850
	  id:: fe47891e-5cc8-428e-afaf-833c581325d4
		rfr
			datomic.otl || ((8361a15c-7452-4dc2-babd-5faf76e3fe47))
			articles - datomic || ((b3dcd67d-47dc-4ee7-8989-cfc743066272))
			gtd - datomic || ((b097e98b-0de7-410d-93ef-2d8811d9d3af)) 
		datalog-01 /Users/mertnuhoglu/projects/study/clj/ex/study_datomic/datalog-01/deps.edn
		Referentially transparent CRUD - Christian Johansen || ((40ca8c98-7901-4900-b1a3-3e719129c58c)) 
	concepts
		record defrecord
			defrecord || ((800a642e-9804-461d-b196-a480c6656f17)) 
				ex
					(defrecord Nadine [x y z] ; fields
						Roger ; protocol implemented
						(foo [this]
					(def adam (new Nadine 3 "hi" false)) ; new special form
					(foo adam 7 2) ; instance adam: adam.foo(7, 2)
					(. adam x) ; adam.x field access
					(get adam :x) ; adam.x as keyword
				defprotocol = interface
				defrecord = class
				map fct returns a new record
					(assoc adam :x 5) ; new Nadine record {:x 5 :y "hi" :z false}
			create types || ((9b66271a-dfd0-4f75-89f0-e06ffd348a87)) 
				deftype: for data structure
				defrecord: for domain data
			;; printing https://clojuredocs.org/clojure.core/pr id=g_11321 || ((cbe69a05-4d85-4b6b-a60e-1818b54f76ca)) 
				(defrecord Book [title author])
				(->Book "title01" "author01") ;; => #user.Book{:title "title01", :author "author01"}
		global bindings
			; global bindings: defn vs def || ((e3ea91e4-6757-4eeb-a217-a0f1e0851451)) 
				(defn f [a] a)
				(def g (fn [a] a))
				(defn documented "This is documentation" [] (str ""))
		quoting
			(quote (1 2 3)) ;; (1 2 3)
			(type 'quoted-symbols-are-not-evaluated) ;; => clojure.lang.Symbol
			; quotes || ((37128a13-2be6-44a5-b7d9-8f587a09ebb3))
				(quote (+ 1 2)) ;; => (+ 1 2)
				'(+ 1 2) ;; => (+ 1 2)
			; syntax-quoting  || ((090330d6-df66-42d3-8ced-7f312302146e))
				`(+ 1 2) ;; => (clojure.core/+ 1 2)
				`(+ 1 ~(inc 1)) ;; => (clojure.core/+ 1 2)
				`(+ ~(list 1 2)) ;; => (clojure.core/+ (1 2))
				`(+ ~@(list 1 2)) ;; => (clojure.core/+ 1 2)
			Delaying evaluation with quoting || ((370456da-2f86-423c-9c1c-743da07afd44)) 
				'x
				'(1 2 3)
		special forms
			Special Forms || ((87214ec3-00fd-4df3-814f-ea04daf7865e))
				unlike function calls, they don’t always evaluate all of their operands
				you can’t use them as arguments to functions
				; var and reader macro  || ((5a50be6a-394b-4bc2-96dc-57fdb78acaa4)) 
					(meta (var documented))
					(meta #'documented)
					;; => {:arglists ([]), :doc "This is documentation", :line 65, :column 1, :file "/Users/mertnuhoglu/projects/study/clj/ex/study_clojure/ex06/src/ex_kimh.clj", :name documented, :ns #namespace[clojure_by_example_kimh]}
		multi-arity
			Multi-arity || ((fc072c16-c541-47fd-9028-d1b224abd36b))
				(defn plus
					([a b] (+ a b))
					([a] (+ a)))
				default values for arguments
					(defn fn1
						([a b] (str a b))
						([a] (fn1 a "karate")))
		variable-arity
			Variable-arity || ((05da7039-5244-4871-97f9-149120335898))
				(defn fn1
					[name & things]
					(str name (clojure.string/join ", " things)))
		variadic
			;; printing https://clojuredocs.org/clojure.core/pr id=g_11321 || ((cbe69a05-4d85-4b6b-a60e-1818b54f76ca)) 
			(defn f [x & xs] (str x xs))
			(f 1 2 3) ;; => "1(2 3)"
		destructuring id=g11904
			Destructuring || ((cc911e94-34a3-4815-b2ab-3abd090fe055))
				(defn fn1 [[a]] a)
				(fn1 [1 2 3]) ;; => 1
			; destructuring || ((2c91e0d4-4735-4bfb-8247-edf684efcdff))
				(let [[a b & c :as d] [1 2 3 4]] [a b]) ;; => [1 2]
				(let [[a b & c :as d] [1 2 3 4]] [c]) ;; => [(3 4)]
				(let [[a b & c :as d] [1 2 3 4]] [d]) ;; => [[1 2 3 4]]
				(let [{a :a, c :c}  {:a 5 :c 6}] [a c]) ;; [5 6]
				(let [{a :a, :as m} {:a 2 :b 3}] [a m]) ;; => [2 {:a 2, :b 3}]
			Destructuring qualified keywords || ((c1c2e39a-0e73-40b2-ac41-bc644485f4ce)) 
				(def props {:car/make "Škoda", :ui/selected? false})
				;; 1. :<ns>/keys [..]
				(let [{:car/keys [make], :ui/keys [selected?]} props] [make selected?])
				;; 2. :keys [<ns1>/key1, <ns2>/key2, ...]
				(let [{:keys [car/make ui/selected?]} props] [make selected?])
				;; 3. <symbol> <qualified keyword>
				(let [{make :car/make, selected? :ui/selected?]} props] [make selected?])
			Destructuring qualified keywords of alias namespaces  || ((b3a5f7a9-64a0-4cbe-ba81-4d296ad372dd)) 
				; Alias ile qualify edilen keyword iki tane `:` gerektirir: `::<ns_alias>/kwd`
				; Eğer alias ile qualify etmeden çift `:` kullanırsan, current ns ile genişletilir: `::kwd` = `:<current_ns>/kwd`
				(ns myns (:require [my.domain.car :as car]))
				(def props {::car/make "Škoda", :my.domain.car/year 2020, ::sold? true})
				(let [{::car/keys [make year], ::keys [sold?], sold2? :myns/sold?} props]
					(println make year sold? sold2?))
				; OUT> Škoda 2020 true true
		anonymous functions
			anonymous functions || ((977b1a1b-2318-4bfb-b3b4-51bf0ac9614f))
				(#(identity %&) 1 "blarg" :yip) ;; => (1 "blarg" :yip)
			;; anonymous functions || ((deb49adf-3aaf-4f5e-ac88-7d8a88003f72)) 
				((fn [x] (+ 6 x)) 3) ;; => 9
				(#(+ 6 %) 3) ;; => 9
				(#(+ 6 %1) 3) ;; => 9
		higher-order-functions
			;; higher-order-functions || ((adda3cb1-de0f-49da-a8ce-d32dece25097)) 
				(defn h [fun] (fun 10))
				(h inc) ;; => 11
		closures
			returning functions || ((553f38b8-31bd-4fd8-94bb-39d66e6f6bae))
				(defn inc-maker [inc-by] #(+ % inc-by))
				(def inc3 (inc-maker 3))
				(inc3 7) ;; => 10
			;; closure  || ((98ee1e5c-05a3-4048-8ffe-43dadfd9db57)) 
				(defn closure [a] #(inc a))
				(def outer (closure 20))
				(outer) ;; => 21
		namespaces
			Namespaces || ((5d2d7258-af18-4a97-a1b1-35d2ded03f87)) 
				`in-ns`: create/switch namespace
					(in-ns 'myapp)
				You should `use` `clojure.core` namespace when you move to a new namespace.
					(clojure.core/use 'clojure.core)
				a symbol will resolve to in the current namespace:
					(resolve 'foo) ;; #'test01.core/foo
				Class names outside `java.lang` must be fully qualified:
					java.io.File/separator ;; "/"
					(import '(java.io InputStream File)) ;; java.io.File
				ns macro: (ns name & references)
					(ns examples.exploring
						(:require [clojure.string :as str])
						(:import (java.io File)))
			;; Namespaces || ((c4ff0c3b-a85c-4088-9006-953bfe881490)) 
				(in-ns 'user)
				(require 'clojure_by_example_kimh)
				(clojure_by_example_kimh/outer) ;; => 21
				(require '[clojure_by_example_kimh :as cbe])
				(cbe/outer) ;; => 21
			Namespace || ((e1e2bc94-e439-4818-a1a8-8347167f9486)) 
				opt01: use a function
					(ns my-namespace.core :require [clojure.java.io])
					(clojure.java.io/reader filename)
				opt02: use alias
					(ns my-namespace.core :require [clojure.java.io :as java-io])
					(java-io/reader filename)
				opt03: no qualifier
					(ns my-namespace.core :require [clojure.java.io :refer [reader]])
					(reader filename)
				opt04: multiple namespaces
					(ns duct-test.main
						(:require [clojure.java.io :as io]
							[com.stuartsierra.component :as component]
							[duct.middleware.errors :refer [wrap-hide-errors]]
						))
				extarnal libraries in project file:
					:dependencies [[org.clojure/clojure "1.7.0"]
						[org.clojure/clojurescript "1.7.122"]
						[com.stuartsierra/component "0.3.0"]
		control flow
			;; control flow || ((cfe118fa-2c8a-4481-b462-c715a443ce45)) 
				(if (< 3 5) "then" "else") ;; => "then"
				(if-let [a 1] a 0) ;; => 1
				(when true "10") ;; => "10"
				(let [n 2] (case n 1 "a" 2 "b" "other")) ;; => "b"
		let
			let || ((6e33b436-f94c-4a5c-8cf0-ff575ad0ea34))
				(let [[a & b] [1 2 3]] [a b]) ;; => [1 (2 3)]
		loop id=g11309
			loop || ((dd882295-6a5c-454a-ba01-3cb89cd2e7d5))
				(loop [i 0]
					(println (str i))
					(if (> i 1)
						(println "Goodbye!")
						(recur (inc i))))
				; => 0
				; => 1
				; => Goodbye!
		java calls
			invoking java code || ((2e7b9c18-7110-459c-84ea-004dea4ce826)) 
				| Instantiation   | new Widget("foo") | (Widget. "foo")  |
				| Instance method | rnd.nextInt()     | (.nextInt rnd)   |
				| Instance field  | object.field      | (.-field object) |
				| Static method   | Math.sqrt(25)     | (Math/sqrt 25)   |
				| Static field    | Math.PI           | Math/PI          |
			; java || ((fe99755d-5ac7-428c-a7e8-2a994c046486))
				(new java.util.Date) ;; => #inst "2020-06-15T14:27:36.415-00:00"
				(java.util.Date. "2016/2/19") ;; => #inst "2016-02-18T22:00:00.000-00:00"
				(let [d (java.util.Date.)] (str d)) ;; => "Mon Jun 15 17:27:43 EEST 2020"
				(Math/pow 2 3) ;; => 8.0
				(let [d (java.util.Date.)] (.toString d)) ;; => "Mon Jun 15 17:27:47 EEST 2020"
				(let [d (java.util.Date.)] (. d toString)) ;; => "Mon Jun 15 17:27:51 EEST 2020"
			dot dot syntax || ((65d65e67-c3be-4f33-8cca-d35cb6c5076b)) 
				(.. System (getProperties) (get "os.name"))
				;; expands to:
				(. (. System (getProperties)) (get "os.name"))
				(-> (System/getProperties) (.get "os.name"))
		recursions
			; recursion || ((2aac3d3e-de4c-4133-a143-4747a345c4e5))
			(defn length2 [result xs]
				(if (empty? xs)
					result
					(recur (+ 1 result) (rest xs))))
			(length2 0 [3 4]) ;; => 2
		loop
			; loop || ((5e95fd26-1c8d-4b92-9afe-186e1796ac58))
			(loop [i 0]
				(if (= i 3)
					(println "done!")
					(do
						(println i)
						(recur (inc i)))))
		macros macro2
			~/projects/study/clj/ex/study_clojure/ex06/src/macro.clj
				(macroexpand '(-> c (+ 3) (* 2)))
			; macros || ((00581b49-f912-4a76-8c04-5a6b701c6877))
			ex: unless
				(defmacro unless [cond then]
					(list
						'if
						(list 'not cond)
						then))
				(unless false 1) ;; => 1
			(macroexpand '(unless false 1)) ;; => (if (not false) 1)
		threading
			; threading macros || ((08d6bb4e-494e-4dbb-a092-b18047f19aff))
				(-> [] (conj 1) (conj 2)) ;; => [1 2]
				(->> [1 2] (map inc) (map #(* 2 %))) ;; => (4 6)
		delay
			; delay || ((853d8c4c-c267-401b-9225-e919b4a199ce))
			(def later (do [] (prn "Adding") (+ 1 2)))
			(def later (delay [] (prn "Adding") (+ 1 2)))
		atom
			; atom || ((71b98458-e1e3-4880-b50a-fc74d45b28b3))
			(def a (atom 1)) ;; => #'user/a
			(deref a) ;; => 1
			(reset! a 2) ;; => 2
			(swap! a #(inc %)) ;; => 3
			(defn multiple-by [an-atom n] (* an-atom n))
			(swap! a multiple-by 3) ;; => 9
		thread safety
			; thread safety || ((b2e2dcb4-ec83-4df3-b291-25902a7a9656))
		ref
			; ref || ((3f2bfd73-7021-4b6f-a8bf-d3e58a538ab9))
		transaction ref-set
			; transaction ref-set || ((d66c78c5-c268-4a19-9a4d-6c6f3c17dc3a))
		Weird Characters 
		  id:: 60209199-79a0-41e8-be9d-8b571db3f946
			rfr: Weird Characters || ((373ea7e0-e7c8-4d75-a1ec-c664e8d7b5b6))
			ref: ~/projects/study/clj/ex/study_clojure/ex06/src/weird_characters.clj
			# - Dispatch character
			#{ … } - Set
			#_ - Discard
			#"…" - Regular Expression
			#(…) - Anonymous function
			#' - Var quote
			## - Symbolic values
			#inst, #uuid, and #js etc. - tagged literals
			%, %n, %& - Anonymous function arguments
			@ - Deref
			^ (and #^) - Metadata
			' - Quote
			; - Comment
			: - Keyword
			:: - Auto-resolved keyword
			#: and #:: - Namespace Map Syntax
			/ - Namespace separator
			\ - Character literal
			$ - Inner class reference
			->, ->>, some->, cond->, as-> etc. - Threading macros
			` - Syntax quote
			~ - Unquote
			~@ - Unquote splicing
			<symbol># - Gensym
			#? - Reader conditional
			#?@ - Splicing Reader conditional
			*var-name* - "Earmuffs"
			>!!, <!!, >!, and <! - core.async channel macros
			<symbol>? - Predicate Suffix
			<symbol>! - Unsafe Operations
			_ - Unused argument
			, - Whitespace character
			#= Reader eval
			& rest parameters
	conventions
		side-effect functions
			side-effect funs return nil as result
	cli
		install
			brew install clojure
		run
			Writing a program || ((0b06510d-891d-42b2-b591-e4558f652c6f))
			clj -m hello ;; => Hello world, the time is 02:57 PM
		Your first project || ((2827cc78-5a42-4243-be75-2f5e826624c4)) 
			lein new app proj01
			cd proj01
			lein run
	articles
		Article: Functional-navigational programming in Clojure(Script) with Specter || ((236a959c-b534-4ecd-b94e-64af9d3d4ea4))
	repl
		start repl
			lein repl
			Interactive Development || ((0a7cc1d7-93da-4150-987e-5eccec3e3b7c)) 
				lein repl
				(-main) ;; Hello, World!
				(require 'proj01.core :reload)
				(-main) ;; Hello, World!2
		doc
			(doc map)
		repl || ((3b97a1e6-63eb-4196-bb92-38d74e78cc86))
		REPL || ((546b0f6f-4a3c-45cd-8ac1-d1ab43c4cabc)) 
		history
			(+ 3 4) ;; => 7
			(+ 10 *1) ;; => 17
			(+ 1 2) (+ 1 3) (str *1 *2) ;; => "11106"
		apropos: find functions
			(apropos "+") ;; => (clojure.core/+ clojure.core/+')
		dir: list functions in namespace
			(dir clojure.repl)
		print
			Printing || ((22c6df42-48be-4159-83a3-ce6b0d6aebfa)) 
			(println "What is this:" (+ 1 2))
			;; printing https://clojuredocs.org/clojure.core/pr id=g_11321 || ((cbe69a05-4d85-4b6b-a60e-1818b54f76ca)) 
				(pr ['a :b "\n" \space "c"]) ;; [a :b "\n" \space "c"]nil
				(print ['a :b "\n" \space "c"])
				;; [a :b
				;;  c]nil
		special variables
			Whats my environment || ((fb98313a-b053-48ad-83bd-3e1a9ccadc26)) 
			*clojure-version* ;; {:major 1, :minor 9, :incremental 0, :qualifier nil}
			*compile-path* ;; "/Users/mertnuhoglu/codes/clojure/clojure-through-code/target/classes"
			*ns* ;; #object[clojure.lang.Namespace 0x209a5cf "user"]
		special functions
			Special Variables || ((06ffbb99-f433-4887-8239-ab644bc96f42)) 
			(pst) ; print stack trace
			(load-file "file.clj")
			(find-doc "reduce")
			(source identity)
	tools
		ides
			doom
				Bir projeyi REPL ile incelemek || ((a129884a-1328-44fa-a33f-edaf1eaeae20)) 
			spacemacs
				spacemacs doom emacs refcard || ((0d7a91e7-c3dc-48e8-a646-12a8a78d113f))
					| SPC SPC   | list and search all commands | M-x                         |
					| SPC m     | cider menu                   | ,                           |
					| '         | start REPL                   | cider-jack-in               |
					| e c       | eval expression as comment   | cider-eval-defun-to-comment |
			cursive intellij
				Bir projeyi REPL ile incelemek  || ((ae0af00e-387c-4e04-b886-d214e2846f6c))
				intellij refcard || ((9249847c-a95b-4efb-9d36-b0e842608a04))
				": lazyvim compatible shortcuts  id=g14418 {{{  || ((f3f203f5-fb82-4053-a4ee-66b3d3a1dc8b)) 
					| ^^ repl | run repl           |
					| SPC sf  | eval sexp          |
					| !+ SPC  | quicklist: popups  |
					| +L C    | quicklist: clojure |
				Remote nREPL Connection id=g12889
				  id:: 7edaeeff-82b9-4e6a-b68f-3b01dfdf2c8c
					Edit Configurations > Clojure REPL Remote >
						.Connection Type = nREPL
						Use port from nREPL file > select Project
						Use standard port file
		repl
		json/edn/yaml: ~/projects/study/otl/json.otl
	webapps
		ref
			~/projects/study/clj/book_practicalli_clojure_webapps.md
				~/projects/study/clj/book_practicalli_clojure_webapps_logs.otl
	other
		(instance? java.util.Collection [1 2 3]) ;; true
		Characters: `\{letter} \space \n \r \t`
		(str 1 2 nil 3) ;; "123"
		(find-doc #"\?$") ; Find other predicate functions:
		`#_`: ignore line
			#_(println "hello")
	mine
		ex/study_clojure/ex06/src/ex_kimh.clj
	resources
		exercises katas id=g11414
		  id:: 6d9d8754-f901-4e19-add9-5342cb45fb94
			http://www.4clojure.com/
				terminal
					https://github.com/porkostomus/ctrain
				problems
					https://github.com/4clojure/4clojure/blob/develop/src/foreclojure/data_set.clj
						/Users/mertnuhoglu/codes/clojure/4clojure/src/foreclojure/data_set.clj
				answers
					https://gist.github.com/SegFaultAX/3607101
						/Users/mertnuhoglu/codes/clojure/gist/3607101/gistfile1.md
			http://clojurescriptkoans.com/
				problems
					https://github.com/lazerwalker/clojurescript-koans
					~/codes/clojure/clojurescript-koans
						~/codes/clojure/clojurescript-koans/README.md
				answers
					https://github.com/mikephys8/clojurescript-koans-solutions
					~/codes/clojure/clojurescript-koans-solutions
						~/codes/clojure/clojurescript-koans-solutions/README.md
			https://github.com/functional-koans/clojure-koans
				problems
					~/codes/clojure/clojure-koans/README.md
				answers
					https://github.com/mkaschenko/clojure-koans
						~/codes/clojure/clojure-koans-answers/README.md
			https://exercism.io/
				~/exercism/clojure/bank-account/test/bank_account_test.clj
			https://www.codewars.com/?language=clojure
			http://www.projecteuler.net/
			https://github.com/clojure-cookbook/clojure-cookbook
				~/codes/clojure/clojure-cookbook/README.md
			http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html
			https://github.com/gigasquid/wonderland-clojure-katas
			https://clojurecademy.com/
			https://clojuredocs.org/clojure.core/nth
				https://clojuredocs.org/quickref
				https://clojuredocs.org/core-library
			https://github.com/practicalli/clojure-through-code
				/Users/mertnuhoglu/codes/clojure/clojure-through-code
			http://kimh.github.io/clojure-by-example/#scope
				https://github.com/kimh/clojure-by-example
			https://github.com/nathanmarz/specter-clojure-west/blob/master/src/specter_demo/examples.clj
		other
			https://github.com/shaunlebron/ClojureScript-Syntax-in-15-minutes
			https://en.wikibooks.org/wiki/Clojure_Programming/By_Example
			https://github.com/mythz/clojure-linq-examples
			https://github.com/wtfleming/clojurescript-examples
			https://yogthos.net/ClojureDistilled.html
			https://github.com/life0fun/clojure-idiom
			http://kanaka.github.io/clojurescript/web/synonym.html
			https://clojurescript.org/about/differences
			https://en.wikibooks.org/wiki/Clojure_Programming/Examples/API_Examples
			https://github.com/bbatsov/clojure-style-guide
			https://clojure.org/about/functional_programming
	next
		examples_clojure.md
		reduce loop için daha sade örnekler
			loop || ((dd882295-6a5c-454a-ba01-3cb89cd2e7d5)) 
			reduce || ((72c307eb-5f30-47ae-a8a0-a1ddc0d34ccd))
flashcards id=g12065
  id:: 7260d2a9-c92f-4732-910f-f37e64bf2dbe
	~/projects/study/clj/book_essential_reference_borgatti.md
		Book: Essential Reference, Borgatti
		-X:project/new :name mertnuhoglu/conjure01
		-X:project/new :name <namespace>/<folder>
		-M:trace:inspect/reveal-nrepl
		rich comment
			(comment ... ,)
	~/projects/study/clj/ex/study_clojure/ex06/src/help_functions.clj
		(clojure.pprint/print-table [{:a 1 :b 2 :c 3}{:a 4 :b 5 :c 6}])
		(all-ns)
		(require '[clojure.repl])
		(ns-publics 'clojure.java.io)
		(clojure.repl/source map)
		(clojure.repl/doc map)
		(clojure.repl/find-doc "create-context")
		(clojure.repl/apropos "unmount-renderer")
		(clojure.repl/apropos "map")
		*ns*
	~/projects/study/clj/ex/study_clojure/ex06/src/require_functions.clj
		(use '[clojure.string :only (split)])
		(require '[clojure.tools.trace :refer [trace, dotrace]])
		(require '[clojure.repl])
		(require '[clojure.pprint :as pp])
	~/projects/study/clj/ex/study_clojure/ex06/src/debug_functions.clj
		(require 'hashp.core)
		(take 3 (repeat #p (+ 1 2)))
		cider debugging: ; put break point: `,db`
		cider debugger: locals:
		`#break`
	Function Definition
		(macroexpand  ; <1>
			'(defn hello [person]
				(str "hello " person)))
		Metadata Placement
			:doc :tag :pre :post
			(meta #'foo) ; <4>
			(defn ^:bench profile-me [ms]
			~/projects/csl-book-examples/Creatingandmanipulatingfunctions/Functiondefinition/defnanddefn-/6.clj
				(defn- tagged-by [tag nsname]
					(->> (ns-publics nsname)
						vals
						(filter #(get (meta %) tag))))
		Documenting
			(clojure.repl/doc hello)
		pre post conditions
			(defn save! [item]
				{:pre [(are [x] x                             ; <1>
					(map? item)                          ; <2>
					(integer? (:mult item))              ; <3>
					(#{:double :triple} (:width item)))] ; <4>
					:post [(clojure.test/is (= 10 (:id %)))]}    ; <5>
				(assoc item :id (* (:mult item) 2)))
		fn
			Reader macro for function literal: `#()`
			(fn <name>? arities)
			`name` is optional. Used for recursion.
			Multiple arities are used to make `fibo` tail-recursive.
			((fn fibo ; <1>
				([n] (fibo 1 0 n))
				([a b cnt]
					(if (zero? cnt)
						b
						(recur (+ a b) a (dec cnt)))))
				10)
		Fn and Destructuring
		fnil
			(update {:a 1 :b 2} :c (fnil inc 0)) ; <2>
			(defn say-hello [name] (str "Hello " name))
			(def say-hello-with-defaults (fnil say-hello "World"))
			(defn say-hello [first other] (str "Hello " first " and " other))
			(def say-hello-with-defaults (fnil say-hello "World" "People"))
		comp
			((comp inc +) 2 2) ; <1>
		complement
			({:a 1} :c)
			; nil
			((complement {:a 1}) :c)
			; true
			(filter (complement #{:a}) [:a :b])
		constantly
			((constantly 10) nil)
			; 10
inbox
	20210204
		debugging cursive: error:
			opt01: jdk1.8 tekrar yükleyip dene
		error: Could not locate clojure/tools/trace__init.class, clojure/tools/trace.clj or clojure/tools/trace.cljc on classpath.
			reproduce:
				cd ~/projects/csl-book-examples
				clojure -M:trace:inspect/reveal-nrepl
				nvim ~/projects/csl-book-examples/Creatingandmanipulatingfunctions/Higherorderfunctions/fnil/6.clj
				burada require çalışmıyor:
					(require '[clojure.tools.trace :refer [trace, dotrace]])
			fix:
				cd ~/projects/study/clj/ex/study_clojure/ex06
				clojure -M:trace:inspect/reveal-nrepl
				nvim ~/projects/study/clj/ex/study_clojure/ex06/src/debug_functions.clj
				bu sefer çalışıyor
			opt04: acaba ns bozuk olduğundan mı çalışmadı ilkinde?
		debug cider
			Showing Intermediary values - Enlighten mode <url:file:///~/projects/study/emacs/book_clojure_with_spacemacs_practicalli.md#r=g11847>
				| , T e | cider-enlighten-mode |
		zprint
			zprint -w file.edn
				pretty prints and writes edn/clj files
	test
		|| name |col|
		| hel | 10 |
	test2
		|no | line|
		| les | klkl|
	Pets
		+--------+-----+--------+----------------+
		| Name   | Age | Animal | Inside/Outside |
		+========+=====+========+================+
		| Kirby  | 9   | dog    | both           |
		+--------+-----+--------+----------------+
		| Hoover | 1   | dog    | both           |
		+--------+-----+--------+----------------+
		| Sophia | 9   | cat    | inside         |
		+--------+-----+--------+----------------+
	reference functions id=g12855
	  id:: 2c456cfe-33e4-452b-9c72-ba3bca96caf9
		standard
			map-indexed
			(map-indexed
				(fn [idx m]
					(assoc m :inv/sku (str "SKU-" idx))) ms)
			ffirst
			(mapv #(hash-map :ns/k %) xs)
			(for [color colors size sizes] ...)
			(for [color colors size sizes]
				{:inv/color color
				:inv/size size})
		datalog ref id=g12868
		  id:: c9e45717-2bda-4a89-b9b0-ec8e3d829ae0
			datomic api
				(require '[datomic.client.api :as d])
				d/client
				d/connect client {:db-name "movies"}
				d/transact conn {:tx-data movie-schema}
				d/db conn
				d/q query db
				d/transact conn {:tx-data [{:db/id .. :movie/genre "..."}]}
				d/history db
				{:tx-data [{:db/ident :red} {..}]}
			datomic schema
				{:db/ident ..
				:db/valueType ..
				:db/cardinality ..}
				:db/doc
				:db.type/string
				:db.type/long
				:db.cardinality/one
				:db.cardinality/many
				:db/unique
				:db/unique/identity
				:db/valueType
				:db.type/ref
				:db/id
				:db/id #db/id[:db.part/db]
			datalog query
				'[:find ... :where [e a v]]
				'[:find ?movie-title
					:where [_ :movie/title ?movie-title]]
				'[:find ...
					:where
					[e a v]
					[e a2 v2]]
				'[find ?title ?genre
					:where [?e .. ?title]
					[... ?genre]]
				{:order/items
				[{:item/id [:inv/sku "SKU-25"]
					:item/count 10}]}
				{:db/ident :item/id
				:db/valueType :db.type/ref}
				{:db/ident :inv/sku
				:db/unique :db.unique/identity}
				'[:find ?..
					:in $ ?inv
					:where [...] [...]]
				db [:inv/sku "SKU-25"]  ; lookup ref
				'[:find ?..
					:in $ % ?inv
					:where (ordered-together ...) [...]]
				db rules [:inv/sku "SKU-25"]  ; lookup ref
			datalog pull
				d/pull db ..
				[:inv/sku "SKU-42"]  ; lookup ref
				d/pull db [{:inv/color [:db/ident]}] [:inv/sku "SKU-42"]
				{:tx-data [nested-data]}
			datalog assert retract
				[:db/add [:inv/sku "..."] :inv/count 10]
				d/transact conn {:tx-data ...}
				[:db/retract [:inv-sku ".."] :inv/count 10]
			datomic history
				'[:find (max 3 ?tx)
					:where [?tx :db/txInstant]]
				d/as-of db txid
			datahike api
				(:require [datahike.api :as dh])
				{:store {:backend :file :path "..."}}
				dh/create-database cfg
				dh/connect cfg
				dh/transact conn [{:db/ident :name ...}]
				dh/transact conn [{:name "alice" ...}]
				dh/transact conn {:tx-data [{...}]}
				dh/q query @conn
				dh/q {:query '{...}
					:args [@conn]}
				dh/q query (dh/history @conn)
				dh/release conn
				dh/delete-database cfg
				dh/datoms @conn {:index :eavt}
				dh/entity @conn 4
				:friends (dh/entity @conn 4)
				:_friends (dh/entity @conn 4)
				dh/pull @conn [:db/id, :name, {:friends [:db/id :name]}] 4
				dh/schema @conn
		IO
			slurp "file/path"
			read-string (slurp ...)
		logging
			fipp var
		map
			keys m
			vals m
		type checks
			associative?
yayın - clj
	articles - cljs
		[ertugrulcetin/racing-game-cljs: A 3D racing game built with ClojureScript, React and ThreeJS](https://github.com/ertugrulcetin/racing-game-cljs)
		[borkdude/nbb: Ad-hoc CLJS scripting on Node.js.](https://github.com/borkdude/nbb)
		[Introducing shadow-cljs Inspect - Projects / shadow-cljs - ClojureVerse](https://clojureverse.org/t/introducing-shadow-cljs-inspect/5012)
		[CLJS: Hidden Google Closure Library gems - Questions & Help / General Questions - ClojureVerse](https://clojureverse.org/t/cljs-hidden-google-closure-library-gems/2321/3)
		[Apropos Clojure #10 - shadow-cljs - YouTube](https://www.youtube.com/watch?v=Ow4Qdw25CEA)
	articles - clj id=g13373
	  id:: 01eaf532-152c-4a9d-803c-3043b21ee781
		articles - datomic || ((a5ba3664-9936-4611-9567-2d142c70c85e)) 
			read || ((95e7fd42-19c9-44ee-ae6f-e70bef1bf794)) 
		read id=g13518
		  id:: e038ade8-c6c1-4eb8-8bb5-e1f7fe74bc47
			; Title: Clojure Power Tools Part 1 | Kari Marttila Blog || ((82083240-cbf1-4eaa-b042-b908c236bd37))
			Transparency through data by James Reeves  || ((a421ec34-2d23-4188-9624-6e5dd8331684))
			Article: Solving Problems the Clojure Way - Rafal Dittwald || ((3f026ca7-a8d9-465f-bb8e-abcb9ed27ea3))
			Article: The Datomic Information Model by Rich Hickey || ((a41dc9e5-479a-480d-a5e7-02d4d5e1f722)) 
			The Design of Datomic - Rich Hickey - YouTube || ((d339aade-d800-46cf-b652-6f79dc998773))
			Video: Day of Datomic Cloud - Day 4 || ((f8c75942-35e9-4d0b-b9cc-0f5757683c13)) 
			Lab: Accumulate, Read, Retract, History  || ((64d5fc36-8b5f-4a07-86a6-8a85a3d6676e)) 
			Lab: Accumulate, Read, Retract, History  || ((64d5fc36-8b5f-4a07-86a6-8a85a3d6676e)) 
			Lab: Accumulate, Read, Retract, History  || ((64d5fc36-8b5f-4a07-86a6-8a85a3d6676e)) 
			Lab: Assertion Tutorial || ((bd2404fa-801e-4e5f-b588-0bf3df066df7)) 
			(1137) Day of Datomic Cloud - Session 1 - YouTube || ((f2ec249e-ae48-46f7-a3d5-65193c2888f1)) 
			20221112
			Datomic Documentation || ((5d20e598-fc4d-4de3-b26f-92647dc819e1))
			20221109
			Reactive Datalog for Datomic - Nikolas Göbel - YouTube  || ((8273b1ae-362e-4e50-a2fe-964d6d014681))
			20221002
			Datascript and Datomic: Data Modeling for Heroes - Mark Bastian - YouTube || ((96d81571-64a4-4420-be93-d5f312d60f2a))
			Norbert Wojtowicz - Modeling your domain (Lambda Days 2016) - YouTube || ((6fc0de1c-0413-4807-ac5b-50d73849c9ce))
			kristianmandrup/datascript-tutorial: Datascript and Datomic tutorial book || ((15f7f4c9-0201-4ed2-a69b-abd82a59e9dc))
			Val on Programming: Datomic: Event Sourcing without the hassle || ((53bafcf9-bf70-43c7-8820-5ae0e8c93009))
			Val on Programming: So yeah, about Clojure's syntax... || ((56581eae-a03b-4ebc-9644-25e7235afc4c)) 
			Referentially transparent CRUD - Christian Johansen || ((40ca8c98-7901-4900-b1a3-3e719129c58c)) 
			Why is Clojure so stable? - Steve Labnik || ((c4b5b869-5d54-4d26-8cde-f1597e79f888)) 
		ndx - articles
			#book
			#rules
			#datomic
			#ui
			#data-analysis
			#project
			#intro
			#clj
			#tutorial
			#frp = reactive streaming = dataflow
			#example
			#data-structure
			#fulcro
			#serverless
		toread id=g13519
		  id:: e88d3350-f4c6-4abe-9631-e627207248c0
			[functional-koans/clojure-koans: A set of exercises for learning Clojure](https://github.com/functional-koans/clojure-koans)
			[Learning functional/Clojure programming - practical exercises? - Stack Overflow](https://stackoverflow.com/questions/2888041/learning-functional-clojure-programming-practical-exercises)
			[The Clojure Toolbox](https://www.clojure-toolbox.com/)
			[next-jdbc/friendly-sql-functions.md at develop · seancorfield/next-jdbc · GitHub](https://github.com/seancorfield/next-jdbc/blob/develop/doc/friendly-sql-functions.md)
			20221223
			[(572) Build and deploy a full stack Clojure and ClojureScript Web Application - YouTube](https://www.youtube.com/watch?v=j4vhDqXaWRM) #project
			[(572) How Clojure (and ClojureScript) REPL connections work - feat the creator of Calva! - YouTube](https://www.youtube.com/watch?v=islMjv55cN8) #tool
			[Learn Reduce, Group-by, and Juxt by creating a Look Up Map (Clojure Tutorial) - YouTube](https://www.youtube.com/watch?v=n0BTsKVs1Lw&t=335s) #library
			[(572) Clojure visual-tools meeting 16 - Calva Notebooks & Portal - YouTube](https://www.youtube.com/watch?v=5x6SQGGWap8&t=2903s) #tool #notebook
			[Macros](https://markm208.github.io/cljbook/chapter6/01/index.html) #language
			[mchampine/dscript: DataScript examples and practice](https://github.com/mchampine/dscript) #datomic #example
			20221220
			[Using Babashka to Get Electricity Prices | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2022/12/04/using-babashka-to-get-electricity-prices.html) #babashka
			20221204
			[Thinking with Portal (by Chris Badahdah) - YouTube](https://www.youtube.com/watch?v=Tj-iyDo3bq0&t=1255s) #tool #portal #priority1
			20221202
			[Highlights from the talk 'Exploring four hidden superpowers of Datomic'](https://engineering.telia.no/blog/talk-exploring-four-hidden-superpowers-of-datomic) #datomic
			20221123
			[Datomic - Return Maps](https://blog.datomic.com/2019/06/return-maps-for-datomic-cloud-clients.html) #datomic #example
			[(3) Clojure's Big Picture: EDN unifies database schema, MIME type, network prototol, and data structure : Clojure](https://www.reddit.com/r/Clojure/comments/7jjjnq/clojures_big_picture_edn_unifies_database_schema/) #clojure #discussion
			[Datomic/codeq: Creates Datomic dbs from git repos](https://github.com/Datomic/codeq) #datomic #project
			[Datomic - A Whirlwind Tour of Datomic Query](https://blog.datomic.com/2013/05/a-whirlwind-tour-of-datomic-query_16.html) #datomic #example
			[Cognician/datomic-doc: Manage :db/doc string values for any addressable entity in a Datomic database.](https://github.com/Cognician/datomic-doc) #datomic #tool
			[Commands and Aggregates in Datomic - blog.](https://blog.jayway.com/2013/08/20/commands-and-aggregates-in-datomic/) #datomic #example
			[Timeless Programming Tools](https://www.flyingmachinestudios.com/programming/timeless-tools/) #clojure
			[The Unofficial Guide to Rich Hickey's Brain](https://www.flyingmachinestudios.com/programming/the-unofficial-guide-to-rich-hickeys-brain/) #clojure
			[Datomic for Five Year Olds](https://www.flyingmachinestudios.com/programming/datomic-for-five-year-olds/) #datomic #article
			[Using Datomic in a simple use case](https://www.anthony-galea.com/blog/post/using-datomic-in-a-simple-use-case/) #datomic #project
			[mjul/docjure: Read and write Office documents from Clojure](https://github.com/mjul/docjure) #excel
			[Val on Programming: Using Datomic in your app: a practical guide](http://vvvvalvalval.github.io/posts/2016-07-24-datomic-web-app-a-practical-guide.html) #datomic #article
			[bmaddy/gadget: A version of inspect-tree that displays reverse references for Datomic entities](https://github.com/bmaddy/gadget) #datomic #tool
			[Building a Forum with Clojure, Datomic, Angular, and Ansible](https://www.flyingmachinestudios.com/programming/building-a-forum-with-clojure-datomic-angular/) #datomic #project
			[Architecting a Modern Financial Institution with Vitor Olivier, Thoughts on Immutability, CI/CD, FP](https://www.infoq.com/podcasts/Vitor-Olivier/) #datomic
			[thegeez/clj-wiki: A wiki made with Clojure, Yada and Datomic Client](https://github.com/thegeez/clj-wiki) #datomic #project
			[talk-transcripts/DatomicIonsInSevenMinutes.md at master · matthiasn/talk-transcripts · GitHub](https://github.com/matthiasn/talk-transcripts/blob/master/Halloway_Stuart/DatomicIonsInSevenMinutes.md) #datomic #tool
			[bellkev/dacom: A skeleton app built with Datomic, Compojure, and Om](https://github.com/bellkev/dacom) #datomic #project
			[Conversations With Datomic - Squid's Blog](http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/) #datomic #tutorial
			[(3) Anyone had to get data out of Datomic and into a relational SQL database for reporting? : Clojure](https://www.reddit.com/r/Clojure/comments/a1l7je/anyone_had_to_get_data_out_of_datomic_and_into_a/) #datomic
			[Datomic: The most innovative DB you've never heard of (August Lilleaas' blog)](https://augustl.com/blog/2016/datomic_the_most_innovative_db_youve_never_heard_of/) #datomic
			[ftravers/datomic-tutorial](https://github.com/ftravers/datomic-tutorial) #datomic #tutorial
			[Datomic queries against Clojure collections](https://gist.github.com/stuarthalloway/2645453) #datomic #example
			[Queries · Datomic/mbrainz-sample Wiki](https://github.com/Datomic/mbrainz-sample/wiki/Queries) #datomic #example
			[(3) Datomic and CAP theorem : Clojure](https://www.reddit.com/r/Clojure/comments/76yjau/datomic_and_cap_theorem/) #datomic #theory
			[(3) Reactive Datalog for Datomic : Clojure](https://www.reddit.com/r/Clojure/comments/b46vl1/reactive_datalog_for_datomic/) #datomic #frp
			[Building a CRUD app with Datomic Cloud Ions](https://jacobobryant.com/p/post-2019-ion/) #datomic #project
			[(3) Building a CRUD app with Datomic Cloud Ions : Clojure](https://www.reddit.com/r/Clojure/comments/bn5950/building_a_crud_app_with_datomic_cloud_ions/) #datomic #discussion
			[jacobobryant/flexbudget: FlexBudget, a flexible budgeting app](https://github.com/jacobobryant/flexbudget) #datomic #project
			[Provisdom/spectomic: Generate Datomic or Datascript schema from your Clojure(Script) specs](https://github.com/Provisdom/spectomic) #datomic #tool
			[DevOps: The magic of going back in time with Datomic (August Lilleaas' blog)](https://augustl.com/blog/2019/devops_going_back_in_time_with_datomic/) #datomic #example
			[aliaksandr-s/prototyping-with-clojure: A series of tutorials on creating a full-stack app with Clojure and Clojurescript](https://github.com/aliaksandr-s/prototyping-with-clojure) #datomic #project
			[(3) [blog post] Datomic for Cheapskates : Clojure](https://www.reddit.com/r/Clojure/comments/8duph9/blog_post_datomic_for_cheapskates/) #datomic #tool
			[(168) Datomic Ions Hello World in 25 minutes - YouTube](https://www.youtube.com/watch?v=qmadsAy2raI) #datomic #tool
			[(168) DataScript / Datahike Console Sneak Peak - YouTube](https://www.youtube.com/watch?v=RgF0hy6tEQs) #datomic #tool
			[500 Lines or Less | An Archaeology-Inspired Database](http://aosabook.org/en/500L/an-archaeology-inspired-database.html) #datomic
			[Schema Cartographer visualizes Datomic schema.](https://github.com/JarrodCTaylor/schema-cartographer) #datomic #tool
			[(3) Hacker News with Datomic, Lacinia, re-frame and GraphQL : Clojure](https://www.reddit.com/r/Clojure/comments/hfgyep/hacker_news_with_datomic_lacinia_reframe_and/) #datomic #project
			[(168) The Immutable Stack - Building Anki Clone using Clojure, Datomic and ClojureScript (Part 1) - YouTube](https://www.youtube.com/watch?v=QrSnTIHotZE) #datomic #project
			[2. Introduction · threatgrid/asami Wiki](https://github.com/threatgrid/asami/wiki/2.-Introduction) #datomic #graph-database
			[(3) datalog/datomic: is there a better way to write this :D : Clojure](https://www.reddit.com/r/Clojure/comments/qmgo23/datalogdatomic_is_there_a_better_way_to_write/) #datomic #example
			[(168) Datomic - a scalable, immutable database system by Marek Lipert - YouTube](https://www.youtube.com/watch?v=xGrCsIiiTUs) #datomic #tutorial
			[(3) Building Novus 01 - Basic Clojure + Integrant Server : Clojure](https://www.reddit.com/r/Clojure/comments/tehf2f/building_novus_01_basic_clojure_integrant_server/) #datomic #project
			[Datomic: a little snippet to analyze what attributes your transactions change most often - Where parallels cross](https://ag91.github.io/blog/2022/03/13/datomic-a-little-snippet-to-analyze-what-attributes-your-transactions-change-most-often/) #datomic #example
			20221118
			[vvvvalvalval/datalog-rules: Utilities for managing Datalog rulesets from Clojure](https://github.com/vvvvalvalval/datalog-rules)
			[cognitect-labs/onto](https://github.com/cognitect-labs/onto)
			[match-datascript-parser.clj](https://gist.github.com/dustingetz/3704ee0d3fe2f8df54c848cb1fe183c8)
			[dwhjames/datomic-q-explain: A query explainer for Datomic](https://github.com/dwhjames/datomic-q-explain) #datomic #tool
			[Alan Twitter'da: "my key learning is, to query maps with datalog, you view paths as relations! #clojure #datomic #datalog https://t.co/XEow5vDkF0" / Twitter](https://twitter.com/alandipert/status/682597011141558273)
			[Extending Datomic Pull Queries. This post details the custom solution… | by Spencer Apple | AdStage Engineering | Medium](https://medium.com/adstage-engineering/extending-datomic-pull-queries-12ff4f362856) #datomic #example
			[Using Datomic as a Graph Database | Hashrocket](https://hashrocket.com/blog/posts/using-datomic-as-a-graph-database) #datomic #example
			[clojure-cookbook/6-15_traversing-indices.asciidoc at master · clojure-cookbook/clojure-cookbook · GitHub](https://github.com/clojure-cookbook/clojure-cookbook/blob/master/06_databases/6-15_traversing-indices.asciidoc) #datomic #example
			[(148) A Quick Demo of Metabase+Datomic - YouTube](https://www.youtube.com/watch?v=6eLME2TZ7oU) #datomic #tool
			[bostonaholic/datomic-export: A Clojure library designed to export datomic data to flat files.](https://github.com/bostonaholic/datomic-export) #datomic #tool
			[(148) Datomic QBuilder Console Preview - YouTube](https://www.youtube.com/watch?v=1SSmsKTfFRk) #datomic #tool
			[Lambda Island](https://lambdaisland.com/episodes/datomic-quickstart-part-1) #datomic #tutorial
			[Mamun/clojure-web-app: Clojure web application using compojure, enlive, datomic, clojurescript](https://github.com/Mamun/clojure-web-app) #datomic #example
			20221116
			[mtnygard/datoms-say-what: Visualize the results of a Datomic transaction.](https://github.com/mtnygard/datoms-say-what) #datomic #tool
			[Datomic/ion-starter](https://github.com/Datomic/ion-starter) #datomic #example
			[stevebuik/clj-code-gen-hodur: Generates a simple datascript ORM from a Hodur schema. Used as a presentation at Clojure Sydney in May 2019](https://github.com/stevebuik/clj-code-gen-hodur) #datomic
			[dwhjames/datomic-linklist: A Datomic library of schema attributes and database functions to implement linked-list structures in Datomic.](https://github.com/dwhjames/datomic-linklist) #datomic
			20221114
			[briancabbott/programming-sandbox-clojure: Programming Playground for Clojure](https://github.com/briancabbott/programming-sandbox-clojure) #datomic #example
			[lambdaforge/vertailu: Datahike Datomic comparison](https://github.com/lambdaforge/vertailu) #datomic
			20221106
			[(905) Graphcom: composable incremental graph of computations (by Alberto Fernandez) - YouTube](https://www.youtube.com/watch?v=kE9eELYoKrI) #data-analysis/time-series
			[Wilfred/difftastic: a structural diff that understands syntax 🟥🟩](https://github.com/Wilfred/difftastic)
			[Writing Transducer Friendly Code | Abhinav Omprakash](https://www.abhinavomprakash.com/posts/writing-transducer-friendly-code/)
			[(896) London Clojurians Talk: A Tale of Lisp (by Renzo Borgatti) - YouTube](https://www.youtube.com/watch?v=m2mzyf2YS_8)
			[(896) Clojure visual-tools meeting 8: data cookbook, goldly studio, re-frame state management - YouTube](https://www.youtube.com/watch?v=oDiZxi5FRRc) #data-analysis
			[(896) FlowStorm Clojure debugger 2.2 new features - YouTube](https://www.youtube.com/watch?v=cnLwRzxrKDk)
				[jpmonettas/flow-storm-debugger: A debugger for Clojure and ClojureScript with some unique features.](https://github.com/jpmonettas/flow-storm-debugger/)
			[Welcome - Obsidian Wielder](https://wielder.victor.earth/Welcome)
			[athos/Postmortem: A tiny data-oriented debugging tool for Clojure(Script), powered by transducers](https://github.com/athos/Postmortem)
			[Principles of Data-Oriented Programming | Yehonathan Sharvit](https://blog.klipse.tech/dop/2022/06/22/principles-of-dop.html) #dop
			[Immutable Vars and Clojure - DEV Community 👩‍💻👨‍💻](https://dev.to/quoll/immutable-vars-and-clojure-3nh8) #clj
			[(896) The Secret Art of Storytelling in Programming by Yehonathan Sharvit - YouTube](https://www.youtube.com/watch?v=xbikBoA3Oik) #dop
			[(896) Rafal Dittwald, “Data Oriented Programming” - YouTube](https://www.youtube.com/watch?v=8Kc55qOgGps) #dop
			[(896) Conway's Game of Life in Clojure - TDD MOOC - YouTube](https://www.youtube.com/watch?v=xw-kmp14u0M) #example-app
			[Loopr: A Loop/Reduction Macro for Clojure](https://aphyr.com/posts/360-loopr-a-loop-reduction-macro-for-clojure)
			[pitch-io/uix: Idiomatic ClojureScript interface to modern React.js](https://github.com/pitch-io/uix) #ui
			[Blambda!](https://jmglov.net/blog/2022-07-03-blambda.html) #lambda
			[borkdude/quickblog: Light-weight static blog engine for Clojure and babashka](https://github.com/borkdude/quickblog)
			[JUXT Blog - AWS Lambda, now with first class parentheses](https://www.juxt.pro/blog/nbb-lambda)
			[Marko Kocic Blog - htmx in Clojure using kit framework](https://marko.euptera.com/posts/htmx-kit.html) #ui
			[lilactown/eql-cli: A CLI for executing EQL queries on EDN data](https://github.com/lilactown/eql-cli) #eql
			[prestancedesign/usermanager-reitit-example: A little demo web app in Clojure, using Integrant, Ring, Reitit, Selmer (and a database)](https://github.com/prestancedesign/usermanager-reitit-example) #example-app
			[lilactown/pyramid: A library for storing and querying graph data in Clojure](https://github.com/lilactown/pyramid) #datomic
			[Ideas for DataScript 2 # tonsky.me](https://tonsky.me/blog/datascript-2/) #datomic
			[ivarref/yoltq: An opinionated Datomic queue for building (more) reliable systems. Supports retries, backoff, ordering and more.](https://github.com/ivarref/yoltq) #datomic
			[borkdude/lein2deps: Lein to deps.edn converter](https://github.com/borkdude/lein2deps)
			[ivarref/double-trouble: Handle duplicate Datomic transactions with ease (on-prem).](https://github.com/ivarref/double-trouble) #datomic
			[babashka/cli: Turn Clojure functions into CLIs!](https://github.com/babashka/cli)
			20221025
			[Let over map merge: Software consulting made easy](https://humorless.github.io/posts-output/consulting-story)
			[Let over map merge: Behavioral Economics and Clojure](https://humorless.github.io/posts-output/economics)
			[Let over map merge: A Clojurian's idioms and patterns for ETL](https://humorless.github.io/posts-output/etl) #datomic
			[Let over map merge: Using Datomic in my app](https://humorless.github.io/posts-output/datomic) #datomic
			20221023
			[Clojure Datomic Exercise | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2020/11/14/clojure-datomic-exercise.html) #datomic
			[ftravers/datomic-tutorial](https://github.com/ftravers/datomic-tutorial) #datomic
			[(862) A Quick Demo of Metabase+Datomic - YouTube](https://www.youtube.com/watch?v=6eLME2TZ7oU) #datomic
			20221022
			[Datomic: Look at all the things I'm not doing! (August Lilleaas' blog)](https://augustl.com/blog/2018/datomic_look_at_all_the_things_i_am_not_doing/) #datomic
			[Datomic: Look at all the things I'm not doing! (Cont.) (August Lilleaas' blog)](https://augustl.com/blog/2018/datomic_look_at_all_the_things_i_am_not_doing_cont/) #datomic
			[Datomic: Querying for the history of an entity (v2) (August Lilleaas' blog)](https://augustl.com/blog/2019/datomic_querying_for_history_of_entity_v2/) #datomic
			[Datomic as a Protocol # tonsky.me](https://tonsky.me/blog/datomic-as-protocol/) #datomic
			[A Look at Conflict-Free Replicated Data Types (CRDT) | by Nezih Yigitbasi | Medium](https://medium.com/#istanbul_techie/a-look-at-conflict-free-replicated-data-types-crdt-221a5f629e7e) #frp
			[Diving into Conflict-Free Replicated Data Types (CRDTs) | Redis](https://redis.com/blog/diving-into-crdts/) #frp
			[How do CRDTs solve distributed data consistency challenges? | Ably Blog: Data in Motion](https://ably.com/blog/crdts-distributed-data-consistency-challenges) #frp
			[Entity event log in Datomic | jherrlin](https://jherrlin.github.io/posts/datomic-entity-event-log/) #datomic #tutorial #1
			[First Steps With Clojure](https://jacobobryant.com/p/post-2019-learn-clojure/) #ui #tutorial
			[FieryCod/holy-lambda: The extraordinary simple, performant, and extensible custom AWS Lambda runtime for Clojure.](https://github.com/FieryCod/holy-lambda) #serverless
				[Getting Started](https://fierycod.github.io/holy-lambda/#/getting-started)
			[martinklepsch/derivatives: 🌱 Your companion to create derived values from a single source (atom)](https://github.com/martinklepsch/derivatives) #frp
			[tonsky/rum: Simple, decomplected, isomorphic HTML UI library for Clojure and ClojureScript](https://github.com/tonsky/rum#cursors) #ui
			[The Rete Algorithm Explained!](https://www.sparklinglogic.com/rete-algorithm-demystified-part-2/) #rules
			[Findka architecture: Airtable and Fulcro](https://jacobobryant.com/p/blog-2020-01-13/) #ui #fulcro
				[Protocols, Not Platforms: A Technological Approach to Free Speech | Knight First Amendment Institute](https://knightcolumbia.org/content/protocols-not-platforms-a-technological-approach-to-free-speech)
				[arachne-framework/factui: Declarative UI State Management for React](https://github.com/arachne-framework/factui) #ui #rules #1
			20221004
			[The Solo Hacker's Guide To Clojure](https://jacobobryant.com/p/post-2020-guide-to-clojure/) #ui #clj #1 #example #project
			[jacobobryant/mystery-cows: A nontrivial example for ClojureScript + Firebase.](https://github.com/jacobobryant/mystery-cows) #ui #example
			[Introduction | Biff](https://biffweb.com/docs/get-started/intro/) #ui
			[maxweber/todomvc-db-view: An example app that demonstrates the db-view approach](https://github.com/maxweber/todomvc-db-view) #datomic #example
				[The blog of Max Weber: Introducing db-view - Part 1](https://maxweber.github.io/blog/2019-07-25-introducing-db-view-part-1)
			[datacrypt-project/hitchhiker-tree: Functional, persistent, off-heap, high performance data structure](https://github.com/datacrypt-project/hitchhiker-tree) #data-structure
				[(652) "Exotic Functional Data Structures: Hitchhiker Trees" by David Greenberg - YouTube](https://www.youtube.com/watch?v=jdn617M3-P4)
			[Building a CRUD app with Datomic Cloud Ions](https://jacobobryant.com/p/post-2019-ion/) #datomic #project
			[jacobobryant/flexbudget: FlexBudget, a flexible budgeting app](https://github.com/jacobobryant/flexbudget) #datomic #project
			[Data modeling in Datomic – Dev – RotaDEV.com](https://rotadev.com/data-modeling-in-datomic-dev/) #datomic
			[jacobobryant/clue](https://github.com/jacobobryant/clue) #datomic #project
			[(652) "Retaking Rules for Developers" by Ryan Brush - YouTube](https://www.youtube.com/watch?v=Z6oVuYmRgkk) #rules
			[Read Read-Eval-Print-λove | Leanpub](https://leanpub.com/readevalprintlove004/read) #book #clj #rules
			[Extending and Using… by Brian Marick](https://leanpub.com/specter)
			[Clojure Polymorphism by Paul Stadig [Leanpub PDF/iPad/Kindle]](https://leanpub.com/clojurepolymorphism) #clj
			[Incremental Datalog with Differential Dataflows](https://www.nikolasgoebel.com/2018/09/13/incremental-datalog.html) #datomic #frp 1
			[comnik/declarative-dataflow: A reactive query engine built on differential dataflow.](https://github.com/comnik/declarative-dataflow) #datomic #frp
			[(651) Timely dataflow in three easy steps! - YouTube](https://www.youtube.com/watch?v=yOnPmVf4YWo) #datomic #frp #f
				Frank Sherry. Basit giriş seviyesi anlatımı.
			[(651) CRDTs in Differential Dataflow - YouTube](https://www.youtube.com/watch?v=qH66sF3kM8E) #datomic #frp
				Frank Sherry, Differential Dataflow olayını keşfeden kişiymiş.
			20221003
			[The Web After Tomorrow # tonsky.me](https://tonsky.me/blog/the-web-after-tomorrow/)
			[A shallow dive into DataScript internals # tonsky.me](https://tonsky.me/blog/datascript-internals/) #datomic
			[datascript-playground/emojis.clj at master · markbastian/datascript-playground](https://github.com/markbastian/datascript-playground/blob/master/src/main/clj/datascript_playground/emojis.clj) #datomic #1 #example
				[markbastian/datascript-playground](https://github.com/markbastian/datascript-playground) #datomic
			20221002
			[eng-practices/20130926-data-representation.md at master · plumatic/eng-practices](https://github.com/plumatic/eng-practices/blob/master/clojure/20130926-data-representation.md)
			[eng-practices/20130927-ns-organization.md at master · plumatic/eng-practices](https://github.com/plumatic/eng-practices/blob/master/clojure/20130927-ns-organization.md)
			[(635) clojureD 2019: "3DF: Reactive Datalog for Datomic" by Nikolas Göbel - YouTube](https://www.youtube.com/watch?v=CuSyVILzGDQ) #datomic #frp
			[sixthnormal/pullql: A GraphQL-like query language for DataScript, optimized for execution across many entities at once.](https://github.com/sixthnormal/pullql) #datomic
			[TimelyDataflow/diagnostics: Diagnostic tools for timely dataflow computations](https://github.com/timelydataflow/diagnostics)
			[plumatic/plumbing: Prismatic's Clojure(Script) utility belt](https://github.com/plumatic/plumbing)
			[kristianmandrup/datascript-tutorial: Datascript and Datomic tutorial book](https://github.com/kristianmandrup/datascript-tutorial) #datomic #tutorial
			[joelparkerhenderson/architecture-decision-record: Architecture decision record (ADR) examples for software planning, IT leadership, and template documentation](https://github.com/joelparkerhenderson/architecture-decision-record)
			20221001
			[The Clojure Toolbox](https://www.clojure-toolbox.com/)
				liste: popüler clj kütüphaneleri
			[metasoarous/datview: Effortlessly compose data visualizations and controls for Datomic and DataScript data](https://github.com/metasoarous/datview) #datomic #ui #1
			[Clojure Design Patterns](http://mishadoff.com/blog/clojure-design-patterns/#episode-1-command) #clj
			[Mnemonics-based keymap for IntelliJ IDEA](http://mishadoff.com/blog/idea-for-clojure/) #clj
			[Evolville 0.0.2: Life and Death](http://mishadoff.com/blog/evolville-002/) #project
				örnek bir oyun projesi oldukça basit, simülasyon ve rich gui içeriyor
			[How Clojure works for you](https://blog.janetacarr.com/how-clojure-works-for-you/) #clj
				dilin inceliklerine dair güzel bilgiler
			[Write Clojure for other developers](https://blog.janetacarr.com/write-clojure-for-other-developers/) #clj
				iyi alışkanlıklar standartlar
			[Fix your Clojure code: Clojure comes with design patterns (Part 1)](https://blog.janetacarr.com/software-design-patterns-in-clojure/) #clj
				design patternlar zaten clojure dilinin içine gömülü
			[An Animated Introduction to Clojure](https://markm208.github.io/cljbook/) #intro #clj
				Giriş seviyesinde iyi bir etkileşimli anlatım. storyteller uygulaması üzerinden
			[Oz document](http://metasoarous.com/blog/how-i-fell-in-love-with-clojure)
				orjinal fikirler:
				Now we know that [the] killer app for FP is concurrency.
				The biggest challenge with concurrency and parallelism is state
			[mpdairy/posh: A luxuriously simple and powerful way to make front-ends with DataScript and Reagent in Clojure.](https://github.com/mpdairy/posh) #datomic #ui
				datascript ile ui durum bilgisini saklıyor
				render etme işlemleri ancak sorgu sonuçlarında değişim olunca gerçekleşiyor
			[metasoarous/datsys: (+ clj cljs datomic datascript re-frame-esque-frp)](https://github.com/metasoarous/datsys) #datomic #ui
				bu da Chris Small'un projesi
				datomic kullanarak frp yöntemiyle ui yönetiyor
			[Presenting semantic csv](http://metasoarous.com/blog/presenting-semantic-csv) #data-analysis
				tabular datayı işlemek için
			[The Computational Democracy Project](https://github.com/compdemocracy) #project
			[compdemocracy/polis: Open Source AI for large scale open ended feedback](https://github.com/compdemocracy/polis) #project
			[(635) re:Clojure 2021 workshop: Wrangling datasets with Tablecloth by Mey Beisaron - YouTube](https://www.youtube.com/watch?v=VD17eB6vVto) #data-analysis
			[(635) Production Rules on Databases - Paula Gearon - YouTube](https://www.youtube.com/watch?v=8rRzESy0X2k) #datomic #rules
				datalog ile kural motoru işletmek
			[(635) Datalog all the way down - Christopher Small - YouTube](https://www.youtube.com/watch?v=aI0zVzzoK_E&t=2115s) #datomic #rules #ui #1
				datalog ile ui tarafındaki eventleri yönetmek
			[oakes/Dynadoc: Dynamic documentation for Clojure(Script)](https://github.com/oakes/Dynadoc) #rules
				documentation website generator created with odoyle rules and rum
			[(634) O'Doyle Rules - a Clojure rules engine for the best of us - YouTube](https://www.youtube.com/watch?v=XONRaJJAhpA) #rules #1
			[(634) O'Doyle Rum - make Clojure web apps like it's 1979 - YouTube](https://www.youtube.com/watch?v=jI0WLfYIef8) #rules #1
			[CoNarrative/precept: A declarative programming framework](https://github.com/CoNarrative/precept) #rules #1
			[oakes/odoyle-rules: A rules engine for Clojure(Script)](https://github.com/oakes/odoyle-rules#your-first-rule) #rules
			[Clara Rules](http://www.clara-rules.org/) #rules
				rule engine
			[oakes/odoyle-rum](https://github.com/oakes/odoyle-rum) #rules
				kural motoru (rule engine) kullanarak ui etkileşimi tasarlamak
			20220927
			[vvvvalvalval/datascript-declarative-model-example](https://github.com/vvvvalvalval/datascript-declarative-model-example) #datomic
			[A Unified Specification](https://cjohansen.no/a-unified-specification/) #datomic
			[Building static sites in Clojure with Stasis](https://cjohansen.no/building-static-sites-in-clojure-with-stasis/)
			[Val on Programming: Application architecture with Datomic: branching reality](http://vvvvalvalval.github.io/posts/2016-01-03-architecture-datomic-branching-reality.html) #datomic
			[Val on Programming: A bottom-up approach to state in Reagent](http://vvvvalvalval.github.io/posts/2015-09-16-bottup-approach-to-reagent-state.html)
			[vvvvalvalval/datofu: there's a :db/fn for that](https://github.com/vvvvalvalval/datofu) #datomic
			[Biff - Web framework](https://biffweb.com/) #datomic #ui
			[(528) Effective Clojure - YouTube](https://www.youtube.com/watch?v=IZlt6hH8YiA)
			[(528) Building a Grammar for Statistical Graphics in Clojure - Kevin Lynagh - YouTube](https://www.youtube.com/watch?v=xyGggdg31mc)
			[(528) Complex Made Bearable - Lucas Cavalcanti - YouTube](https://www.youtube.com/watch?v=ct5aWqhHARs)
			[(528) Tables Considered Helpful - Daniel Gregoire - YouTube](https://www.youtube.com/watch?v=b5UK-VHbJlQ)
			[(528) From REST to CQRS with Clojure, Kafka, & Datomic - Bobby Calderwood - YouTube](https://www.youtube.com/watch?v=qDNPQo9UmJA&t=1050s)
			[(528) Yet & Datomic Immutable Facts Mutated Our Stack - Milton Reder - YouTube](https://www.youtube.com/watch?v=gcJmNYj4Mec&t=2018s)
			[(528) Solving Problems Declaratively - Mark Engelberg - YouTube](https://www.youtube.com/watch?v=TA9DBG8x-ys)
			[(528) Clojure on the cyberpunk frontier of democracy - Christopher Small - YouTube](https://www.youtube.com/watch?v=2tBVMAm0-00)
			[metasoarous/oz: Data visualizations in Clojure and ClojureScript using Vega and Vega-lite](https://github.com/metasoarous/oz)
			[plumatic/plumbing: Prismatic's Clojure(Script) utility belt](https://github.com/plumatic/plumbing)
			[(517) Paul deGrandis - Unlocking data-driven systems - YouTube](https://www.youtube.com/watch?v=BNkYYYyfF48)
				[ohpauleez/shoreleave: A smarter client-side for ClojureScript](https://github.com/ohpauleez/shoreleave)
				[ohpauleez/metamorphic: A complex event processing library for Clojure and ClojureScript.](https://github.com/ohpauleez/metamorphic)
				[ohpauleez/themis: A data structure processing library - validation, response or message generation, etc.; inspired by Metis.](https://github.com/ohpauleez/themis)
				[ohpauleez/logsel: CSS-like selectors for Clojure data structures](https://github.com/ohpauleez/logsel)
				[ohpauleez/conformity: A Clojure/Datomic library for idempotently transacting norms into your database – be they schema, data, or otherwise](https://github.com/ohpauleez/conformity)
			[markbastian/replion: A guide to REPL-driven Datomic development](https://github.com/markbastian/replion) #datomic
			[(518) Datascript and Datomic: Data Modeling for Heroes - Mark Bastian - YouTube](https://www.youtube.com/watch?v=tV4pHW_WOrY) #datomic
			[Clojure - Keyword argument functions now also accept maps](https://clojure.org/news/2021/03/18/apis-serving-people-and-programs)
			[(517) Unknown pearls from the Clojure standard library - Renzo Borgatti - YouTube](https://www.youtube.com/watch?v=QI9Fc5TT87A)
			[(517) It's Just Data - Bob Calco - YouTube](https://www.youtube.com/watch?v=wR2kYn-7ijQ)
			[markbastian/pirates: Clojure implementation of Cartagena.](https://github.com/markbastian/pirates) #example-project
			[markbastian/datascript-playground](https://github.com/markbastian/datascript-playground) #datomic
			[markbastian/partsbin](https://github.com/markbastian/partsbin)
			[markbastian/clojure-north-2020](https://github.com/markbastian/clojure-north-2020)
				[clojure-north-2020 -- Marginalia](https://markbastian.github.io/clojure-north-2020/docs/uberdoc.html) #datomic
			[markbastian/clj-cloud-playground: A project for understanding deployment of Clojure apps to the cloud.](https://github.com/markbastian/clj-cloud-playground)
			[markbastian/tetris: A simple Tetris-like game written in Clojure(Script)](https://github.com/markbastian/tetris) #project
			[markbastian/conspiracy](https://github.com/markbastian/conspiracy) #project
			[markbastian/7guis](https://github.com/markbastian/7guis) #project
			[markbastian/adventofcode](https://github.com/markbastian/adventofcode)
			[markbastian/clojure-exercises: A variety of Clojure puzzlers, problems, and solutions](https://github.com/markbastian/clojure-exercises) #exercise
			[markbastian/conj2019: Code and ideas for my Clojure/conj 2019 presentation](https://github.com/markbastian/conj2019)
			[markbastian/jackdaw: A Clojure library for the Apache Kafka distributed streaming platform.](https://github.com/markbastian/jackdaw)
			[markbastian/download-xlsx](https://github.com/markbastian/download-xlsx)
			[(518) The Dawn of Lisp, or How to Write Eval and Apply in Clojure - Ariel Ortiz - YouTube](https://www.youtube.com/watch?v=2wPS_6oSD6k)
			[Coding the τhosmos: Spec-Driven UI](https://code.thosmos.com/posts/2019-12-04-spec-driven-ui.html) #datomic
			[Coding the τhosmos: Realworld Clojure in a Vase on a Pedestal](https://code.thosmos.com/posts/2018-05-06-realworld-vase.html)
			[The blog of Max Weber: Introducing db-view - Part 1](https://maxweber.github.io/blog/2019-07-25-introducing-db-view-part-1) #example-app
			[souenzzo/eql-style-guide](https://github.com/souenzzo/eql-style-guide) #eql
			[souenzzo/atemoia: A simple full-stack clojure app](https://github.com/souenzzo/atemoia) #example-app
			[souenzzo/graph-demo: A simple demo using pathom, fulcro and crux](https://github.com/souenzzo/graph-demo) #example-app
			[souenzzo/eql-json](https://github.com/souenzzo/eql-json)
			[souenzzo/eql-datomic: ast->query and query->ast for datomic pull syntax](https://github.com/souenzzo/eql-datomic) #datomic
			[souenzzo/sciphi: When pathom is everywhere](https://github.com/souenzzo/sciphi)
			[Introducing RealWorld 🙌. 🏅 Exemplary fullstack blog apps… | by Eric Simons | Medium](https://medium.com/#ericsimons/introducing-realworld-6016654d36b5)
			[Pushing Database Changes to the Web with Datomic](https://fuqua.io/blog/2014/05/pushing-database-changes-to-the-web-with-datomic/) #datomic
			[Datomic for Five Year Olds](https://www.flyingmachinestudios.com/programming/datomic-for-five-year-olds/) #datomic
			[Building a Forum with Clojure, Datomic, Angular, and Ansible](https://www.flyingmachinestudios.com/programming/building-a-forum-with-clojure-datomic-angular/) #datomic
			[The Unofficial Guide to Rich Hickey's Brain](https://www.flyingmachinestudios.com/programming/the-unofficial-guide-to-rich-hickeys-brain/)
			[Frameworks and Why (Clojure) Programmers Need Them](https://www.flyingmachinestudios.com/programming/why-programmers-need-frameworks/)
			[Techniques for Efficiently Learning Programming Languages](https://www.flyingmachinestudios.com/programming/learn-programming-languages-efficiently/)
			[Fix your Clojure code: Clojure comes with design patterns (Part 1)](https://blog.janetacarr.com/software-design-patterns-in-clojure/)
			[How Clojure works for you](https://blog.janetacarr.com/how-clojure-works-for-you/)
			[wtf is Clojure inlining anyway](https://blog.janetacarr.com/clojure-inline-explained/)
			[Brave Clojure Jobs Blog -](https://jobs-blog.braveclojure.com/2022/03/24/long-term-clojure-benefits.html)
			[Coding the τhosmos: Spec-Driven DB](https://code.thosmos.com/posts/2020-01-04-spec-driven-db.html) #datomic
			[thosmos/mysql-to-datomic: A Clojure library/app designed to automatically transfer data from MySQL to Datomic.](https://github.com/thosmos/mysql-to-datomic) #datomic
			[thosmos/riverdb: A river science data management system in Clojure](https://github.com/thosmos/riverdb) #datomic #example-project
			[thosmos/domain-spec: A minimal abstraction for defining domain models and even domain model specs themselves - quite meta ...](https://github.com/thosmos/domain-spec)
			[Datomic as a Protocol # tonsky.me](https://tonsky.me/blog/datomic-as-protocol/) #datomic
			[(517) NoVALUG - Babashka and Clojure - YouTube](https://www.youtube.com/watch?v=ZvOs5Ele6VE)
			[(6) When is Datomic a good choice over other databases? - Quora](https://www.quora.com/When-is-Datomic-a-good-choice-over-other-databases)
			[souenzzo/eql-as: Aliases in EQL](https://github.com/souenzzo/eql-as) #eql
			[(503) Lucas Cavalcanti & Edward Wible - Exploring four hidden superpowers of Datomic - YouTube](https://www.youtube.com/watch?v=7lm3K8zVOdY&t=1715s)
			[(503) Declarative Domain Modeling for Datomic Ion/Cloud - Tiago Luchini - YouTube](https://www.youtube.com/watch?v=EDojA_fahvM&t=346s) #datomic
			[(503) Building a powerful Double Entry Accounting system - Lucas Cavalcanti - YouTube](https://www.youtube.com/watch?v=aw6y4r4NAlw&t=1217s) #datomic
			[(504) One Million Clicks per Minute with Kafka and Clojure - Devon Peticolas - YouTube](https://www.youtube.com/watch?v=VC_MTD68erY)
			[(504) Becoming Omniscient with Sayid - Bill Piel - YouTube](https://www.youtube.com/watch?v=ipDhvd1NsmE)
			[(504) All I needed for FP I learned in High School Algebra - Eric Normand - YouTube](https://www.youtube.com/watch?v=epT1xgxSpFU)
			[(503) Homoiconicity It Is What It Is - Stuart Sierra - YouTube](https://www.youtube.com/watch?v=o7zyGMcav3c)
			[Tetris Slides](http://shaunlebron.github.io/t3tr0s-slides/#1)
			[imalooney/t3tr0s: 30th anniversary tetris in ClojureScript](https://github.com/imalooney/t3tr0s) #project
			[(503) Tool Assisted spec Development - - YouTube](https://www.youtube.com/watch?v=kcZVkvO1Dpo)
			[(501) Functional Game Engine Design for the Web - Alex Kehayias - YouTube](https://www.youtube.com/watch?v=TW1ie0pIO_E)
			[(488) Understanding Core Clojure Functions Jonathan Graham - YouTube](https://www.youtube.com/watch?v=csH4ZEtq2Tg)
			[(488) Writing the same function in JS and Clojure (using reducers and maps) - YouTube](https://www.youtube.com/watch?v=BQtEdJ-hV_A)
			[(488) Macros vs Monads Chris Houser and Jonathan Claggett - YouTube](https://www.youtube.com/watch?v=QIUFbnQAEWo)
			[(488) Macros Why, When, and How Gary Fredericks - YouTube](https://www.youtube.com/watch?v=BV9OHj8esVk)
			[(488) Macros vs Monads Chris Houser and Jonathan Claggett - YouTube](https://www.youtube.com/watch?v=QIUFbnQAEWo)
			[(488) Monads Made Easy Jim Duey - YouTube](https://www.youtube.com/watch?v=BHVu8VQJN7E)
			[(488) Chris Houser / Jonathan Claggett - Illuminated Macros - YouTube](https://www.youtube.com/watch?v=o75g9ZRoLaw)
			[(488) The Taming of the Deftype Baishampayan Ghose - YouTube](https://www.youtube.com/watch?v=iBUthApQQw4)
			[(488) Clojure Simple by Design (with PPT) - Stuart Halloway - YouTube](https://www.youtube.com/watch?v=u4OsmT-Ugpk)
			[(489) Rewrite EDN while preserving comments and formatting - YouTube](https://www.youtube.com/watch?v=bPoe2N7J5yg)
			[justone/bb-present: Presentation about Babashka](https://github.com/justone/bb-present)
			[(489) Clojure Syntax - The odd bits - YouTube](https://www.youtube.com/watch?v=7Ts9ny2JP4k&t=454s)
			[(489) Find var usages in Clojure project using babashka and clj-kondo - YouTube](https://www.youtube.com/watch?v=TvBmtGS0KJE)
			[Babashka pods: why, how to use and what's going on in the background? Example: go-sqlite3 - YouTube](https://www.youtube.com/watch?v=Q3EFNRwxLLo&t=23s)
			[(489) Clojurists Together 2020-Q4: new features and thank you! - YouTube](https://www.youtube.com/watch?v=P09GZVqiDdM)
			[(488) clojure-lsp: my new drug (1 week experience report) - YouTube](https://www.youtube.com/watch?v=WMnVv63ezFQ)
			[(488) Clojure The Art of Abstraction - Alex Miller - YouTube](https://www.youtube.com/watch?v=bZ23d9DkKek)
			[(488) Teach Your Eye to Eat Clojure Mario Aquino - YouTube](https://www.youtube.com/watch?v=l8QLQs7byQs)
			[(476) Getting Started with Clojure Aliases - YouTube](https://www.youtube.com/watch?v=JnOpcrkK9qo)
			[(476) Get Started with CLJS + Figwheel-Main - YouTube](https://www.youtube.com/watch?v=7b5114xE_GA)
			[(476) Salza Liquid Text Editor Demo - YouTube](https://www.youtube.com/watch?v=B3pYpnYlXgU)
			[(476) Daniel Solano Gomez - How Clojure Works: Understanding the Clojure Runtime - YouTube](https://www.youtube.com/watch?v=8NUI07y1SlQ)
			[(476) 2. Clojure CLI/deps.edn - YouTube](https://www.youtube.com/watch?v=CWjUccpFvrg)
			[(462) Parens of the Dead - Episode 1: Lying in the Ground - YouTube](https://www.youtube.com/watch?v=aWJPlRVZX90)
				[Parens of the Dead](https://www.parens-of-the-dead.com/e1.html)
			[The Onyx Platform](http://www.onyxplatform.org/)
			[(462) Onyx: Distributed Computing for Clojure - Michael Drogalis - YouTube](https://www.youtube.com/watch?v=YlfA8hFs2HY)
			[Val on Programming: Datomic: Event Sourcing without the hassle](http://vvvvalvalval.github.io/posts/2018-11-12-datomic-event-sourcing-without-the-hassle.html) #datomic
			[Val on Programming: DataScript as a Lingua Franca for domain modeling](http://vvvvalvalval.github.io/posts/2018-07-23-datascript-as-a-lingua-franca-for-domain-modeling.html) #datomic
			[shaunlebron/ClojureScript-Syntax-in-15-minutes: cljs syntax is simple](https://github.com/shaunlebron/ClojureScript-Syntax-in-15-minutes)
			[venantius/pyro: Light up your Clojure stacktraces](https://github.com/venantius/pyro)
			[Clojure to die for](https://cjohansen.no/clojure-to-die-for/)
			[Building static sites in Clojure with Stasis](https://cjohansen.no/building-static-sites-in-clojure-with-stasis/)
			[seancorfield/next-jdbc: A modern low-level Clojure wrapper for JDBC-based access to databases.](https://github.com/seancorfield/next-jdbc)
			[(454) 1. Atom, Chlorine, and Cognitect's REBL - YouTube](https://www.youtube.com/watch?v=ZhzMoEz4j1k&t=1s)
			[Welcome Clojure 10 | Yehonathan Sharvit](https://blog.klipse.tech/clojure/2018/12/18/welcome-clojure-10.html)
			[Smart Maps | Pathom 3](https://pathom3.wsscode.com/docs/smart-maps/)
			tick examples: Countdown Timers id=g13211
			  id:: b9eda644-8150-476d-80ef-7037cab8686e
				rfr:
					[Countdown Timers](https://juxt.github.io/tick/#_countdown_timers)
			tick - date time library id=g13208
			  id:: 472009da-1607-490b-8d77-c71944b26b24
				rfr:
					[tick](https://juxt.github.io/tick/)
					sandbox_mert$clj-tick > 20220815-tick
					; datetime.clj || ((0cac4a32-dcd1-44b8-8e53-6f1ca28d8bcc))
				function list - tick id=g13214
				  id:: dbf8e373-0456-4878-8af0-973760660a02
					kw
						:tick/beginning
						:tick/end
						:during
						:finishes
						:meets
						:met-by
						:overlapped-by
						:overlaps
						:preceded-by
						:precedes
						:starts
					type
						date
						inst
						instant
					constant
						t.i/am
						t.i/pm
						t/now
						t/noon
						t/today
						t/tomorrow
						t/yesterday
						t/midnight
					interval
						t.i/bounds
						t.i/new-interval
						t/beginning
						t/end
						t/between
						t/duration
						t/new-duration
						t/new-period
					set ops
						t.i/relation
						t.i/difference
						t.i/union
						t.i/intersection
						t.i/intersects?
					arithmetics
						t/+
						t/-
						t/<
						t/<<
						t/<=
						t/>
						t/>>
						t/ago
						t/inc
						t/dec
						t/max
						t/offset-by
						t.i/divide
						t.i/divide-by
						t.i/extend
					add attribute
						t/at
						t/in
						t/on
					clock
						t/atom
						t/clock
					date-time
						t/date
						t/date-of-month
						t/date-time
						t/day
						t/day-of-month
						t/day-of-week
						t/hour
						t/epoch
						t/inst
						t/instant
						t/millisecond
						t/minute
						t/new-date
						t/new-time
						t/new-year-month
						t/month
						t/second
						t/min
						t/time
						t/year
						t/year-month
						t/offset-date-time
						t/zoned-date-time
					get
						t/seconds
						t/days
						t/hours
						t/micros
						t/microsecond
						t/millis
						t/minutes
						t/months
						t/years
						t/zone
						t/zone-offset
					other
						t.i/concur
						t.i/concurrencies
						t.i/conj
						t.i/group-by
						t.i/normalize
						t/coincident?
						t/fields
						t/hence
						t/int
						t/long
						t/midnight?
						t/range
						t/reset!
						t/reset-vals!
						t/truncate
						t/unit-map
						t/units
						t/with
						tick.alpha.interval
						tick.core
			Should I use java.util.Date or switch to java.time.LocalDate - Stack Overflow id=g13206
			  id:: 32e62fe3-c922-4444-8391-14eea544720a
				rfr: [Should I use java.util.Date or switch to java.time.LocalDate - Stack Overflow](https://stackoverflow.com/questions/28730136/should-i-use-java-util-date-or-switch-to-java-time-localdate)
			java - What's the difference between Instant and LocalDateTime? - Stack Overflow id=g13205
			  id:: 622252c3-276c-462f-9fe0-0b492c2fd82a
				rfr: 	[java - What's the difference between Instant and LocalDateTime? - Stack Overflow](https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime)
			Cross Platform DateTime Awesomeness - Henry Widd - YouTube id=g13203
			  id:: 15ff0f27-9569-4e19-b777-3a6d86b7909b
				rfr: [Cross Platform DateTime Awesomeness - Henry Widd - YouTube](https://www.youtube.com/watch?v=UFuL-ZDoB2U)
				class model
					[<<platform>>;Date|#inst "2018-12-11T07:52:19.627-01:00"]
					[Instant|"2018-12-11T07:52:19.627Z"]
					[Date]<->[Instant]
					[ZonedDateTime|"2018-12-11T07:52:19.627+01:00(Europe/London)"]
					[ZoneId|"Europe/London"]
					[LocalDateTime|"2018-12-11T07:52:19.627"]
					[LocalDate|"2018-12-11"]
					[Instant]-Zone>[ZonedDateTime]
					[ZonedDateTime]->[ZoneId]
					[ZonedDateTime]->[LocalDateTime]
					[LocalDateTime]->[LocalDate]
					[LocalDateTime]->[LocalTime]
			ClojureScript Koans id=g13161
			  id:: bf8a1769-6b56-4234-b815-4a11aed25fd5
			  id:: fa161480-6306-4f11-9a5c-bbd9f233c8d0
				rfr:
					[ClojureScript Koans](http://clojurescriptkoans.com/#equality/5)
						/Users/mertnuhoglu/projects/study/clj/ex/study_clojure/ex06/src/clojurekoans.clj
					[functional-koans/clojure-koans](https://github.com/functional-koans/clojure-koans)
						/Users/mertnuhoglu/codes/clj/content/clojure-koans
			Rich Hickey articles || ((f09c4aaf-d7c4-4c7f-a7bd-1af0e481ca45)) 
			articles - datomic || ((b3dcd67d-47dc-4ee7-8989-cfc743066272)) 
			[replikativ / datahike-invoice](https://gitlab.com/replikativ/datahike-invoice) 
			[learn-clojure/resources](https://roamresearch.com/#/app/Zsolt-Blog/page/AC6_8FVVo) 
			[Rich Hickey on Datomic Ions, September 12, 2018 - YouTube](https://www.youtube.com/watch?v=thpzXjmYyGk) 
			[clojure-emacs/clj-refactor.el: A CIDER extension that provides powerful commands for refactoring Clojure code.](https://github.com/clojure-emacs/clj-refactor.el) 
				[clojure-vim/clj-refactor.nvim: A neovim clojure refactoring plugin](https://github.com/clojure-vim/clj-refactor.nvim)
			[babashka 0.3.1 new features: bb.edn + invoke any function from cmd line - YouTube](https://www.youtube.com/watch?v=_zr1dicJs-E)
				[Babashka tasks (by Michiel Borkent) - YouTube](https://www.youtube.com/watch?v=u5ECoR7KT1Y)
			debug clj:
				[AppsFlyer/mate-clj: Clojure library for debugging core functions](https://github.com/AppsFlyer/mate-clj)
				[Unleash the Power of the REPL - Dana Borinski - YouTube](https://www.youtube.com/watch?v=oLvwbDUXGsc)
			[First 6 years of a life of Clojure project – Jarppe Länsiö - YouTube](https://www.youtube.com/watch?v=WtdegIqQbrg&t=1209s)
			[clojureD 2021: "A Trick of the Tool" by Alex Miller - YouTube](https://www.youtube.com/watch?v=BTAx-gFz6Ks)
			[Clojure Workflow Reloaded](https://www.cognitect.com/blog/2013/06/04/clojure-workflow-reloaded)
			[greglook/puget: Canonical Colorizing Clojure Printer](https://github.com/greglook/puget)
			[Building a RESTful Web API in Clojure - a new approach - Malcolm Sparks - YouTube](https://www.youtube.com/watch?v=JWa4NhjWNHQ)
			[clojureD 2020: "Writing maintainable Clojure" by Erik Assum - YouTube](https://www.youtube.com/watch?v=Tq7r97G4b7Y&t=1492s)
			vim-iced clojure eklentisi
				[vim-iced](https://liquidz.github.io/vim-iced/#installation)
				nxt
					[liquidz/vim-iced: Clojure Interactive Development Environment for Vim8/Neovim](https://github.com/liquidz/vim-iced)
					debugger
					browsing tapped values in threading macros
			[FXL - composable data-oriented spreadsheet library for Clojure - Anthony Khong - Scicloj Meeting 20 - YouTube](https://www.youtube.com/watch?v=d6qOzPQ9NUk)
			daveray/clawk: Like Awk, but Clojure. 
			Reduce, Group-by, and Juxt by creating a Look Up Map (Clojure Tutorial) - YouTube 
			[Wordle clone in ClojureScript - YouTube](https://www.youtube.com/watch?v=QEEPXuR5wLk)
			[Use Clojure to build an API - YouTube](https://www.youtube.com/watch?v=e7BTRR0VBsQ)
			[Coast on Clojure](https://coast.swlkr.com/)
			[Create a password manager with Clojure using Babashka, sqlite, honeysql and stash - YouTube](https://www.youtube.com/watch?v=jm0RXmyjRJ8) 
			[clojureD 2021: "Your own fast, native Clojure scripting CLI with GraalVM and SCI" by Michiel Borkent - YouTube](https://www.youtube.com/watch?v=L2LAaQBVvxM)
			[inclojure-org/clojure-by-example: An introduction to Clojure, for programmers who are new to Clojure.](https://github.com/inclojure-org/clojure-by-example)
			[PEZ/rich4clojure: Practice Clojure using Interactive Programming in your editor](https://github.com/PEZ/rich4clojure)
	örnek uygulamalar - clj id=g13031
	  id:: 4b52e911-22ee-43fe-bc86-4c824940247c
		articles - datomic || ((b3dcd67d-47dc-4ee7-8989-cfc743066272)) 
		[Create a form using ClojureScript and Re-Frame - YouTube](https://www.youtube.com/watch?v=46Rs6_2pw_Y) 
		[Clojure inline tests: example-driven, executable documentation, powered by metadata - YouTube](https://www.youtube.com/watch?v=orFYFwiG1dM)
		[Re-usable GUI Components with Re-frame and Atomic Design - Mark Nutter - YouTube](https://www.youtube.com/watch?v=JCY_cHzklRs)
	libraries - clj
		[quoll/asami: A flexible graph store, written in Clojure](https://github.com/quoll/asami) 
		[daveray/clawk: Like Awk, but Clojure.](https://github.com/daveray/clawk) 
	Rich Hickey articles id=g13039
	  id:: f09c4aaf-d7c4-4c7f-a7bd-1af0e481ca45
		Rich Hickey on Datomic Ions, September 12, 2018 - YouTube 
	articles - datomic id=g13040
	  id:: b3dcd67d-47dc-4ee7-8989-cfc743066272
		read
			Datascript and Datomic: Data Modeling for Heroes - Mark Bastian - YouTube || ((96d81571-64a4-4420-be93-d5f312d60f2a))
			[I love Datomic, think it can be revolutionary and use it in my side projects. I ... | Hacker News](https://news.ycombinator.com/item?
			20221102
		toread
			[Functional effect and streaming systems in Clojure - Léo Noel - reClojure 2021 - YouTube](https://www.youtube.com/watch?v=tV-DoiGdUIo) #datomic #hyperfiddle
			[Max Datom - Interactive Datomic Tutorial](https://max-datom.com/) #datomic
			[threatgrid/asami: A graph store for Clojure and ClojureScript](https://github.com/threatgrid/asami) #datomic
			[Datalog all the way down - Christopher Small - YouTube](https://www.youtube.com/watch?v=aI0zVzzoK_E) #datomic
			[DOMAIN MODELING WITH DATALOG by Norbert Wojtowicz - YouTube](https://www.youtube.com/watch?v=oo-7mN9WXTw) #datomic #datomic
				[Datalog: Data All Truth · Append Log · Obtain Graph - Speaker Deck](https://speakerdeck.com/pithyless/datalog-data-all-truth-append-log-obtain-graph) #datomic
				[Norbert Wojtowicz - Modeling your domain (Lambda Days 2016) - YouTube](https://www.youtube.com/watch?v=UrGJHfB21Ok) #datomic
					ref #datomic
						articles - datomic || ((a5ba3664-9936-4611-9567-2d142c70c85e)) 
				[Learn Datalog Today!](http://www.learndatalogtoday.org/) #datomic
				[Datalog Links and Notes](https://gist.github.com/pithyless/e00362aa6061bfb4e4749079a33be073) #datomic
			[Datomic/mbrainz-sample: Example queries and rules for working with the Datomic mbrainz example database](https://github.com/Datomic/mbrainz-sample) #datomic
			[XTDB](https://xtdb.com/) #datomic
			[Examples | Datomic](https://docs.datomic.com/on-prem/examples.html) #datomic
			[Datomic/simulant](https://github.com/Datomic/simulant) #datomic
			[Datomic/day-of-datomic: Sample Code for Day of Datomic presentation](https://github.com/Datomic/day-of-datomic) #datomic
			[Day of Datomic Cloud - Session 1 - YouTube](https://www.youtube.com/watch?v=yWdfhQ4_Yfw&list=PLjyLzdfdsKwqF9I1XSX_Y4TXAo8pYXbOv) #datomic
			[Day of Datomic Part 1 on Vimeo](https://vimeo.com/208676137) #datomic
			[clojureD 2020: "Fun with JSON" by Malcolm Sparks - YouTube](https://www.youtube.com/watch?v=gMYQ1vDy7d0) #datomic
			[dustingetz (u/dustingetz) - Reddit](https://www.reddit.com/user/dustingetz/) #datomic
			[Spice up your life with eql - Norbert Wojtowicz - wroc_love.rb 2019 - YouTube](https://www.youtube.com/watch?v=UvJEBMOtayk&t=2281s) #datomic #eql
			[Functional effect and streaming systems in Clojure - Léo Noel - reClojure 2021 - YouTube](https://www.youtube.com/watch?v=tV-DoiGdUIo) #datomic #frp
				[leonoel/missionary: An asynchronous programming toolkit for clojure and clojurescript](https://github.com/leonoel/missionary) #datomic #frp
			["Immutable Relational Data" by Richard Feldman - YouTube](https://www.youtube.com/watch?v=28OdemxhfbU)
			[Declarative Domain Modeling for Datomic Ion/Cloud - Tiago Luchini - YouTube](https://www.youtube.com/watch?v=EDojA_fahvM) #datomic
			[Lucas Cavalcanti & Edward Wible - Exploring four hidden superpowers of Datomic - YouTube](https://www.youtube.com/watch?v=7lm3K8zVOdY) #datomic
			[Datahike - ((de)composing persistent datalog for everybody) - YouTube](https://www.youtube.com/watch?v=j_fAJ5wRyes) #datomic
			[Clojure & Datalog is Lisp & Prolog | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2022/01/13/datalog-exercises.html) #datomic #tutorial
			[markbastian/datascript-playground](https://github.com/markbastian/datascript-playground/tree/master/src/main/clj/datascript_playground) #datomic #examples
			[homebaseio/datalog-console: Administration UI for Datascript, Datahike, and other Datalog databases](https://github.com/homebaseio/datalog-console) #datomic
				[homebaseio/homebase-react: The React state management library for write-heavy applications](https://github.com/homebaseio/homebase-react) #datomic
			[Learn Datalog Today Chapters 1-4 (Clojure Livecoding Stream) - YouTube](https://www.youtube.com/watch?v=8bc4mBRmmbg) #datomic
			[Datomic Pull | Datomic](https://docs.datomic.com/on-prem/query/pull.html) #datomic
			[Entity Specs — io.replikativ/datahike 0.4.1491](https://cljdoc.org/d/io.replikativ/datahike/0.4.1491/doc/entity-specs) #datomic
			[Pull-API Namespace — io.replikativ/datahike 0.4.1491](https://cljdoc.org/d/io.replikativ/datahike/0.4.1491/doc/pull-api-namespace-) #datomic
			[Datomic Queries and Rules | Datomic](https://docs.datomic.com/on-prem/query/query.html) #datomic
			[clojureD 2021: "Firetomic: Replacing Datomic with Datahike and Firebase" by Alexander Oloo - YouTube](https://www.youtube.com/watch?v=n0Nb1fY56hU) #datomic
			örnek problem çözelim || ((e9cb049a-459d-43ec-a29d-7429854de562))
			[replikativ / datahike-invoice · GitLab](https://gitlab.com/replikativ/datahike-invoice) #datomic #examples
			[Intro into using Crux Db with Clojure - YouTube](https://www.youtube.com/watch?v=_L50rsoDBxQ) #datomic
			[datahike/cli.md at 336-native-image-cli · replikativ/datahike](https://github.com/replikativ/datahike/blob/336-native-image-cli/doc/cli.md) #datomic #cli
			[Turning the database inside-out with Apache Samza — Martin Kleppmann’s blog](https://martin.kleppmann.com/2015/03/04/turning-the-database-inside-out.html) #database
			[Data structures as queries: Expressing CRDTs using Datalog - Speaker Deck](https://speakerdeck.com/ept/data-structures-as-queries-expressing-crdts-using-datalog?slide=19) #datomic #frp
			[CRDTs: The Hard Parts - YouTube](https://www.youtube.com/watch?v=x7drE24geUw) #datomic #frp
			[CRDTs for Non Academics - YouTube](https://www.youtube.com/watch?v=vBU70EjwGfw) #datomic #frp
			[Clojure in the Database · subhash/clj-stack Wiki](https://github.com/subhash/clj-stack/wiki/Clojure-in-the-Database) 
			[Datomic MusicBrainz Sample Database – Nextjournal](https://nextjournal.com/kommen/datomic) 
			[Clojure Datomic Exercise | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2020/11/14/clojure-datomic-exercise.html) 
			[1: Getting Started with Crux – A Tale of Time and Space – Nextjournal](https://nextjournal.com/crux-tutorial/start) #datomic #examples
			[A Bitemporal tale – History. Of histories. – Nextjournal](https://nextjournal.com/crux/a-bitemporal-tale) #datomic #examples
			[Conditional Queries in Datomic](https://grishaev.me/en/datomic-query/) #datomic #examples
			[Clojure Power Tools Part 1 | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2020/10/26/clojure-power-tools-part-1.html)
			[lilactown/pyramid: A library for storing and querying graph data in a Clojure map](https://github.com/lilactown/pyramid) 
			[vvvvalvalval/datofu: there's a :db/fn for that](https://github.com/vvvvalvalval/datofu) 
			[juxt/pull: Trees from tables](https://github.com/juxt/pull) 
			[subhash/clj-stack: A full-stack Clojure tutorial](https://github.com/subhash/clj-stack) #datomic #project
			[Clojure European Summer Time - Data Driven RAD with Malli, by Arne Brasseur - YouTube](https://www.youtube.com/watch?v=ww9yR_rbgQs) #datomic #ui
			[I put 7 years of meal data in Datomic - Here's what I learned - Christian Johansen - YouTube](https://www.youtube.com/watch?v=ORQ2qs8GHsQ) #datomic
			[Indexes | Datomic](https://docs.datomic.com/on-prem/query/indexes.html) #datomic
			[Entities | Datomic](https://docs.datomic.com/on-prem/overview/entities.html) #datomic
			[Transactions | Datomic](https://docs.datomic.com/on-prem/transactions/transactions.html) #datomic
			[Tag: Datomic - Curious Programmer](https://curiousprogrammer.dev/tag/datomic) #datomic #examples
			[Datomic - codeq](https://blog.datomic.com/2012/10/codeq.html) #datomic
			[Home · Datomic/simulant Wiki](https://github.com/Datomic/simulant/wiki) #datomic
			[rafd/tada](https://github.com/rafd/tada) #ui
			resources datomic || ((23234769-fd4f-4bc4-ab3a-a4f4b48a28f6)) 
			datafy+nav on datomic: [REBL - Stuart Halloway - YouTube](https://www.youtube.com/watch?v=c52QhiXsmyI?t=1272) #datomic
				[Clojure Datafy – Nextjournal](https://nextjournal.com/zampino/clojure-datafy) #datomic
				[shadow-experiments/dev_support.cljs at master · thheller/shadow-experiments](https://github.com/thheller/shadow-experiments/blob/master/src/main/shadow/experiments/grove/dev_support.cljs) #datomic
			[Unofficial guide to Datomic internals # tonsky.me](https://tonsky.me/blog/unofficial-guide-to-datomic-internals/) #datomic
			[Separation of Concerns in Datomic Query: Datalog Query and Pull Expressions](https://cognitect.com/blog/2017/4/21/separation-of-concerns-in-datomic-query-datalog-query-and-pull-expressions) #datomic
			[Datomic/mbrainz-importer: Clojure/Transducers/Datomic ETL example](https://github.com/Datomic/mbrainz-importer#readme) #datomic
			[Datomic: up and running - YouTube](https://www.youtube.com/watch?v=ao7xEwCjrWQ&t=1769s) #datomic
			[David Greenberg - Building Interactive Query Tools on Datomic - YouTube](https://www.youtube.com/watch?v=YHctJMUG8bI) #datomic
			[Intro to Datomic - YouTube](https://www.youtube.com/watch?v=RKcqYZZ9RDY) #datomic #richhickey
			[Test-driven Development with Datomic - YouTube](https://www.youtube.com/watch?v=JaZ1Tm6ixCY) #datomic
			[Val on Programming: Using Datomic in your app: a practical guide](https://vvvvalvalval.github.io/posts/2016-07-24-datomic-web-app-a-practical-guide.html) #datomic
			[The Datomic Information Model](https://www.infoq.com/articles/Datomic-Information-Model/) #datomic
			[Conversations With Datomic - Squid's Blog](http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/) #datomic #examples
				[Conversations With Datomic Part 2 - Squid's Blog](http://gigasquidsoftware.com/blog/2015/08/19/conversations-with-datomic-part-2/) #datomic
				[Conversations With Datomic - Part 3 - Squid's Blog](http://gigasquidsoftware.com/blog/2015/08/25/converstations-with-datomic-3/) #datomic
			[Database Reinvented : Datomic | Humble Bits](http://blogs.quovantis.com/introduction-to-datomic/) #datomic
			[clojure-cookbook/6-15_traversing-indices.asciidoc at master · clojure-cookbook/clojure-cookbook](https://github.com/clojure-cookbook/clojure-cookbook/blob/master/06_databases/6-15_traversing-indices.asciidoc) #datomic
			[clojure-cookbook/6-12_transact-basics.asciidoc at master · clojure-cookbook/clojure-cookbook](https://github.com/clojure-cookbook/clojure-cookbook/blob/master/06_databases/6-12_transact-basics.asciidoc) #datomic
			[Datomic Walkthrough Step 0 - Installing, Running Transactor, Console - YouTube](https://www.youtube.com/watch?v=bnBPuN4J_TE) #datomic
				[Datomic Walkthrough Step 1 - Connecting and Exploring Datoms - YouTube](https://www.youtube.com/watch?v=bu2bQNiHzgI&list=PL4SAUIEMXDgIZcA2ZXTplhNYqF71_3yfK&index=3) #datomic
				[John Madison - YouTube](https://www.youtube.com/channel/UCegjRnOL_zu4nYUkNLsTt1w) #datomic
			[tatut/xtdb-inspector: Web UI for inspecting XTDB database](https://github.com/tatut/xtdb-inspector) #datomic #tll
			[tatut/ripley: Ring live pages experiment](https://github.com/tatut/ripley) #ui
				photon alternatifi
			[Building a powerful Double Entry Accounting system - Lucas Cavalcanti - YouTube](https://www.youtube.com/watch?v=aw6y4r4NAlw&list=PLZdCLR02grLofiMKo0bCeLHZC0_2rpqsz&index=10)
			[alexpetrov/datomic-facts-slides: Presentation about Datomic](https://github.com/alexpetrov/datomic-facts-slides) #datomic
			[Frequent 'datomic' Questions - Stack Overflow](https://stackoverflow.com/questions/tagged/datomic) #datomic
			[Datomic Knowledgebase](https://ask.datomic.com/) #datomic
			[clojure-north-2020/x07_queries.clj at master · markbastian/clojure-north-2020](https://github.com/markbastian/clojure-north-2020/blob/master/src/clojure_north_2020/ch02_datalog/x07_queries.clj) #datomic #examples
			[Learn Reduce, Group-by, and Juxt by creating a Look Up Map (Clojure Tutorial) - YouTube](https://www.youtube.com/watch?v=n0BTsKVs1Lw) 
			[Rich Hickey's greatest hits |> Changelog](https://changelog.com/posts/rich-hickeys-greatest-hits)
			[Clojure - Evaluation](https://clojure.org/reference/evaluation)
			[Clojure - Functional Programming for the JVM | Object Computing, Inc.](https://objectcomputing.com/resources/publications/sett/march-2009-clojure-functional-programming-for-the-jvm)
			[Visually navigating the data flowing through your serverless functions | Tessellator's Blog](https://www.tessellator.net/blog/visually-navigating-the-data-flowing-through-your-serverless-functions)
			[Defeating the Four Horsemen of the Coding Apocalypse - Mark Bastian - YouTube](https://www.youtube.com/watch?v=jh4hMAvygjk)
			[At the Conjunction of Innovation and Enablement - Mark Bastian - YouTube](https://www.youtube.com/watch?v=7jfH5ZB7deU)
			[markbastian/replion: A guide to REPL-driven Datomic development](https://github.com/markbastian/replion) #datomic
			[Datomic/datomic-java-examples](https://github.com/Datomic/datomic-java-examples) #datomic
			[Datomic/client-examples: Clojure Client API examples](https://github.com/Datomic/client-examples) #datomic
			[Building Marvelous and Heroic Systems from the Ground Up - Mark Bastian (Workshop) - YouTube](https://www.youtube.com/watch?v=eink6oICdOQ) #datomic #examples
				[markbastian/clojure-north-2020](https://github.com/markbastian/clojure-north-2020) #datomic
			[Yuppiechef/datomic-schema: Makes it easier to see your Datomic schema without sacrificing any features.](https://github.com/Yuppiechef/datomic-schema) #datomic
gtd - clj id=g13055
  id:: c95cd0f4-951f-494d-a9c2-993aa60d7c55
	ndx - gtd - clj id=g13057
	  id:: 46f74c20-0beb-4929-897a-aaa19f8a458f
		örnek uygulamalar - clj || ((4b52e911-22ee-43fe-bc86-4c824940247c)) 
	öncelikli işler - clj id=g13342
	  id:: 6b3e9a99-e154-4586-9741-84479ae7c33d
		[Val on Programming: DataScript as a Lingua Franca for domain modeling](http://vvvvalvalval.github.io/posts/2018-07-23-datascript-as-a-lingua-franca-for-domain-modeling.html)
	sbs - gtd - clj id=g13058
	  id:: 94718bad-08ae-4b9d-852a-2924a01648e4
		gtd - fulcro id=g13083
		  id:: b2a1a78f-dd67-47c6-b40c-100383a76fdb
			Nubank Workspaces
			ex06 - fulcro exercises || ((adaf04db-71fa-4e2f-87d1-5104058b7432))
			clojure || ((4eae8afc-08ad-4d7d-9b61-118f0d0e78d3)) 
			@questions - fulcro || ((dd777e52-5132-43c6-bc44-ca60ec7922c3))
			[Clojure on Exercism](https://exercism.org/tracks/clojure/concepts)
			github PR yönetme
			[Want more from your frontend framework! Rethinking the web development experience. - YouTube](https://www.youtube.com/watch?v=F651QCU3Sco)
			[Love Letter To Clojure (Part 1) | Gene Kim](https://itrevolution.com/love-letter-to-clojure-part-1/)
			clojureatlas.com
			[holyjak/fulcro-intro-wshop: Introduction to Fulcro workshop held during re:Clojure 2021](https://github.com/holyjak/fulcro-intro-wshop)
		gtd - datomic id=g13063
		  id:: b097e98b-0de7-410d-93ef-2d8811d9d3af
			simülasyon yapacak olsam hiçbir programlama sınırlaması olmadan, ne yapardım? id=g13085
			  id:: 10b6c212-43c4-4708-b599-263a566f2a02
			oku: 2017 ClojureNYC – Datomic, and the failures of REST, hypermedia and ORM
			datomic simülasyonları yapalım id=g13064
			  id:: 5da62eca-e1f8-46b9-953a-092a8236b339
				bir dosyada olsun adımlar
				step01.clj
				bunun çıktıları başka bir dosyada olsun
				out01.edn
				out01.xlsx
				bunları belki bir Rmarkdown ile birleştirip sunum/rapor haline getirelim
			logseq'te sınıflandırma nasıl yapılıyor? id=g13065
			  id:: ddf4f27f-5b47-454c-87ab-fd278f02eb87
				bir bloka nasıl yeni bir etiket atarım?
		apps - clojure
			Create a password manager with Clojure using Babashka, sqlite, honeysql and stash - YouTube 
	clojure ile veri analizi uygulamaları yap 20220720  || ((34c48317-34c4-4d9d-bac8-00e847e1f483))
	bir sürecin adımlarını ve formlarını ve veri alanlarını edn ile modelle 20220720  || ((97a6ade8-f112-4929-a133-6d6cd05f4067))
	[6 types of information systems | Dustin Getz](https://typeshare.co/dustingetz/posts/6-types-of-information-systems)
	Monad kılavuzunu R ve clj ile uygulamayı dene:
		[The Absolute Best Intro to Monads For Software Engineers - YouTube](https://www.youtube.com/watch?v=C2w45qRc3aU)
	plan - geliştirilecek örnek clojure uygulamaları  || ((f26d16f8-a57b-4179-91c2-cbc8b5cd7601))
	learn-clojure/resources 
	[How to work with files in Clojure - YouTube](https://www.youtube.com/watch?v=Kbhe8kFEwlU)
	[clojureD 2020: "Fun with JSON" by Malcolm Sparks - YouTube](https://www.youtube.com/watch?v=gMYQ1vDy7d0)
jrnl - clj id=g13204
  id:: 071cd274-b1e2-4e29-b9cf-82c035d683e3
	20220813
	Cross Platform DateTime Awesomeness - Henry Widd - YouTube 
	java - What's the difference between Instant and LocalDateTime? - Stack Overflow 
	20220815
	Should I use java.util.Date or switch to java.time.LocalDate - Stack Overflow 
	tick - date time library 
	20220817
	tick examples: Countdown Timers 
	function list - tick 
	20220903
	error: there were no modules containing clojure.main @clj || ((f8b44fe0-6d54-4792-a67d-fc92bd48b39f))
	20220904
	Clojure in a nutshell by James Trunk - YouTube @clj  || ((266047a9-71ac-429b-b9ad-c9413957e08d))
ndx - clj id=g13212
  id:: e3214a3b-2076-4b4c-bc40-42b6cc01d46f
	Study Devcards  || ((cc0a9f16-18fc-4056-9d65-cd8eb5b22529))
	kod okuma örnekleri - clj id=g13213
	  id:: 0f5a44a2-57f8-4acf-8f70-75a3c65c2a25
	tick examples: Countdown Timers || ((b9eda644-8150-476d-80ef-7037cab8686e)) 
  - authors || ((3267d5b9-691a-475a-a19a-5313afaa9f8e))
		tick - date time library || ((472009da-1607-490b-8d77-c71944b26b24)) 

