(ns dev-local.datalog02-ex-13)

; Konu: Aggregates
;
; BarÄ±ÅŸ'la Datomic Ã‡alÄ±ÅŸmalarÄ±
; Tarih: 20230207
; rfr: video/20230207-mert-clj-egzersiz-22.mp4

; [Learn Datalog Today!](https://www.learndatalogtoday.org/chapter/7)
; https://docs.datomic.com/on-prem/query/query.html#aggregates

(require '[datomic.client.api :as d])
(use '[dev-local.datalog02-ex-04 :only [conn] :as e04])
(require '[dev-local.datalog02-ex-05 :as e05])
(def db (d/db conn))

; SQL'deki MAX, MIN, DISTINCT, AVG gibi fonksiyonlara aggregate fonksiyonlarÄ± deniyor.

; Tek deÄŸer dÃ¶nen aggregates

; Ã–rnek: TÃ¼m sipariÅŸlerin adet miktarlarÄ±nÄ±n ortalamasÄ±nÄ± bulmak istiyoruz:
; Normalde tÃ¼m sipariÅŸlerin adetlerini bir Ã§Ä±kartalÄ±m
(d/q
  '[:find ?order ?size
    :where
    [?order :order/size ?size]]
  db)
;[[87960930222172 4]
; [87960930222173 5]
; [101155069755482 2]
; [101155069755483 3]
; [92358976733271 4]
; [101155069755481 7]
; [96757023244376 6]
; [92358976733270 5]
; [87960930222175 3]
; [87960930222174 4]]

(d/q
  '[:find ?size
    :where
    [?order :order/size ?size]]
  db)
;=> [[2] [3] [4] [5] [6] [7]]
; Benim beklediÄŸim sonuÃ§ ÅŸÃ¶yleydi:
; 4 5 2 3 4 7 6 5 3 4

(d/q
  '[:find (distinct ?size)  ; ðŸ‘ˆ 
    :where
    [?order :order/size ?size]]
  db)
;=> [[#{7 4 6 3 2 5}]]
; distinct: ayrÄ±k bir ÅŸekilde sonuÃ§larÄ± listeler. tekrarlanan deÄŸerleri birleÅŸtirir

(d/q
  '[:find (count ?size)
    :where
    [?order :order/size ?size]]
  db)
;=> [[6]]

(d/q
  '[:find (count ?order)
    :where
    [?order :order/size ?size]]
  db)
;=> [[10]]

(d/q
  '[:find (max ?size)
    :where
    [?order :order/size ?size]]
  db)
;=> [[7]]

; https://docs.datomic.com/on-prem/query/query.html#aggregates-returning-a-single-value
; (min ?xs)   en kÃ¼Ã§Ã¼k deÄŸeri (numerik)
; (max ?xs)   en bÃ¼yÃ¼k deÄŸeri
; (count ?xs)    kaÃ§ tane adet olduÄŸunu verir
; (count-distinct ?xs)   kaÃ§ farklÄ± adet olduÄŸunu verir
; (sum ?xs)      toplamÄ±nÄ± hesaplar
; (avg ?xs)      ortalamasÄ±nÄ± hesaplar (average)
; (median ?xs)   ortanca deÄŸeri verir
; (variance ?xs)   istatistiksel varyansÄ±
; (stddev ?xs)     istatistiksel standart sapmayÄ± verir

; Aggregate kelimesinin anlamÄ± nedir?
; Aggregate, yÄ±ÄŸÄ±n, kÃ¼me, birleÅŸtirmek gibi anlamlarda kullanÄ±lan bir kelime.
; Birden Ã§ok ÅŸeyi toparlamak veya gruplamak gibi bir anlamda dÃ¼ÅŸÃ¼nÃ¼lebilir.
; Veri sorgularÄ±mÄ±zda dÃ¶nen sonuÃ§ kÃ¼mesindeki tek tek satÄ±rlarÄ± dÃ¶ndÃ¼rmek yerine,
; bu kÃ¼menin tÃ¼mÃ¼ne veya alt gruplarÄ±na dair bir istatistik Ã¼retmek iÃ§in kullanÄ±yoruz.

; Bu yukarÄ±daki Ã¶rnekler, tek bir deÄŸer (scalar) dÃ¶nen aggregate fonksiyonlarÄ±.
; Bir de koleksiyon dÃ¶nen aggregate fonksiyonlarÄ± var.

; https://docs.datomic.com/on-prem/query/query.html#aggregates-returning-collections
; (distinct ?xs)     ayrÄ±k Ã¶ÄŸeleri dÃ¶ner
; (min n ?xs)        min n Ã¶ÄŸeyi verir
; (max n ?xs)        en bÃ¼yÃ¼k n Ã¶ÄŸeyi verir
; (rand n ?xs)
; (sample n ?xs)     verdiÄŸin kÃ¼meden n tane Ã¶rnek alÄ±r

(d/q
  '[:find (max 3 ?size)
    :where
    [?order :order/size ?size]]
  db)
;=> [[[7 6 5]]]

(d/q
  '[:find (sample 3 ?order)
    :where
    [?order :order/size ?size]]
  db)
;=> [[[96757023244376 92358976733270 87960930222173]]]

; BÃ¼tÃ¼n bu aggregate fonksiyonlarÄ± SQL'daki benzerleriyle aynÄ± iÅŸleve sahip.
; DolayÄ±sÄ±yla bunlarÄ±n iÅŸlevini anlamak iÃ§in SQL dokÃ¼manlarÄ±na da baÅŸvurabiliriz.

; Custom Aggregates

; Kendi Ã¶zel aggregate fonksiyonumuzu yazmak da Predicate veya Transformation FonksiyonlarÄ±yla benzer ÅŸekilde.
; mode fonksiyonu bir listedeki en Ã§ok kullanÄ±lan Ã¶ÄŸeyi dÃ¶nsÃ¼n.
(defn mode
  [vals]
  (->> (frequencies vals)
    (sort-by (comp - second))
    ffirst))
(mode '(10 10 10 20 30 20))
;=> 10
(mode '(1 2 2 2 2 3))
;=> 2
(mode '(1 2 3 3 2 3))
;=> 3

; Bu mode fonksiyonuyla dÃ¶nen bir result set (bir sorgunun sonucunda dÃ¶nen kÃ¼me) iÃ§indeki en Ã§ok tekrarlanan Ã¶ÄŸeyi dÃ¶ner.

; Veri tabanÄ±mÄ±za yeni sipariÅŸ kayÄ±tlarÄ± girelim
(def order-list-5
  [{:order/product [:product/id 2] :order/size 4}
   {:order/product [:product/id 3] :order/size 5}
   {:order/product [:product/id 1] :order/size 4}
   {:order/product [:product/id 2] :order/size 3}])
(d/transact conn {:tx-data order-list-5})
(def db (d/db conn))
(d/q
  '[:find (pull ?order [*])
    :where
    [?order :order/size ?size]]
  db)
;=>
;[[{:db/id 87960930222172, :order/product #:db{:id 92358976733267}, :order/size 4}]
; [{:db/id 87960930222173, :order/product #:db{:id 92358976733268}, :order/size 5}]
; [{:db/id 87960930222174, :order/product #:db{:id 92358976733266}, :order/size 4}]
; [{:db/id 87960930222175, :order/product #:db{:id 92358976733267}, :order/size 3}]
; [{:db/id 92358976733270, :order/product #:db{:id 92358976733263}, :order/size 5}]
; [{:db/id 92358976733271, :order/product #:db{:id 92358976733265}, :order/size 4}]
; [{:db/id 96757023244376, :order/product #:db{:id 92358976733266}, :order/size 6}]
; [{:db/id 101155069755481, :order/product #:db{:id 92358976733267}, :order/size 7}]
; [{:db/id 101155069755482, :order/product #:db{:id 92358976733268}, :order/size 2}]
; [{:db/id 101155069755483, :order/product #:db{:id 92358976733269}, :order/size 3}]]

(d/q
  '[:find ?order ?size
    :where
    [?order :order/size ?size]]
  db)
;=>
;[[87960930222172 4]
; [87960930222173 5]
; [101155069755482 2]
; [101155069755483 3]
; [92358976733271 4]
; [101155069755481 7]
; [96757023244376 6]
; [92358976733270 5]
; [87960930222175 3]
; [87960930222174 4]]

(d/q
  '[:find (dev-local.e13/mode ?size)
    :where
    [?order :order/size ?size]]
  db)
; beklediÄŸimiz gibi Ã§alÄ±ÅŸmadÄ±
; aslÄ±nda dÃ¶nmesi gereken deÄŸer 4 Ã§Ã¼nkÃ¼ 3 farklÄ± sipariÅŸte 4 adet bulunuyor

; olmasÄ± gereken sonucu kendimiz clojure fonksiyonlarÄ±yla bulalÄ±m
(map second (d/q
              '[:find ?order ?size
                :where
                [?order :order/size ?size]]
              db))
;=> (4 5 2 3 4 7 6 5 3 4)

(mode
  (map second (d/q
                '[:find ?order ?size
                  :where
                  [?order :order/size ?size]]
                db)))
;=> 4

(->>
  (d/q
    '[:find ?order ?size
      :where
      [?order :order/size ?size]]
    db)
  (map second)
  (mode))
;=> 4

; GROUP BY
; https://docs.datomic.com/cloud/query/query-data-reference.html#aggregate-example

; SQL'de bu aggregate fonksiyonlarÄ± genelde her zaman GROUP BY ile birlikte kullanÄ±lÄ±r
; datomicde `GROUP BY` ifadesini kullanmayÄ±z. farklÄ± bir formatta bunu yaparÄ±z.

; [:find ?a (min ?b) (max ?b) ?c (sample 12 ?d)
; ?a ve ?c'ye gÃ¶re gruplar

(d/q
  '[:find ?size (count ?size)  ; ðŸ‘ˆ `group by ?size` gibi
    :where
    [?order :order/size ?size]]
  db)


; dÃ¼z clojure ile yapmayÄ± deneyelim
(map second (d/q
              '[:find ?order ?size
                :where
                [?order :order/size ?size]]
              db))
;=> (4 5 2 3 4 7 6 5 3 4)
; TODO: https://www.google.com/search?q=clojure+vector+items+group+by+count&sourceid=chrome&ie=UTF-8
