
datomic.otl id=g13023
	datomic.otl <url:file:///~/projects/study/clj/datomic.otl#r=g13023>
rfr
	Datomic Kod Okumalarından Notlar  <url:file:///~/prj/study/clj/datomic_kod_okumalarindan_notlar.md#r=g13532>
	Day Of Datomic Cloud otl <url:file:///~/projects/study/clj/articles-datomic.md#r=g12849>
ndx
	refcard <url:file:///~/prj/study/clj/datomic.otl#r=g14436>
study-order datomic id=g12866
	Norbert Wojtowicz - Modeling your domain (Lambda Days 2016) - YouTube <url:file:///~/prj/study/logbook/log_20220927.md#r=g13409>
	[Learn Datalog Today!](http://www.learndatalogtoday.org/)
	Datomic Kod Okumalarından Notlar  <url:file:///~/prj/study/clj/datomic_kod_okumalarindan_notlar.md#r=g13532>
	[Max Datom - Interactive Datomic Tutorial](https://max-datom.com/)
	/Users/mertnuhoglu/prj/study/clj/ex/study_datomic/datalog-01/src/mertnuhoglu/datomic/datomic_01b.clj
	Connect to Sample Database <url:file:///~/prj/study/clj/articles-datomic.md#r=g13507>
	Datomic Documentation <url:file:///~/prj/study/clj/datomic_documentation_rtc.md#r=g13500>
	REBL ile datomic verilerini dolaşma  <url:file:///~/prj/study/clj/datomic.otl#r=g13523>
	Lab: Assertion Tutorial <url:file:///~/prj/study/clj/articles-datomic.md#r=g13506>
	Code - Assertion and Read Tutorial <url:file:///~/prj/study/clj/articles-datomic.md#r=g13509>
	Example: Day of Datomic Cloud Sample Data <url:file:///~/prj/study/clj/articles-datomic.md#r=g13521>
	Article: mbrainz tutorial <url:file:///~/prj/study/clj/mbrainz-tutorial-rtc.md#r=g12871>
	~/prj/study/clj/ex/study_datomic/datalog-02/src/mert/e01.clj
	datomic okuma planı 20221113 <url:file:///~/prj/study/clj/datomic.otl#r=g13676>
pnt
	datomic okuma planı 20221113 id=g13676
		rfr
			work: datomic okuma planı 20221113  <url:file:///~/prj/myrepo/work/work4.otl#r=g13517>
		pln 00
			study-order datomic <url:file:///~/projects/study/clj/datomic.otl#r=g12866>
			[DOMAIN MODELING WITH DATALOG by Norbert Wojtowicz - YouTube](https://www.youtube.com/watch?v=oo-7mN9WXTw) @datomic
			Article: mbrainz tutorial <url:file:///~/prj/study/clj/mbrainz-tutorial-rtc.md#r=g12871>
			/Users/mertnuhoglu/projects/study/clj/ex/study_datomic/datalog-01/deps.edn
			articles - datomic <url:file:///~/projects/study/clj/datomic.otl#r=g13413>
			resources datomic <url:file:///~/projects/study/clj/datomic.otl#r=g12880>
			[Highest scored 'datomic' questions - Stack Overflow](https://stackoverflow.com/questions/tagged/datomic)
			[cloojure/tupelo-datomic: Tupelo-Datomic - Datomic With A Spoonful of Honey](https://github.com/cloojure/tupelo-datomic)
		pln 01
			[[20230525-clj-markbastian-datascript-playground]] <url:file:///~/prj/study/logseq-study/pages/20230525-clj-markbastian-datascript-playground.md#r=g14455>
			[Max Datom - Interactive Datomic Tutorial](https://max-datom.com/) @datomic
			[Learn Datalog Today!](http://www.learndatalogtoday.org/) @datomic
			[ftravers/datomic-tutorial](https://github.com/ftravers/datomic-tutorial) @datomic
			[Lambda Island](https://lambdaisland.com/episodes/datomic-quickstart-part-1) @datomic @tutorial
			[mchampine/dscript: DataScript examples and practice](https://github.com/mchampine/dscript) #datomic #example
		pln ex
			[day-of-datomic/query.clj at 98c1d9b2967ad5317e83b6da50f7c0e5c3d7a207 · Datomic/day-of-datomic · GitHub](https://github.com/Datomic/day-of-datomic/blob/98c1d9b2967ad5317e83b6da50f7c0e5c3d7a207/tutorial/query.clj)
			[Datomic - A Whirlwind Tour of Datomic Query](https://blog.datomic.com/2013/05/a-whirlwind-tour-of-datomic-query_16.html)
			[vvvvalvalval/datascript-declarative-model-example](https://github.com/vvvvalvalval/datascript-declarative-model-example) @datomic
			[markbastian/clojure-exercises: A variety of Clojure puzzlers, problems, and solutions](https://github.com/markbastian/clojure-exercises) @exercise
			[Clojure & Datalog is Lisp & Prolog | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2022/01/13/datalog-exercises.html) @datomic @tutorial
			[kristianmandrup/datascript-tutorial: Datascript and Datomic tutorial book](https://github.com/kristianmandrup/datascript-tutorial) @datomic @tutorial
			[Entity event log in Datomic | jherrlin](https://jherrlin.github.io/posts/datomic-entity-event-log/) @datomic @tutorial @1
			[subhash/clj-stack: A full-stack Clojure tutorial](https://github.com/subhash/clj-stack) @datomic @project
			[markbastian/datascript-playground](https://github.com/markbastian/datascript-playground/tree/master/src/main/clj/datascript_playground) @datomic @examples
			[replikativ / datahike-invoice · GitLab](https://gitlab.com/replikativ/datahike-invoice) @datomic @examples
			[Datomic MusicBrainz Sample Database – Nextjournal](https://nextjournal.com/kommen/datomic) id=g13066 @datomic @examples
			[1: Getting Started with Crux – A Tale of Time and Space – Nextjournal](https://nextjournal.com/crux-tutorial/start) @datomic @examples
			[A Bitemporal tale – History. Of histories. – Nextjournal](https://nextjournal.com/crux/a-bitemporal-tale) @datomic @examples
			[Conditional Queries in Datomic](https://grishaev.me/en/datomic-query/) @datomic @examples
			[Tag: Datomic - Curious Programmer](https://curiousprogrammer.dev/tag/datomic) @datomic @examples
			[The use of d/tempid - General - Datomic Developers](https://forum.datomic.com/t/the-use-of-d-tempid/815)
			[Conversations With Datomic - Squid's Blog](http://gigasquidsoftware.com/blog/2015/08/15/conversations-with-datomic/) @datomic @examples
			[clojure-north-2020/x07_queries.clj at master · markbastian/clojure-north-2020](https://github.com/markbastian/clojure-north-2020/blob/master/src/clojure_north_2020/ch02_datalog/x07_queries.clj) @datomic @examples
			[Building Marvelous and Heroic Systems from the Ground Up - Mark Bastian (Workshop) - YouTube](https://www.youtube.com/watch?v=eink6oICdOQ) @datomic @examples
			[clojure-north-2020 -- Marginalia](https://markbastian.github.io/clojure-north-2020/docs/uberdoc.html) @datomic @examples
			[clojure-cookbook/6-15_traversing-indices.asciidoc at master · clojure-cookbook/clojure-cookbook](https://github.com/clojure-cookbook/clojure-cookbook/blob/master/06_databases/6-15_traversing-indices.asciidoc) @datomic
			[clojure-cookbook/6-12_transact-basics.asciidoc at master · clojure-cookbook/clojure-cookbook](https://github.com/clojure-cookbook/clojure-cookbook/blob/master/06_databases/6-12_transact-basics.asciidoc) @datomic
			[Val on Programming: Using Datomic in your app: a practical guide](https://vvvvalvalval.github.io/posts/2016-07-24-datomic-web-app-a-practical-guide.html) @datomic
			[Intro to Datomic - YouTube](https://www.youtube.com/watch?v=RKcqYZZ9RDY) @datomic @richhickey
			[Datomic: up and running - YouTube](https://www.youtube.com/watch?v=ao7xEwCjrWQ&t=1769s) @datomic
			[Learn Datalog Today Chapters 1-4 (Clojure Livecoding Stream) - YouTube](https://www.youtube.com/watch?v=8bc4mBRmmbg) @datomic
			[Intro into using Crux Db with Clojure - YouTube](https://www.youtube.com/watch?v=_L50rsoDBxQ) @datomic
			[Datalog Links and Notes](https://gist.github.com/pithyless/e00362aa6061bfb4e4749079a33be073) @datomic
			[stevebuik/clj-code-gen-hodur: Generates a simple datascript ORM from a Hodur schema. Used as a presentation at Clojure Sydney in May 2019](https://github.com/stevebuik/clj-code-gen-hodur) @datomic
			[dwhjames/datomic-linklist: A Datomic library of schema attributes and database functions to implement linked-list structures in Datomic.](https://github.com/dwhjames/datomic-linklist) @datomic
			[Datomic/ion-starter](https://github.com/Datomic/ion-starter) @datomic @example
		pln prj
			[Mamun/clojure-web-app: Clojure web application using compojure, enlive, datomic, clojurescript](https://github.com/Mamun/clojure-web-app)
			[Coding the τhosmos: Realworld Clojure in a Vase on a Pedestal](https://code.thosmos.com/posts/2018-05-06-realworld-vase.html)
			[maxweber/todomvc-db-view: An example app that demonstrates the db-view approach](https://github.com/maxweber/todomvc-db-view) @datomic @project
				[The blog of Max Weber: Introducing db-view - Part 1](https://maxweber.github.io/blog/2019-07-25-introducing-db-view-part-1)
			[Building a CRUD app with Datomic Cloud Ions](https://jacobobryant.com/p/post-2019-ion/) @datomic @project
			[jacobobryant/flexbudget: FlexBudget, a flexible budgeting app](https://github.com/jacobobryant/flexbudget) @datomic @project
			[jacobobryant/clue](https://github.com/jacobobryant/clue) @datomic @project
			[markbastian/tetris: A simple Tetris-like game written in Clojure(Script)](https://github.com/markbastian/tetris) @project
			[markbastian/7guis](https://github.com/markbastian/7guis) @project
			[imalooney/t3tr0s: 30th anniversary tetris in ClojureScript](https://github.com/imalooney/t3tr0s) @project
		pln ui
			[Incremental Datalog with Differential Dataflows](https://www.nikolasgoebel.com/2018/09/13/incremental-datalog.html) @datomic @frp 1
			[Pushing Database Changes to the Web with Datomic](https://fuqua.io/blog/2014/05/pushing-database-changes-to-the-web-with-datomic/) @datomic
			[Biff - Web framework](https://biffweb.com/) @datomic @ui
			[mpdairy/posh: A luxuriously simple and powerful way to make front-ends with DataScript and Reagent in Clojure.](https://github.com/mpdairy/posh) @datomic @ui
			[metasoarous/datsys: (+ clj cljs datomic datascript re-frame-esque-frp)](https://github.com/metasoarous/datsys) @datomic @ui
		pln eql
			[souenzzo/eql-style-guide](https://github.com/souenzzo/eql-style-guide) @eql
			[souenzzo/eql-as: Aliases in EQL](https://github.com/souenzzo/eql-as) @eql
			[souenzzo/eql-datomic: ast->query and query->ast for datomic pull syntax](https://github.com/souenzzo/eql-datomic) @datomic @eql
		pln tools
			[(148) A Quick Demo of Metabase+Datomic - YouTube](https://www.youtube.com/watch?v=6eLME2TZ7oU) @datomic @tool
			[bostonaholic/datomic-export: A Clojure library designed to export datomic data to flat files.](https://github.com/bostonaholic/datomic-export) @datomic @tool
			[(148) Datomic QBuilder Console Preview - YouTube](https://www.youtube.com/watch?v=1SSmsKTfFRk)
			[David Greenberg - Building Interactive Query Tools on Datomic - YouTube](https://www.youtube.com/watch?v=YHctJMUG8bI) @datomic
			[sixthnormal/pullql: A GraphQL-like query language for DataScript, optimized for execution across many entities at once.](https://github.com/sixthnormal/pullql) @datomic
			[tatut/xtdb-inspector: Web UI for inspecting XTDB database](https://github.com/tatut/xtdb-inspector) @datomic @tll
			[Datomic/simulant](https://github.com/Datomic/simulant) @datomic
			[vvvvalvalval/datofu: there's a :db/fn for that](https://github.com/vvvvalvalval/datofu) @datomic
			[mtnygard/datoms-say-what: Visualize the results of a Datomic transaction.](https://github.com/mtnygard/datoms-say-what) @datomic @tool
		pln schema
			[Coding the τhosmos: Spec-Driven UI](https://code.thosmos.com/posts/2019-12-04-spec-driven-ui.html) @datomic
			[A Unified Specification](https://cjohansen.no/a-unified-specification/) @datomic
		pln logic
			[Data modeling in Datomic – Dev – RotaDEV.com](https://rotadev.com/data-modeling-in-datomic-dev/) @datomic
			[Let over map merge: Using Datomic in my app](https://humorless.github.io/posts-output/datomic) @datomic
			[Clojure in the Database · subhash/clj-stack Wiki](https://github.com/subhash/clj-stack/wiki/Clojure-in-the-Database) @datomic
			[Separation of Concerns in Datomic Query: Datalog Query and Pull Expressions](https://cognitect.com/blog/2017/4/21/separation-of-concerns-in-datomic-query-datalog-query-and-pull-expressions) @datomic
			[[20230524-rtc-Datomic-for-Five-Year-Olds]] <url:file:///~/prj/study/logseq-study/pages/20230524-rtc-Datomic-for-Five-Year-Olds.md#r=g14446>
			[Frequent 'datomic' Questions - Stack Overflow](https://stackoverflow.com/questions/tagged/datomic) @datomic
			[alexpetrov/datomic-facts-slides: Presentation about Datomic](https://github.com/alexpetrov/datomic-facts-slides) @datomic
			[Val on Programming: Application architecture with Datomic: branching reality](http://vvvvalvalval.github.io/posts/2016-01-03-architecture-datomic-branching-reality.html)
			[Val on Programming: DataScript as a Lingua Franca for domain modeling](http://vvvvalvalval.github.io/posts/2018-07-23-datascript-as-a-lingua-franca-for-domain-modeling.html) @datomic
			[Datomic as a Protocol @ tonsky.me](https://tonsky.me/blog/datomic-as-protocol/) @datomic
	Datomic Kod Okumalarından Notlar  <url:file:///~/prj/study/clj/datomic_kod_okumalarindan_notlar.md#r=g13532>
	Example: Get Current Datomic Schema <url:file:///~/prj/study/clj/articles-datomic.md#r=g13527>
	REBL ile datomic verilerini dolaşma  id=g13523
		REBL ile datomic verilerini dolaşma #datomic #clj <url:file:///~/projects/study/logbook/log_20221116.md#r=g13522>
		pre:
			run repl + Rebl + portal <url:file:///~/prj/study/clj/datomic.otl#r=g12891>
		repl içinde:
refcard id=g14436
	rfr
		Datomic Kod Okumalarından Notlar  <url:file:///~/prj/study/clj/datomic_kod_okumalarindan_notlar.md#r=g13532>
	transact
		(d/transact conn {:tx-data [{:db/ident :red}]}
		(def tx-result (d/transact conn {:tx-data [{:story/title "value1" story/url "value2"} ]}))
		(d/transact conn {:tx-data 👈 [ 👉[:db/add eid :inv/count 100]]})
		[:db/add entity-id attribute value]
		[:db/retract 👈 [:inv/sku "SKU-22"] :inv/count 7]
		[:db/add [:inv/sku "SKU-21"] 👈 <attribute> <value>] ;; lookup ref
	schema
		(def attributes
			[{:db/ident :inv/count
				:db/valueType :db.type/long
				:db/cardinality :db.cardinality/one}])
		(d/transact conn {:tx-data [{:db/ident :red}]}
			;=>
			;{:db-before #datomic.core.db.Db{:id "19c724ee-3905-4f85-92d7-0d0623302e69",
			;                              👉:basisT 5,
			;                              👉:asOfT nil,  👈
			...
			; 👉:db-after #datomic.core.db.Db{:id "19c724ee-3905-4f85-92d7-0d0623302e69",
			...
			; 👉:tx-data [#datom[13194139533318 50 #inst"2022-11-11T11:28:45.337-00:00" 13194139533318 true]
	Parameterized Query
		(d/q ...
			:in $ ?inv 👈
			...
			[:inv/sku "SKU-25"] 👈)
	Rules
		(d/q ...
		👉	:in $ % ?inv where
		👉	(ordered-together ?inv ?other-inv)
				[?other-inv :inv/sku ?sku]]
		👉db rules [:inv/sku "SKU-25"])
	Lookup ref
		[:db/add [:inv/sku "SKU-21"] <attribute> <value>]
		[{:db/ident :inv/sku
		👉:db/unique :db.unique/identity 
		(def stu [:user/email "stuarthalloway@datomic.com"] 👈)
		{:tx-data
		:source/user stu 👈}]}))
	Connection
		memory
			(def client (d/client {:server-type :dev-local
														:storage-dir :mem
														:system "ci"}))
			(d/create-database client {:db-name "db03"})
			(def conn (d/connect client {:db-name "db03"}))
		file
			(def client (d/client {:server-type :dev-local
													👉:system "datomic-samples"}))
			{:storage-dir "/Users/mertnuhoglu/db/"}
	as-of
		(def db-t 👉 (:t (:db-after tx-result))) ;=> 12
		(d/pull (d/as-of db db-t 👈) '[:story/title] story)
	history
		(dh/q '[:find ?a ...
			(dh/history @conn))
	since
		(d/q ('[:find ?count 
						:in $ $since ?id 
						:where [$ ?e :item/id ?id] 
									[$since ?e :item/count ?count]]) 
			db since-2014 "DLC-042")
		note: $, $since, since-2014
	queries
		what is the entire history of entity e?
			👉[?e ?a ?v ?tx ?added]
				[?a 👈 :db/ident ?aname]
				[?tx :db/txInstant ?inst]]
			(d/history (d/db conn))
		who changed the title, and when?
			👉	[?tx :source/user ?user]
				[?tx :db/txInstant ?inst]
				[?user :user/email ?email]]
			(d/history (d/db conn))
	metadata queries
		List all attributes
			👉 [:db.part/db :db.install/attribute ?a] 
				 [?a :db/ident 👈 ?n]] 
		Atributların kendi atributları:
			(q '[:find (pull ?a [*] 👈) :where 
					 [?a :db/ident :db.install/attribute]]  👈
	find clause
		:find ?n 👈 
		:find ?n . 👈
		:find ?n ?a 👈
		:find [?n ...] 👈
	entity api
	datom api
		(dh/datoms @db {:index :eavt})
	tuples
		Composite Tuples:
			:db/valueType :db.type/tuple 👈
			:db/tupleAttrs [:reg/course 👈:reg/semester 👈:reg/studen 👈]
	temporary ids
		[[:db/add "jdoe" :person/first "Jan"]
		 [:db/add "jdoe" :person/last "Doe"]]
	transaction functions
		[[:db/cas 42 :account/balance 100 110]]
	pattern inputs
		'[:find (pull ?e pattern 👈)
			:in $ ?name 👉 pattern
			:where [?e :artist/name ?name]]
		[db "The Beatles" 👉 [:artist/startYear :artist/endYear]]
	bindings
		| ?a           | scalar     |
		| [?a ?b]      | tuple      |
		| [?a …]       | collection |
		| [ [?a ?b ] ] | relation   |
	find specifications
		| :find ?a . 👈    | single scalar | 
		| :find [?a ?b]    | single tuple  | 
		| :find [?a …👈 ]  | collection    | 
		| :find ?a ?b      | relation      | 
	return maps
		:find ?artist-name ?release-name
		:keys artist 👈 release
		=>
		#{{:artist 👈 "George Jones" :release "With Love"}
	not
		(not 👈 [?eid :artist/country :country/CA])]
	or clause
		:where (or 👈 [?artist :artist/type :artist.type/group]
								(and [?artist :artist/type :artist.type/person]
										[?artist :artist/gender :artist.gender/female]))]
	predicate expressions
		[(< 👈 ?year 1600)]]
	function expressions
		[(quot 👈 ?millis 60000) ?minutes 👈]
	Built-in expressions
		[(get-else src-var ent attr default) ?val-or-default]
	rules
		[(twitter? ?c) ; 1 arg
		[?c :community/type :community.type/twitter]]
	aggregates
		[:find (sum ?heads) .
	aggregates returning a single value
		(min ?xs)
		(max ?xs)
	aggregates returning collections
		(distinct ?xs)
		(min n ?xs)
	pull 02
		:find (pull ?e [:release/name])
		e02: pattern arg
			:find (pull ?e 👉 pattern)
			:in $ ?artist pattern 👈
			:where ...
			db, led-zeppelin, 👉 [:release/name]
		e03: multiple
			:find (👉 pull ?e [:release/name]) (👉 pull ?a [*])
	entity identifier in V position
		db, [:country/name "Belgium"] ;; lookup ref
		db, :country/BE               ;; ident
		db, 17592186045516            ;; entity id
	index
		(d/index-pull db {:index    :avet 👈
											:selector '[:artist/name :artist/startYear :artist/endYear]
	pull 03
		(pull db '[*] led-zeppelin)
		(pull-many db '[*] [led-zeppelin jimi-hendrix janis-joplin])
	pull reverse lookup
		{:artist/_country [{:db/id 17592186045751} {:db/id 17592186045755} ...]}
	pull map specifications
		[:track/name 👉 {:track/artists 👉 [:db/id :artist/name]}]
	pull attribute specifications
		[:artist/name :as 👈 "Band Name"]
		[{(:track/_artists :limit 2 👈) [:track/name]}]
	pull wildcards
		[*]   
		;;=>  özyinelemeli şekilde alt üyeleri çeker
		["*" {:track/artists [:artist/name]}]
		;;=>  ref öğelerin belirli atributlarını çeker
	recursion limits
		[:person/lastName {:person/friends 6 👈}] ;; 6 seviye iner
	datoms api
		db.datoms(AVET, ":account/balance");
refcard2
	rfr
		~/prj/study/clj/ex/study_datomic/datalog-02/src/mert/e04.clj
	meta model
		; schemayı ilk transact kaydettiğimizde bize şöyle bir data dönmüştü:
		; #datom[73 10 :ogrenci_id 13194139533318 true]
		; #datom[73 40 22 13194139533318 true]
		; #datom[73 42 38 13194139533318 true]
	{:tx-data [{:db/ident :red} ...
	{:tx-data [{:db/ident :color/red}
	[{:db/ident :order/product
		:db/valueType :db.type/ref
		:db/cardinality :db.cardinality/one}
	[{:order/product 92358976733263
		:order/size 5}
	[{:order/product [:product/id 2]
		:order/size 7}])
	parameter: scalar binding
		'[:find ?e
		:in $ ?product-name
		:where
		[?e :product/name ?product-name]]
	tuple binding
		...
		:in $ [?product-name ?color] 
		...
		db ["Kalem" :color/red])
	collection binding
		...
		:in $ [?product-name ...]  ; 👈 ... sembolü
		:where
		[?e :product/name ?product-name]]
		db ["Kalem" "Defter"])
	relation binding
		'[:find ?e ?product-name ?color ?product-price
			:in $ [[?product-name ?product-price]]
			:where
			[?e :product/name ?product-name]
			[?e :product/color ?color]]
		db [["Kalem" 120] ["Defter" 250]])
	datomic.tx always identifies the current transaction
		{:db/id "datomic.tx"
		 :tx/user "mertnuhoglu"}])
doc
	Console UI
		run datomic console id=g12858
			rfr
				datomic-pro maven setup <url:file:///~/prj/study/clj/datomic-pro-maven-setup.md#r=g13697>
				run datomic console <url:file:///~/prj/study/clj/run-datomic-console.md#r=g12858>
		hata: lein repl çalışmıyor veya datomic-pro.jar dosyası indirilemiyor id=g13696
			rfr
				Error: lein repl çalışmıyor veya datomic-pro.jar dosyası indirilemiyor <url:file:///~/prj/study/clj/error-datomic-pro-indirilemiyor.md#r=g13696>
				datomic-pro maven setup <url:file:///~/prj/study/clj/datomic-pro-maven-setup.md#r=g13697>
my questions
	Client vs Peer vs Transactor
		Datomic Local Dev
			ref: [Local Dev and CI with dev-local | Datomic](https://docs.datomic.com/cloud/dev-local.html)
			İlk başta bununla başlamayı tavsiye ediyorlar
			Client API erişimi var
			Cloud kullanırken bunu lokalde geliştirmede kullanıyorsun
		Datomic On-Prem
			Bu da iki türlü yapılabiliyor:
			in-process peer library
			remote client to a peer server
issues
	run repl + Rebl + portal id=g12891
		ref: multiple repls together: <url:file:///~/projects/study/logseq-study/pages/clojure-otl.md#r=g12447>
		prerequisite: 
			deps.edn configuration <url:file:///~/projects/study/clj/datomic.otl#r=g12890>
		clojure -M:lib/cider-nrepl:inspect/rebl15:middleware/nrebl:inspect/portal-cli
		vim: :ConjureConnect
		cursive: Remote nREPL Connection <url:file:///~/projects/study/logseq-study/pages/clojure-otl.md#r=g12889>
	deps.edn configuration id=g12890
		ref: ~/codes/clj/ex/day-of-datomic-cloud/deps.edn
		com.datomic/dev-local {:mvn/version "0.9.225"}
		com.datomic/datomic-pro {:mvn/version "0.9.5951"}
		:mvn/repos {"datomic-cloud" {:url "s3://datomic-releases-1fc2183a/maven/releases"}}
	def uri examples id=g12896
		(def uri "datomic:dev://localhost:4334/<database-name>")
		(def uri "datomic:dev://localhost:4334/mbrainz-1968-1973")
		(def uri "datomic:mem://trial")
		(def uri "datomic:mem://movies")
	repl code connection id=g12892
		(require '[datomic.api :as d])
		ref: def uri examples <url:file:///~/projects/study/clj/datomic.otl#r=g12896>
			(def uri "datomic:dev://localhost:4334/mbrainz-1968-1973")
		(def conn (d/connect uri))
		(def db (d/db conn))
	hodur ile datomic schema tanımlama id=g12901
		ref
			~/projects/study/clj/ex/study_datomic/hodur01/src/mert/hodur01.clj
			[hodur-org/hodur-engine](https://github.com/hodur-org/hodur-engine)
			[hodur-org/hodur-visualizer-schema](https://github.com/hodur-org/hodur-visualizer-schema)
articles - datomic id=g13413
	rfr
		datomic okuma planı 20221113 <url:file:///~/prj/study/clj/datomic.otl#r=g13676>
	ndx
		datomic okuma planı 20221113 <url:file:///~/prj/study/clj/datomic.otl#r=g13676>
	read id=g13520
		Clojure Power Tools Part 1 | Kari Marttila Blog <url:file:///~/prj/study/clj/ex/study_clojure/ex06/src/ex/e29.clj#r=g14497>
		[Clojure Datomic Exercise | Kari Marttila Blog](https://www.karimarttila.fi/clojure/2020/11/14/clojure-datomic-exercise.html) id=g13067 @datomic @examples
		[[20230524-rtc-Stackoverflow-Questions--Datomic]] <url:file:///~/prj/study/logseq-study/pages/20230524-rtc-Stackoverflow-Questions--Datomic.md#r=g14447>
		[[20230524-rtc-Datomic-for-Five-Year-Olds]] <url:file:///~/prj/study/logseq-study/pages/20230524-rtc-Datomic-for-Five-Year-Olds.md#r=g14446>
		20230524
		Example: Day of Datomic Cloud Sample Data <url:file:///~/prj/study/clj/articles-datomic.md#r=g13521>
		20221114 
		Article: The Datomic Information Model by Rich Hickey <url:file:///~/prj/study/clj/articles-datomic.md#r=g13516>
		The Design of Datomic - Rich Hickey - YouTube <url:file:///~/projects/study/logbook/log_20221112.md#r=g13515>
		Video: Day of Datomic Cloud - Day 4 <url:file:///~/prj/study/clj/articles-datomic.md#r=g13514>
		Lab: Accumulate, Read, Retract, History  <url:file:///~/prj/study/clj/articles-datomic.md#r=g13511>
		Day of Datomic Cloud - Session 3 - YouTube <url:file:///~/prj/study/clj/articles-datomic.md#r=g13510>
		Code - Assertion and Read Tutorial <url:file:///~/prj/study/clj/articles-datomic.md#r=g13509>
		Lab: Assertion Tutorial <url:file:///~/projects/study/clj/articles-datomic.md#r=g13506>
		Day of Datomic Cloud - Session 1 - YouTube <url:file:///~/projects/study/clj/articles-datomic.md#r=g13502>
		20221112 
		Day Of Datomic Cloud <url:file:///~/projects/study/clj/articles-datomic.md#r=g12849>
		Datomic Documentation <url:file:///~/prj/study/clj/datomic_documentation_rtc.md#r=g13500>
		20221107
		Reactive Datalog for Datomic - Nikolas Göbel - YouTube <url:file:///~/projects/study/logbook/log_20221002.md#r=g13434>
		Datascript and Datomic: Data Modeling for Heroes - Mark Bastian - YouTube <url:file:///~/projects/study/logbook/log_20220930.md#r=g13424>
		20220930 
		Norbert Wojtowicz - Modeling your domain (Lambda Days 2016) - YouTube <url:file:///~/prj/study/logbook/log_20220927.md#r=g13409>
		20220928 
		Babashka Datalevin (datalog) example <url:file:///~/prj/study/clj/babashka_interpreter.md#r=g13410>
		kristianmandrup/datascript-tutorial: Datascript and Datomic tutorial book <url:file:///~/projects/study/logbook/log_20220924.md#r=g13401>
		20220924 
		Val on Programming: DataScript as a Lingua Franca for domain modeling <url:file:///~/projects/study/logbook/log_20220921.md#r=g13389>
		20220921 
		Val on Programming: Datomic: Event Sourcing without the hassle <url:file:///~/projects/study/logbook/log_20220916.md#r=g13382>
		20220919 
		Referentially transparent CRUD <url:file:///~/prj/study/logbook/log_20220910.md#r=g13339>
		20220912 
		Article: Datomic from the ground up - subhash <url:file:///~/prj/study/clj/articles-datomic.md#r=g12895>
		Article: Hodur: Declarative Domain Modeling for Datomic Ion/Cloud - Tiago Luchini - YouTube <url:file:///~/prj/study/clj/articles-datomic.md#r=g12893>
		Article: Day of Datomic tutorial <url:file:///~/prj/study/clj/articles-datomic.md#r=g12865>
		Article: mbrainz tutorial <url:file:///~/prj/study/clj/mbrainz-tutorial-rtc.md#r=g12871>
		Article: rebel ile datomic kullanımı <url:file:///~/prj/study/clj/articles-datomic.md#r=g12873>
		Article: Datomic: Look at all the things I'm not doing! (Cont.) (August Lilleaas' blog) <url:file:///~/prj/study/clj/articles-datomic.md#r=g12883>
		Article: What Datomic brings to businesses | by Val Waeselynck | Medium <url:file:///~/prj/study/clj/articles-datomic.md#r=g12884>
		Article: Val on Programming: Using Datomic in your app: a practical guide <url:file:///~/prj/study/clj/articles-datomic.md#r=g12886>
		Article: Separation of Concerns in Datomic Query: Datalog Query and Pull Expressions <url:file:///~/prj/study/clj/articles-datomic.md#r=g12885>
		Article: Datomic Cheat Sheet Series - Queries (Part 4) - Pull - Curious... <url:file:///~/prj/study/clj/articles-datomic.md#r=g12887>
reference functions
	ref: datalog ref <url:file:///~/projects/study/logseq-study/pages/clojure-otl.md#r=g12868>
resources datomic id=g12880
	[Introduction | Datomic](https://docs.datomic.com/on-prem/tutorial/introduction.html)
	[Datomic Cloud Documentation](https://docs.datomic.com/)
	[Datomic/mbrainz-sample: Example queries and rules for working with the Datomic mbrainz example database](https://github.com/Datomic/mbrainz-sample)
		rfr: Article: mbrainz tutorial <url:file:///~/prj/study/clj/mbrainz-tutorial-rtc.md#r=g12871>
	[markbastian/datascript-playground](https://github.com/markbastian/datascript-playground)
	[Datomic/day-of-datomic: Sample Code for Day of Datomic presentation](https://github.com/Datomic/day-of-datomic)
	[Max Datom - Interactive Datomic Tutorial](https://max-datom.com/)
	[Learn Datalog Today!](http://www.learndatalogtoday.org/)
explorations xpl id=g12904
	Datomic Veri Modeli id=g12905
		Notation conventions: id=g12907
			t, y: entity types
			e_t1: entity 1 of type t
			e_y1: entity 1 of type y
			[e_t1] :t/k -> [e_y1]: e_t1's :t/k key has the value e_y1 (or relation from e_t1 to e_y1 through :t/k)
		:db.install/attribute
			Her attribute içinde `:db.install/_attribute :db.part/db` ikilisi var.
			Örnek:
				(d/transact conn [{:db/id #db/id[db.part/db] :db/ident :job/title :db/valueType :db.type/string :db/cardinality :db.cardinality/one :db.install/_attribute :db.part/db}])
				(d/transact conn [{:db/id #db/id[db.part/db] :db/ident :job/salary :db/valueType :db.type/double :db/cardinality :db.cardinality/one :db.install/_attribute :db.part/db}])
			Underscore, ters referans (reverse reference) demektir.
			Demek ki, `:db.part/db` varlığından bu atributlara bir ref var.
			Örnek:
				:db.part/db -----> :job/title
			Bu ref `:db:install/attribute` öğesi üzerinden gerçekleşiyor olmalı.
			Örnek:
				:db.part/db
					:db:install/attribute [:job/title :job/salary]
		:db/ident
		kısaltmalar
			:dpd = :db.part/db
			:dia = :db.install/attribute
			:dvt = :db/valueType
			:did = :db/ident
			:dtr = :db.type/ref
		örnek:
			ref: 
				qry05b: valueType = ref olan tüm atributları çıkartalım <url:file:///~/projects/study/clj/ex/study_datomic/datalog-01/src/mertnuhoglu/metamodel/e01.clj#r=g12902>
				qry03 mbrainz içindeki tüm ref tipindeki atributlar <url:file:///~/projects/study/clj/ex/study_datomic/datalog-01/src/mertnuhoglu/mbrainz/e01.clj#r=g12903>
			{:dpd {:dia [ae1 ae2]}}
			{ae1 {:dvt te1}}
			{te1 {:did :dtr}}
		okunuşu:
			{..} her biri bir entity.
			ae1, te1: bir entity idsi
		Neden sorguların sonrasında bir varlığı çekmek için `ffirst` kullanılıyor?
			Örnek:
				(def dylan-harrison-cd (ffirst (d/q '[:find ?medium
																							:in $ ?release
																							:where
																							[?release :release/media ?medium]]
																				db0 (java.util.ArrayList. dylan-harrison-sessions))))
			Yanıt: Çünkü iki seviyeli içiçe bir liste dönüyor sorgulamalar. Neden iki seviyeli? Çünkü ilk seviye liste, farklı satırlara karşılık geliyor. Her bir satır ise `find` içinde projeksiyonu yapılan `?medium` gibi değişkenlere karşılık geliyor. Dolayısıyla her bir satır içinde de bir liste olmalı. 
		Datomic sorgularına gönderilen argümanlar sadece clj objeleri değil, java objeleri de olabilir.
			Örnek: Burada `ArrayList` gönderilmiş:
				(def dylan-harrison-cd (ffirst (d/q '[:find ?medium
																							:in $ ?release
																							:where
																							[?release :release/media ?medium]]
																				db0 (java.util.ArrayList. dylan-harrison-sessions))))
		Belli bir varlığı çekmek için, tekil atributlardan bir tanesiyle sorgulama yapılmalı:
			Örnek:
				(def led-zeppelin [:artist/gid #uuid "678d88b2-87b0-403b-b63d-5da7465aecc3"])
				(d/pull db0 [:artist/name :artist/startYear] led-zeppelin)
		Reverse Lookup id=g12908
			Örnek:
				[?e :t/_k e_y1] ; => [e_t1]   | Reverse Lookup
				[e_t1 :t/k ?e]  ; => [e_y1]   | Forward Lookup
				(:t/k e_t1)     ; => [e_y1]   | Map Keyword Lookup
			Soyut Tanım:
				Reverse Lookup: Bir e_y1 varlığına :t/k üzerinden ref veren tüm varlıkları bul
				Forward Lookup: Bir e_t1 varlığının :t/k üzerinden referansları
			Yuvarlak Açıklama:
				Reverse Lookup: Bir e'ye ref veren tüm varlıklar
				Forward Lookup: Bir e'nin ref verdiği tüm varlıklar
logbook
	Datomic Kod Okumalarından Notlar  <url:file:///~/prj/study/clj/datomic_kod_okumalarindan_notlar.md#r=g13532>
	20221119 id=g13531
		(d/transact)
			(d/transact conn {:tx-data [[:db/add eid :inv/count 100]]})
			[:db/add "datomic.tx" :db/doc "correct data entry"]
			[:db/add [:inv/sku "SKU-21"] <attribute> <value>]
		



